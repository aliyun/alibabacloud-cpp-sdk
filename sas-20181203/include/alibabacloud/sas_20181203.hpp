// This file is auto-generated, don't edit it. Thanks.

#ifndef ALIBABACLOUD_SAS20181203_H_
#define ALIBABACLOUD_SAS20181203_H_

#include <alibabacloud/open_api.hpp>
#include <boost/any.hpp>
#include <boost/throw_exception.hpp>
#include <darabonba/core.hpp>
#include <darabonba/util.hpp>
#include <iostream>
#include <map>
#include <vector>

using namespace std;

namespace Alibabacloud_Sas20181203 {
class AddVpcHoneyPotRequest : public Darabonba::Model {
public:
  shared_ptr<string> vpcId{};
  shared_ptr<string> vpcSwitchId{};

  AddVpcHoneyPotRequest() {}

  explicit AddVpcHoneyPotRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (vpcId) {
      res["VpcId"] = boost::any(*vpcId);
    }
    if (vpcSwitchId) {
      res["VpcSwitchId"] = boost::any(*vpcSwitchId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("VpcId") != m.end() && !m["VpcId"].empty()) {
      vpcId = make_shared<string>(boost::any_cast<string>(m["VpcId"]));
    }
    if (m.find("VpcSwitchId") != m.end() && !m["VpcSwitchId"].empty()) {
      vpcSwitchId = make_shared<string>(boost::any_cast<string>(m["VpcSwitchId"]));
    }
  }


  virtual ~AddVpcHoneyPotRequest() = default;
};
class AddVpcHoneyPotResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  AddVpcHoneyPotResponseBody() {}

  explicit AddVpcHoneyPotResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~AddVpcHoneyPotResponseBody() = default;
};
class AddVpcHoneyPotResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<AddVpcHoneyPotResponseBody> body{};

  AddVpcHoneyPotResponse() {}

  explicit AddVpcHoneyPotResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        AddVpcHoneyPotResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<AddVpcHoneyPotResponseBody>(model1);
      }
    }
  }


  virtual ~AddVpcHoneyPotResponse() = default;
};
class CheckSecurityEventIdRequest : public Darabonba::Model {
public:
  shared_ptr<vector<string>> securityEventIds{};
  shared_ptr<string> uuid{};

  CheckSecurityEventIdRequest() {}

  explicit CheckSecurityEventIdRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (securityEventIds) {
      res["SecurityEventIds"] = boost::any(*securityEventIds);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("SecurityEventIds") != m.end() && !m["SecurityEventIds"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["SecurityEventIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["SecurityEventIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      securityEventIds = make_shared<vector<string>>(toVec1);
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~CheckSecurityEventIdRequest() = default;
};
class CheckSecurityEventIdResponseBody : public Darabonba::Model {
public:
  shared_ptr<bool> data{};
  shared_ptr<string> requestId{};

  CheckSecurityEventIdResponseBody() {}

  explicit CheckSecurityEventIdResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<bool>(boost::any_cast<bool>(m["Data"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~CheckSecurityEventIdResponseBody() = default;
};
class CheckSecurityEventIdResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<CheckSecurityEventIdResponseBody> body{};

  CheckSecurityEventIdResponse() {}

  explicit CheckSecurityEventIdResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CheckSecurityEventIdResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CheckSecurityEventIdResponseBody>(model1);
      }
    }
  }


  virtual ~CheckSecurityEventIdResponse() = default;
};
class CreateAntiBruteForceRuleRequest : public Darabonba::Model {
public:
  shared_ptr<bool> defaultRule{};
  shared_ptr<long> failCount{};
  shared_ptr<long> forbiddenTime{};
  shared_ptr<string> name{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<long> span{};
  shared_ptr<vector<string>> uuidList{};

  CreateAntiBruteForceRuleRequest() {}

  explicit CreateAntiBruteForceRuleRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (defaultRule) {
      res["DefaultRule"] = boost::any(*defaultRule);
    }
    if (failCount) {
      res["FailCount"] = boost::any(*failCount);
    }
    if (forbiddenTime) {
      res["ForbiddenTime"] = boost::any(*forbiddenTime);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (span) {
      res["Span"] = boost::any(*span);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DefaultRule") != m.end() && !m["DefaultRule"].empty()) {
      defaultRule = make_shared<bool>(boost::any_cast<bool>(m["DefaultRule"]));
    }
    if (m.find("FailCount") != m.end() && !m["FailCount"].empty()) {
      failCount = make_shared<long>(boost::any_cast<long>(m["FailCount"]));
    }
    if (m.find("ForbiddenTime") != m.end() && !m["ForbiddenTime"].empty()) {
      forbiddenTime = make_shared<long>(boost::any_cast<long>(m["ForbiddenTime"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Span") != m.end() && !m["Span"].empty()) {
      span = make_shared<long>(boost::any_cast<long>(m["Span"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["UuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["UuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      uuidList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~CreateAntiBruteForceRuleRequest() = default;
};
class CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule : public Darabonba::Model {
public:
  shared_ptr<long> ruleId{};

  CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule() {}

  explicit CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ruleId) {
      res["RuleId"] = boost::any(*ruleId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RuleId") != m.end() && !m["RuleId"].empty()) {
      ruleId = make_shared<long>(boost::any_cast<long>(m["RuleId"]));
    }
  }


  virtual ~CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule() = default;
};
class CreateAntiBruteForceRuleResponseBody : public Darabonba::Model {
public:
  shared_ptr<CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule> createAntiBruteForceRule{};
  shared_ptr<string> requestId{};

  CreateAntiBruteForceRuleResponseBody() {}

  explicit CreateAntiBruteForceRuleResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (createAntiBruteForceRule) {
      res["CreateAntiBruteForceRule"] = createAntiBruteForceRule ? boost::any(createAntiBruteForceRule->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CreateAntiBruteForceRule") != m.end() && !m["CreateAntiBruteForceRule"].empty()) {
      if (typeid(map<string, boost::any>) == m["CreateAntiBruteForceRule"].type()) {
        CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["CreateAntiBruteForceRule"]));
        createAntiBruteForceRule = make_shared<CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~CreateAntiBruteForceRuleResponseBody() = default;
};
class CreateAntiBruteForceRuleResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<CreateAntiBruteForceRuleResponseBody> body{};

  CreateAntiBruteForceRuleResponse() {}

  explicit CreateAntiBruteForceRuleResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateAntiBruteForceRuleResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateAntiBruteForceRuleResponseBody>(model1);
      }
    }
  }


  virtual ~CreateAntiBruteForceRuleResponse() = default;
};
class CreateBackupPolicyRequest : public Darabonba::Model {
public:
  shared_ptr<string> name{};
  shared_ptr<map<string, boost::any>> policy{};
  shared_ptr<string> policyRegionId{};
  shared_ptr<string> policyVersion{};
  shared_ptr<vector<string>> uuidList{};

  CreateBackupPolicyRequest() {}

  explicit CreateBackupPolicyRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (policy) {
      res["Policy"] = boost::any(*policy);
    }
    if (policyRegionId) {
      res["PolicyRegionId"] = boost::any(*policyRegionId);
    }
    if (policyVersion) {
      res["PolicyVersion"] = boost::any(*policyVersion);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Policy") != m.end() && !m["Policy"].empty()) {
      map<string, boost::any> map1 = boost::any_cast<map<string, boost::any>>(m["Policy"]);
      map<string, boost::any> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      policy = make_shared<map<string, boost::any>>(toMap1);
    }
    if (m.find("PolicyRegionId") != m.end() && !m["PolicyRegionId"].empty()) {
      policyRegionId = make_shared<string>(boost::any_cast<string>(m["PolicyRegionId"]));
    }
    if (m.find("PolicyVersion") != m.end() && !m["PolicyVersion"].empty()) {
      policyVersion = make_shared<string>(boost::any_cast<string>(m["PolicyVersion"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["UuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["UuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      uuidList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~CreateBackupPolicyRequest() = default;
};
class CreateBackupPolicyShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> name{};
  shared_ptr<string> policyShrink{};
  shared_ptr<string> policyRegionId{};
  shared_ptr<string> policyVersion{};
  shared_ptr<vector<string>> uuidList{};

  CreateBackupPolicyShrinkRequest() {}

  explicit CreateBackupPolicyShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (policyShrink) {
      res["Policy"] = boost::any(*policyShrink);
    }
    if (policyRegionId) {
      res["PolicyRegionId"] = boost::any(*policyRegionId);
    }
    if (policyVersion) {
      res["PolicyVersion"] = boost::any(*policyVersion);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Policy") != m.end() && !m["Policy"].empty()) {
      policyShrink = make_shared<string>(boost::any_cast<string>(m["Policy"]));
    }
    if (m.find("PolicyRegionId") != m.end() && !m["PolicyRegionId"].empty()) {
      policyRegionId = make_shared<string>(boost::any_cast<string>(m["PolicyRegionId"]));
    }
    if (m.find("PolicyVersion") != m.end() && !m["PolicyVersion"].empty()) {
      policyVersion = make_shared<string>(boost::any_cast<string>(m["PolicyVersion"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["UuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["UuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      uuidList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~CreateBackupPolicyShrinkRequest() = default;
};
class CreateBackupPolicyResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  CreateBackupPolicyResponseBody() {}

  explicit CreateBackupPolicyResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~CreateBackupPolicyResponseBody() = default;
};
class CreateBackupPolicyResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<CreateBackupPolicyResponseBody> body{};

  CreateBackupPolicyResponse() {}

  explicit CreateBackupPolicyResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateBackupPolicyResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateBackupPolicyResponseBody>(model1);
      }
    }
  }


  virtual ~CreateBackupPolicyResponse() = default;
};
class CreateOrUpdateAssetGroupRequest : public Darabonba::Model {
public:
  shared_ptr<long> groupId{};
  shared_ptr<string> groupName{};
  shared_ptr<string> uuids{};

  CreateOrUpdateAssetGroupRequest() {}

  explicit CreateOrUpdateAssetGroupRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (groupName) {
      res["GroupName"] = boost::any(*groupName);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("GroupName") != m.end() && !m["GroupName"].empty()) {
      groupName = make_shared<string>(boost::any_cast<string>(m["GroupName"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~CreateOrUpdateAssetGroupRequest() = default;
};
class CreateOrUpdateAssetGroupResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> groupId{};
  shared_ptr<string> requestId{};

  CreateOrUpdateAssetGroupResponseBody() {}

  explicit CreateOrUpdateAssetGroupResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~CreateOrUpdateAssetGroupResponseBody() = default;
};
class CreateOrUpdateAssetGroupResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<CreateOrUpdateAssetGroupResponseBody> body{};

  CreateOrUpdateAssetGroupResponse() {}

  explicit CreateOrUpdateAssetGroupResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateOrUpdateAssetGroupResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateOrUpdateAssetGroupResponseBody>(model1);
      }
    }
  }


  virtual ~CreateOrUpdateAssetGroupResponse() = default;
};
class CreateServiceLinkedRoleResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  CreateServiceLinkedRoleResponseBody() {}

  explicit CreateServiceLinkedRoleResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~CreateServiceLinkedRoleResponseBody() = default;
};
class CreateServiceLinkedRoleResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<CreateServiceLinkedRoleResponseBody> body{};

  CreateServiceLinkedRoleResponse() {}

  explicit CreateServiceLinkedRoleResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateServiceLinkedRoleResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateServiceLinkedRoleResponseBody>(model1);
      }
    }
  }


  virtual ~CreateServiceLinkedRoleResponse() = default;
};
class CreateSimilarSecurityEventsQueryTaskRequest : public Darabonba::Model {
public:
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> securityEventId{};
  shared_ptr<string> similarEventScenarioCode{};
  shared_ptr<string> sourceIp{};

  CreateSimilarSecurityEventsQueryTaskRequest() {}

  explicit CreateSimilarSecurityEventsQueryTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (securityEventId) {
      res["SecurityEventId"] = boost::any(*securityEventId);
    }
    if (similarEventScenarioCode) {
      res["SimilarEventScenarioCode"] = boost::any(*similarEventScenarioCode);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SecurityEventId") != m.end() && !m["SecurityEventId"].empty()) {
      securityEventId = make_shared<long>(boost::any_cast<long>(m["SecurityEventId"]));
    }
    if (m.find("SimilarEventScenarioCode") != m.end() && !m["SimilarEventScenarioCode"].empty()) {
      similarEventScenarioCode = make_shared<string>(boost::any_cast<string>(m["SimilarEventScenarioCode"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~CreateSimilarSecurityEventsQueryTaskRequest() = default;
};
class CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse : public Darabonba::Model {
public:
  shared_ptr<string> status{};
  shared_ptr<long> taskId{};

  CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse() {}

  explicit CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse() = default;
};
class CreateSimilarSecurityEventsQueryTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse> createSimilarSecurityEventsQueryTaskResponse{};
  shared_ptr<string> requestId{};

  CreateSimilarSecurityEventsQueryTaskResponseBody() {}

  explicit CreateSimilarSecurityEventsQueryTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (createSimilarSecurityEventsQueryTaskResponse) {
      res["CreateSimilarSecurityEventsQueryTaskResponse"] = createSimilarSecurityEventsQueryTaskResponse ? boost::any(createSimilarSecurityEventsQueryTaskResponse->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CreateSimilarSecurityEventsQueryTaskResponse") != m.end() && !m["CreateSimilarSecurityEventsQueryTaskResponse"].empty()) {
      if (typeid(map<string, boost::any>) == m["CreateSimilarSecurityEventsQueryTaskResponse"].type()) {
        CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["CreateSimilarSecurityEventsQueryTaskResponse"]));
        createSimilarSecurityEventsQueryTaskResponse = make_shared<CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~CreateSimilarSecurityEventsQueryTaskResponseBody() = default;
};
class CreateSimilarSecurityEventsQueryTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<CreateSimilarSecurityEventsQueryTaskResponseBody> body{};

  CreateSimilarSecurityEventsQueryTaskResponse() {}

  explicit CreateSimilarSecurityEventsQueryTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateSimilarSecurityEventsQueryTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateSimilarSecurityEventsQueryTaskResponseBody>(model1);
      }
    }
  }


  virtual ~CreateSimilarSecurityEventsQueryTaskResponse() = default;
};
class DeleteBackupPolicyRequest : public Darabonba::Model {
public:
  shared_ptr<long> id{};
  shared_ptr<string> policyVersion{};

  DeleteBackupPolicyRequest() {}

  explicit DeleteBackupPolicyRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (policyVersion) {
      res["PolicyVersion"] = boost::any(*policyVersion);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("PolicyVersion") != m.end() && !m["PolicyVersion"].empty()) {
      policyVersion = make_shared<string>(boost::any_cast<string>(m["PolicyVersion"]));
    }
  }


  virtual ~DeleteBackupPolicyRequest() = default;
};
class DeleteBackupPolicyResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  DeleteBackupPolicyResponseBody() {}

  explicit DeleteBackupPolicyResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DeleteBackupPolicyResponseBody() = default;
};
class DeleteBackupPolicyResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DeleteBackupPolicyResponseBody> body{};

  DeleteBackupPolicyResponse() {}

  explicit DeleteBackupPolicyResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteBackupPolicyResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteBackupPolicyResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteBackupPolicyResponse() = default;
};
class DeleteBackupPolicyMachineRequest : public Darabonba::Model {
public:
  shared_ptr<long> policyId{};
  shared_ptr<string> policyVersion{};
  shared_ptr<string> uuid{};
  shared_ptr<vector<string>> uuidList{};

  DeleteBackupPolicyMachineRequest() {}

  explicit DeleteBackupPolicyMachineRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (policyId) {
      res["PolicyId"] = boost::any(*policyId);
    }
    if (policyVersion) {
      res["PolicyVersion"] = boost::any(*policyVersion);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PolicyId") != m.end() && !m["PolicyId"].empty()) {
      policyId = make_shared<long>(boost::any_cast<long>(m["PolicyId"]));
    }
    if (m.find("PolicyVersion") != m.end() && !m["PolicyVersion"].empty()) {
      policyVersion = make_shared<string>(boost::any_cast<string>(m["PolicyVersion"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["UuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["UuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      uuidList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~DeleteBackupPolicyMachineRequest() = default;
};
class DeleteBackupPolicyMachineResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  DeleteBackupPolicyMachineResponseBody() {}

  explicit DeleteBackupPolicyMachineResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DeleteBackupPolicyMachineResponseBody() = default;
};
class DeleteBackupPolicyMachineResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DeleteBackupPolicyMachineResponseBody> body{};

  DeleteBackupPolicyMachineResponse() {}

  explicit DeleteBackupPolicyMachineResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteBackupPolicyMachineResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteBackupPolicyMachineResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteBackupPolicyMachineResponse() = default;
};
class DeleteGroupRequest : public Darabonba::Model {
public:
  shared_ptr<long> groupId{};
  shared_ptr<string> sourceIp{};

  DeleteGroupRequest() {}

  explicit DeleteGroupRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DeleteGroupRequest() = default;
};
class DeleteGroupResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  DeleteGroupResponseBody() {}

  explicit DeleteGroupResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DeleteGroupResponseBody() = default;
};
class DeleteGroupResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DeleteGroupResponseBody> body{};

  DeleteGroupResponse() {}

  explicit DeleteGroupResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteGroupResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteGroupResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteGroupResponse() = default;
};
class DeleteLoginBaseConfigRequest : public Darabonba::Model {
public:
  shared_ptr<string> config{};
  shared_ptr<string> target{};
  shared_ptr<string> type{};

  DeleteLoginBaseConfigRequest() {}

  explicit DeleteLoginBaseConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (config) {
      res["Config"] = boost::any(*config);
    }
    if (target) {
      res["Target"] = boost::any(*target);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Config") != m.end() && !m["Config"].empty()) {
      config = make_shared<string>(boost::any_cast<string>(m["Config"]));
    }
    if (m.find("Target") != m.end() && !m["Target"].empty()) {
      target = make_shared<string>(boost::any_cast<string>(m["Target"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DeleteLoginBaseConfigRequest() = default;
};
class DeleteLoginBaseConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  DeleteLoginBaseConfigResponseBody() {}

  explicit DeleteLoginBaseConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DeleteLoginBaseConfigResponseBody() = default;
};
class DeleteLoginBaseConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DeleteLoginBaseConfigResponseBody> body{};

  DeleteLoginBaseConfigResponse() {}

  explicit DeleteLoginBaseConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteLoginBaseConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteLoginBaseConfigResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteLoginBaseConfigResponse() = default;
};
class DeleteStrategyRequest : public Darabonba::Model {
public:
  shared_ptr<string> id{};
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};

  DeleteStrategyRequest() {}

  explicit DeleteStrategyRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<string>(boost::any_cast<string>(m["Id"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DeleteStrategyRequest() = default;
};
class DeleteStrategyResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  DeleteStrategyResponseBody() {}

  explicit DeleteStrategyResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DeleteStrategyResponseBody() = default;
};
class DeleteStrategyResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DeleteStrategyResponseBody> body{};

  DeleteStrategyResponse() {}

  explicit DeleteStrategyResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteStrategyResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteStrategyResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteStrategyResponse() = default;
};
class DeleteTagWithUuidRequest : public Darabonba::Model {
public:
  shared_ptr<string> tagName{};
  shared_ptr<string> uuidList{};

  DeleteTagWithUuidRequest() {}

  explicit DeleteTagWithUuidRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (tagName) {
      res["TagName"] = boost::any(*tagName);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("TagName") != m.end() && !m["TagName"].empty()) {
      tagName = make_shared<string>(boost::any_cast<string>(m["TagName"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      uuidList = make_shared<string>(boost::any_cast<string>(m["UuidList"]));
    }
  }


  virtual ~DeleteTagWithUuidRequest() = default;
};
class DeleteTagWithUuidResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  DeleteTagWithUuidResponseBody() {}

  explicit DeleteTagWithUuidResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DeleteTagWithUuidResponseBody() = default;
};
class DeleteTagWithUuidResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DeleteTagWithUuidResponseBody> body{};

  DeleteTagWithUuidResponse() {}

  explicit DeleteTagWithUuidResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteTagWithUuidResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteTagWithUuidResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteTagWithUuidResponse() = default;
};
class DeleteVpcHoneyPotRequest : public Darabonba::Model {
public:
  shared_ptr<string> vpcId{};

  DeleteVpcHoneyPotRequest() {}

  explicit DeleteVpcHoneyPotRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (vpcId) {
      res["VpcId"] = boost::any(*vpcId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("VpcId") != m.end() && !m["VpcId"].empty()) {
      vpcId = make_shared<string>(boost::any_cast<string>(m["VpcId"]));
    }
  }


  virtual ~DeleteVpcHoneyPotRequest() = default;
};
class DeleteVpcHoneyPotResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  DeleteVpcHoneyPotResponseBody() {}

  explicit DeleteVpcHoneyPotResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DeleteVpcHoneyPotResponseBody() = default;
};
class DeleteVpcHoneyPotResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DeleteVpcHoneyPotResponseBody> body{};

  DeleteVpcHoneyPotResponse() {}

  explicit DeleteVpcHoneyPotResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteVpcHoneyPotResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteVpcHoneyPotResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteVpcHoneyPotResponse() = default;
};
class DescribeAccesskeyLeakListRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> query{};
  shared_ptr<long> startTs{};
  shared_ptr<string> status{};

  DescribeAccesskeyLeakListRequest() {}

  explicit DescribeAccesskeyLeakListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (query) {
      res["Query"] = boost::any(*query);
    }
    if (startTs) {
      res["StartTs"] = boost::any(*startTs);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Query") != m.end() && !m["Query"].empty()) {
      query = make_shared<string>(boost::any_cast<string>(m["Query"]));
    }
    if (m.find("StartTs") != m.end() && !m["StartTs"].empty()) {
      startTs = make_shared<long>(boost::any_cast<long>(m["StartTs"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
  }


  virtual ~DescribeAccesskeyLeakListRequest() = default;
};
class DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList : public Darabonba::Model {
public:
  shared_ptr<string> accesskeyId{};
  shared_ptr<string> aliUserName{};
  shared_ptr<string> asset{};
  shared_ptr<string> dealTime{};
  shared_ptr<string> dealType{};
  shared_ptr<long> gmtModified{};
  shared_ptr<long> id{};
  shared_ptr<string> status{};
  shared_ptr<string> type{};
  shared_ptr<string> url{};
  shared_ptr<string> userType{};

  DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList() {}

  explicit DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accesskeyId) {
      res["AccesskeyId"] = boost::any(*accesskeyId);
    }
    if (aliUserName) {
      res["AliUserName"] = boost::any(*aliUserName);
    }
    if (asset) {
      res["Asset"] = boost::any(*asset);
    }
    if (dealTime) {
      res["DealTime"] = boost::any(*dealTime);
    }
    if (dealType) {
      res["DealType"] = boost::any(*dealType);
    }
    if (gmtModified) {
      res["GmtModified"] = boost::any(*gmtModified);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (url) {
      res["Url"] = boost::any(*url);
    }
    if (userType) {
      res["UserType"] = boost::any(*userType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccesskeyId") != m.end() && !m["AccesskeyId"].empty()) {
      accesskeyId = make_shared<string>(boost::any_cast<string>(m["AccesskeyId"]));
    }
    if (m.find("AliUserName") != m.end() && !m["AliUserName"].empty()) {
      aliUserName = make_shared<string>(boost::any_cast<string>(m["AliUserName"]));
    }
    if (m.find("Asset") != m.end() && !m["Asset"].empty()) {
      asset = make_shared<string>(boost::any_cast<string>(m["Asset"]));
    }
    if (m.find("DealTime") != m.end() && !m["DealTime"].empty()) {
      dealTime = make_shared<string>(boost::any_cast<string>(m["DealTime"]));
    }
    if (m.find("DealType") != m.end() && !m["DealType"].empty()) {
      dealType = make_shared<string>(boost::any_cast<string>(m["DealType"]));
    }
    if (m.find("GmtModified") != m.end() && !m["GmtModified"].empty()) {
      gmtModified = make_shared<long>(boost::any_cast<long>(m["GmtModified"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Url") != m.end() && !m["Url"].empty()) {
      url = make_shared<string>(boost::any_cast<string>(m["Url"]));
    }
    if (m.find("UserType") != m.end() && !m["UserType"].empty()) {
      userType = make_shared<string>(boost::any_cast<string>(m["UserType"]));
    }
  }


  virtual ~DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList() = default;
};
class DescribeAccesskeyLeakListResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList>> accessKeyLeakList{};
  shared_ptr<long> akLeakCount{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> gmtLast{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};

  DescribeAccesskeyLeakListResponseBody() {}

  explicit DescribeAccesskeyLeakListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accessKeyLeakList) {
      vector<boost::any> temp1;
      for(auto item1:*accessKeyLeakList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["AccessKeyLeakList"] = boost::any(temp1);
    }
    if (akLeakCount) {
      res["AkLeakCount"] = boost::any(*akLeakCount);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (gmtLast) {
      res["GmtLast"] = boost::any(*gmtLast);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccessKeyLeakList") != m.end() && !m["AccessKeyLeakList"].empty()) {
      if (typeid(vector<boost::any>) == m["AccessKeyLeakList"].type()) {
        vector<DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["AccessKeyLeakList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        accessKeyLeakList = make_shared<vector<DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList>>(expect1);
      }
    }
    if (m.find("AkLeakCount") != m.end() && !m["AkLeakCount"].empty()) {
      akLeakCount = make_shared<long>(boost::any_cast<long>(m["AkLeakCount"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("GmtLast") != m.end() && !m["GmtLast"].empty()) {
      gmtLast = make_shared<long>(boost::any_cast<long>(m["GmtLast"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeAccesskeyLeakListResponseBody() = default;
};
class DescribeAccesskeyLeakListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeAccesskeyLeakListResponseBody> body{};

  DescribeAccesskeyLeakListResponse() {}

  explicit DescribeAccesskeyLeakListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeAccesskeyLeakListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeAccesskeyLeakListResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeAccesskeyLeakListResponse() = default;
};
class DescribeAffectedMaliciousFileImagesRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> imageDigest{};
  shared_ptr<string> imageLayer{};
  shared_ptr<string> imageTag{};
  shared_ptr<string> lang{};
  shared_ptr<string> maliciousMd5{};
  shared_ptr<string> pageSize{};
  shared_ptr<string> repoId{};
  shared_ptr<string> repoInstanceId{};
  shared_ptr<string> repoName{};
  shared_ptr<string> repoNamespace{};
  shared_ptr<string> repoRegionId{};

  DescribeAffectedMaliciousFileImagesRequest() {}

  explicit DescribeAffectedMaliciousFileImagesRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (imageDigest) {
      res["ImageDigest"] = boost::any(*imageDigest);
    }
    if (imageLayer) {
      res["ImageLayer"] = boost::any(*imageLayer);
    }
    if (imageTag) {
      res["ImageTag"] = boost::any(*imageTag);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (maliciousMd5) {
      res["MaliciousMd5"] = boost::any(*maliciousMd5);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (repoId) {
      res["RepoId"] = boost::any(*repoId);
    }
    if (repoInstanceId) {
      res["RepoInstanceId"] = boost::any(*repoInstanceId);
    }
    if (repoName) {
      res["RepoName"] = boost::any(*repoName);
    }
    if (repoNamespace) {
      res["RepoNamespace"] = boost::any(*repoNamespace);
    }
    if (repoRegionId) {
      res["RepoRegionId"] = boost::any(*repoRegionId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("ImageDigest") != m.end() && !m["ImageDigest"].empty()) {
      imageDigest = make_shared<string>(boost::any_cast<string>(m["ImageDigest"]));
    }
    if (m.find("ImageLayer") != m.end() && !m["ImageLayer"].empty()) {
      imageLayer = make_shared<string>(boost::any_cast<string>(m["ImageLayer"]));
    }
    if (m.find("ImageTag") != m.end() && !m["ImageTag"].empty()) {
      imageTag = make_shared<string>(boost::any_cast<string>(m["ImageTag"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("MaliciousMd5") != m.end() && !m["MaliciousMd5"].empty()) {
      maliciousMd5 = make_shared<string>(boost::any_cast<string>(m["MaliciousMd5"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<string>(boost::any_cast<string>(m["PageSize"]));
    }
    if (m.find("RepoId") != m.end() && !m["RepoId"].empty()) {
      repoId = make_shared<string>(boost::any_cast<string>(m["RepoId"]));
    }
    if (m.find("RepoInstanceId") != m.end() && !m["RepoInstanceId"].empty()) {
      repoInstanceId = make_shared<string>(boost::any_cast<string>(m["RepoInstanceId"]));
    }
    if (m.find("RepoName") != m.end() && !m["RepoName"].empty()) {
      repoName = make_shared<string>(boost::any_cast<string>(m["RepoName"]));
    }
    if (m.find("RepoNamespace") != m.end() && !m["RepoNamespace"].empty()) {
      repoNamespace = make_shared<string>(boost::any_cast<string>(m["RepoNamespace"]));
    }
    if (m.find("RepoRegionId") != m.end() && !m["RepoRegionId"].empty()) {
      repoRegionId = make_shared<string>(boost::any_cast<string>(m["RepoRegionId"]));
    }
  }


  virtual ~DescribeAffectedMaliciousFileImagesRequest() = default;
};
class DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse : public Darabonba::Model {
public:
  shared_ptr<string> digest{};
  shared_ptr<string> filePath{};
  shared_ptr<long> firstScanTimestamp{};
  shared_ptr<string> imageUuid{};
  shared_ptr<long> latestScanTimestamp{};
  shared_ptr<long> latestVerifyTimestamp{};
  shared_ptr<string> layer{};
  shared_ptr<string> level{};
  shared_ptr<string> maliciousMd5{};
  shared_ptr<string> namespace_{};
  shared_ptr<string> repoId{};
  shared_ptr<string> repoInstanceId{};
  shared_ptr<string> repoName{};
  shared_ptr<string> repoRegionId{};
  shared_ptr<long> status{};
  shared_ptr<string> tag{};

  DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse() {}

  explicit DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (digest) {
      res["Digest"] = boost::any(*digest);
    }
    if (filePath) {
      res["FilePath"] = boost::any(*filePath);
    }
    if (firstScanTimestamp) {
      res["FirstScanTimestamp"] = boost::any(*firstScanTimestamp);
    }
    if (imageUuid) {
      res["ImageUuid"] = boost::any(*imageUuid);
    }
    if (latestScanTimestamp) {
      res["LatestScanTimestamp"] = boost::any(*latestScanTimestamp);
    }
    if (latestVerifyTimestamp) {
      res["LatestVerifyTimestamp"] = boost::any(*latestVerifyTimestamp);
    }
    if (layer) {
      res["Layer"] = boost::any(*layer);
    }
    if (level) {
      res["Level"] = boost::any(*level);
    }
    if (maliciousMd5) {
      res["MaliciousMd5"] = boost::any(*maliciousMd5);
    }
    if (namespace_) {
      res["Namespace"] = boost::any(*namespace_);
    }
    if (repoId) {
      res["RepoId"] = boost::any(*repoId);
    }
    if (repoInstanceId) {
      res["RepoInstanceId"] = boost::any(*repoInstanceId);
    }
    if (repoName) {
      res["RepoName"] = boost::any(*repoName);
    }
    if (repoRegionId) {
      res["RepoRegionId"] = boost::any(*repoRegionId);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (tag) {
      res["Tag"] = boost::any(*tag);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Digest") != m.end() && !m["Digest"].empty()) {
      digest = make_shared<string>(boost::any_cast<string>(m["Digest"]));
    }
    if (m.find("FilePath") != m.end() && !m["FilePath"].empty()) {
      filePath = make_shared<string>(boost::any_cast<string>(m["FilePath"]));
    }
    if (m.find("FirstScanTimestamp") != m.end() && !m["FirstScanTimestamp"].empty()) {
      firstScanTimestamp = make_shared<long>(boost::any_cast<long>(m["FirstScanTimestamp"]));
    }
    if (m.find("ImageUuid") != m.end() && !m["ImageUuid"].empty()) {
      imageUuid = make_shared<string>(boost::any_cast<string>(m["ImageUuid"]));
    }
    if (m.find("LatestScanTimestamp") != m.end() && !m["LatestScanTimestamp"].empty()) {
      latestScanTimestamp = make_shared<long>(boost::any_cast<long>(m["LatestScanTimestamp"]));
    }
    if (m.find("LatestVerifyTimestamp") != m.end() && !m["LatestVerifyTimestamp"].empty()) {
      latestVerifyTimestamp = make_shared<long>(boost::any_cast<long>(m["LatestVerifyTimestamp"]));
    }
    if (m.find("Layer") != m.end() && !m["Layer"].empty()) {
      layer = make_shared<string>(boost::any_cast<string>(m["Layer"]));
    }
    if (m.find("Level") != m.end() && !m["Level"].empty()) {
      level = make_shared<string>(boost::any_cast<string>(m["Level"]));
    }
    if (m.find("MaliciousMd5") != m.end() && !m["MaliciousMd5"].empty()) {
      maliciousMd5 = make_shared<string>(boost::any_cast<string>(m["MaliciousMd5"]));
    }
    if (m.find("Namespace") != m.end() && !m["Namespace"].empty()) {
      namespace_ = make_shared<string>(boost::any_cast<string>(m["Namespace"]));
    }
    if (m.find("RepoId") != m.end() && !m["RepoId"].empty()) {
      repoId = make_shared<string>(boost::any_cast<string>(m["RepoId"]));
    }
    if (m.find("RepoInstanceId") != m.end() && !m["RepoInstanceId"].empty()) {
      repoInstanceId = make_shared<string>(boost::any_cast<string>(m["RepoInstanceId"]));
    }
    if (m.find("RepoName") != m.end() && !m["RepoName"].empty()) {
      repoName = make_shared<string>(boost::any_cast<string>(m["RepoName"]));
    }
    if (m.find("RepoRegionId") != m.end() && !m["RepoRegionId"].empty()) {
      repoRegionId = make_shared<string>(boost::any_cast<string>(m["RepoRegionId"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("Tag") != m.end() && !m["Tag"].empty()) {
      tag = make_shared<string>(boost::any_cast<string>(m["Tag"]));
    }
  }


  virtual ~DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse() = default;
};
class DescribeAffectedMaliciousFileImagesResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeAffectedMaliciousFileImagesResponseBodyPageInfo() {}

  explicit DescribeAffectedMaliciousFileImagesResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeAffectedMaliciousFileImagesResponseBodyPageInfo() = default;
};
class DescribeAffectedMaliciousFileImagesResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse>> affectedMaliciousFileImagesResponse{};
  shared_ptr<DescribeAffectedMaliciousFileImagesResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};

  DescribeAffectedMaliciousFileImagesResponseBody() {}

  explicit DescribeAffectedMaliciousFileImagesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (affectedMaliciousFileImagesResponse) {
      vector<boost::any> temp1;
      for(auto item1:*affectedMaliciousFileImagesResponse){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["AffectedMaliciousFileImagesResponse"] = boost::any(temp1);
    }
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AffectedMaliciousFileImagesResponse") != m.end() && !m["AffectedMaliciousFileImagesResponse"].empty()) {
      if (typeid(vector<boost::any>) == m["AffectedMaliciousFileImagesResponse"].type()) {
        vector<DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["AffectedMaliciousFileImagesResponse"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        affectedMaliciousFileImagesResponse = make_shared<vector<DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse>>(expect1);
      }
    }
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeAffectedMaliciousFileImagesResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeAffectedMaliciousFileImagesResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeAffectedMaliciousFileImagesResponseBody() = default;
};
class DescribeAffectedMaliciousFileImagesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeAffectedMaliciousFileImagesResponseBody> body{};

  DescribeAffectedMaliciousFileImagesResponse() {}

  explicit DescribeAffectedMaliciousFileImagesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeAffectedMaliciousFileImagesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeAffectedMaliciousFileImagesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeAffectedMaliciousFileImagesResponse() = default;
};
class DescribeAlarmEventDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> alarmUniqueInfo{};
  shared_ptr<string> from{};
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};

  DescribeAlarmEventDetailRequest() {}

  explicit DescribeAlarmEventDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (alarmUniqueInfo) {
      res["AlarmUniqueInfo"] = boost::any(*alarmUniqueInfo);
    }
    if (from) {
      res["From"] = boost::any(*from);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AlarmUniqueInfo") != m.end() && !m["AlarmUniqueInfo"].empty()) {
      alarmUniqueInfo = make_shared<string>(boost::any_cast<string>(m["AlarmUniqueInfo"]));
    }
    if (m.find("From") != m.end() && !m["From"].empty()) {
      from = make_shared<string>(boost::any_cast<string>(m["From"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeAlarmEventDetailRequest() = default;
};
class DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue : public Darabonba::Model {
public:
  shared_ptr<string> name{};
  shared_ptr<string> type{};
  shared_ptr<string> value{};

  DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue() {}

  explicit DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (value) {
      res["Value"] = boost::any(*value);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Value") != m.end() && !m["Value"].empty()) {
      value = make_shared<string>(boost::any_cast<string>(m["Value"]));
    }
  }


  virtual ~DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue() = default;
};
class DescribeAlarmEventDetailResponseBodyDataCauseDetails : public Darabonba::Model {
public:
  shared_ptr<string> key{};
  shared_ptr<vector<DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue>> value{};

  DescribeAlarmEventDetailResponseBodyDataCauseDetails() {}

  explicit DescribeAlarmEventDetailResponseBodyDataCauseDetails(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (key) {
      res["Key"] = boost::any(*key);
    }
    if (value) {
      vector<boost::any> temp1;
      for(auto item1:*value){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Value"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Key") != m.end() && !m["Key"].empty()) {
      key = make_shared<string>(boost::any_cast<string>(m["Key"]));
    }
    if (m.find("Value") != m.end() && !m["Value"].empty()) {
      if (typeid(vector<boost::any>) == m["Value"].type()) {
        vector<DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Value"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        value = make_shared<vector<DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue>>(expect1);
      }
    }
  }


  virtual ~DescribeAlarmEventDetailResponseBodyDataCauseDetails() = default;
};
class DescribeAlarmEventDetailResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> alarmEventAliasName{};
  shared_ptr<string> alarmEventDesc{};
  shared_ptr<string> alarmUniqueInfo{};
  shared_ptr<string> appName{};
  shared_ptr<bool> canBeDealOnLine{};
  shared_ptr<bool> canCancelFault{};
  shared_ptr<vector<DescribeAlarmEventDetailResponseBodyDataCauseDetails>> causeDetails{};
  shared_ptr<bool> containHwMode{};
  shared_ptr<string> containerId{};
  shared_ptr<string> containerImageId{};
  shared_ptr<string> containerImageName{};
  shared_ptr<string> dataSource{};
  shared_ptr<long> endTime{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> k8sClusterId{};
  shared_ptr<string> k8sClusterName{};
  shared_ptr<string> k8sNamespace{};
  shared_ptr<string> k8sNodeId{};
  shared_ptr<string> k8sNodeName{};
  shared_ptr<string> k8sPodName{};
  shared_ptr<string> level{};
  shared_ptr<string> solution{};
  shared_ptr<long> startTime{};
  shared_ptr<string> type{};
  shared_ptr<string> uuid{};

  DescribeAlarmEventDetailResponseBodyData() {}

  explicit DescribeAlarmEventDetailResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (alarmEventAliasName) {
      res["AlarmEventAliasName"] = boost::any(*alarmEventAliasName);
    }
    if (alarmEventDesc) {
      res["AlarmEventDesc"] = boost::any(*alarmEventDesc);
    }
    if (alarmUniqueInfo) {
      res["AlarmUniqueInfo"] = boost::any(*alarmUniqueInfo);
    }
    if (appName) {
      res["AppName"] = boost::any(*appName);
    }
    if (canBeDealOnLine) {
      res["CanBeDealOnLine"] = boost::any(*canBeDealOnLine);
    }
    if (canCancelFault) {
      res["CanCancelFault"] = boost::any(*canCancelFault);
    }
    if (causeDetails) {
      vector<boost::any> temp1;
      for(auto item1:*causeDetails){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["CauseDetails"] = boost::any(temp1);
    }
    if (containHwMode) {
      res["ContainHwMode"] = boost::any(*containHwMode);
    }
    if (containerId) {
      res["ContainerId"] = boost::any(*containerId);
    }
    if (containerImageId) {
      res["ContainerImageId"] = boost::any(*containerImageId);
    }
    if (containerImageName) {
      res["ContainerImageName"] = boost::any(*containerImageName);
    }
    if (dataSource) {
      res["DataSource"] = boost::any(*dataSource);
    }
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (k8sClusterId) {
      res["K8sClusterId"] = boost::any(*k8sClusterId);
    }
    if (k8sClusterName) {
      res["K8sClusterName"] = boost::any(*k8sClusterName);
    }
    if (k8sNamespace) {
      res["K8sNamespace"] = boost::any(*k8sNamespace);
    }
    if (k8sNodeId) {
      res["K8sNodeId"] = boost::any(*k8sNodeId);
    }
    if (k8sNodeName) {
      res["K8sNodeName"] = boost::any(*k8sNodeName);
    }
    if (k8sPodName) {
      res["K8sPodName"] = boost::any(*k8sPodName);
    }
    if (level) {
      res["Level"] = boost::any(*level);
    }
    if (solution) {
      res["Solution"] = boost::any(*solution);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AlarmEventAliasName") != m.end() && !m["AlarmEventAliasName"].empty()) {
      alarmEventAliasName = make_shared<string>(boost::any_cast<string>(m["AlarmEventAliasName"]));
    }
    if (m.find("AlarmEventDesc") != m.end() && !m["AlarmEventDesc"].empty()) {
      alarmEventDesc = make_shared<string>(boost::any_cast<string>(m["AlarmEventDesc"]));
    }
    if (m.find("AlarmUniqueInfo") != m.end() && !m["AlarmUniqueInfo"].empty()) {
      alarmUniqueInfo = make_shared<string>(boost::any_cast<string>(m["AlarmUniqueInfo"]));
    }
    if (m.find("AppName") != m.end() && !m["AppName"].empty()) {
      appName = make_shared<string>(boost::any_cast<string>(m["AppName"]));
    }
    if (m.find("CanBeDealOnLine") != m.end() && !m["CanBeDealOnLine"].empty()) {
      canBeDealOnLine = make_shared<bool>(boost::any_cast<bool>(m["CanBeDealOnLine"]));
    }
    if (m.find("CanCancelFault") != m.end() && !m["CanCancelFault"].empty()) {
      canCancelFault = make_shared<bool>(boost::any_cast<bool>(m["CanCancelFault"]));
    }
    if (m.find("CauseDetails") != m.end() && !m["CauseDetails"].empty()) {
      if (typeid(vector<boost::any>) == m["CauseDetails"].type()) {
        vector<DescribeAlarmEventDetailResponseBodyDataCauseDetails> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["CauseDetails"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeAlarmEventDetailResponseBodyDataCauseDetails model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        causeDetails = make_shared<vector<DescribeAlarmEventDetailResponseBodyDataCauseDetails>>(expect1);
      }
    }
    if (m.find("ContainHwMode") != m.end() && !m["ContainHwMode"].empty()) {
      containHwMode = make_shared<bool>(boost::any_cast<bool>(m["ContainHwMode"]));
    }
    if (m.find("ContainerId") != m.end() && !m["ContainerId"].empty()) {
      containerId = make_shared<string>(boost::any_cast<string>(m["ContainerId"]));
    }
    if (m.find("ContainerImageId") != m.end() && !m["ContainerImageId"].empty()) {
      containerImageId = make_shared<string>(boost::any_cast<string>(m["ContainerImageId"]));
    }
    if (m.find("ContainerImageName") != m.end() && !m["ContainerImageName"].empty()) {
      containerImageName = make_shared<string>(boost::any_cast<string>(m["ContainerImageName"]));
    }
    if (m.find("DataSource") != m.end() && !m["DataSource"].empty()) {
      dataSource = make_shared<string>(boost::any_cast<string>(m["DataSource"]));
    }
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<long>(boost::any_cast<long>(m["EndTime"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("K8sClusterId") != m.end() && !m["K8sClusterId"].empty()) {
      k8sClusterId = make_shared<string>(boost::any_cast<string>(m["K8sClusterId"]));
    }
    if (m.find("K8sClusterName") != m.end() && !m["K8sClusterName"].empty()) {
      k8sClusterName = make_shared<string>(boost::any_cast<string>(m["K8sClusterName"]));
    }
    if (m.find("K8sNamespace") != m.end() && !m["K8sNamespace"].empty()) {
      k8sNamespace = make_shared<string>(boost::any_cast<string>(m["K8sNamespace"]));
    }
    if (m.find("K8sNodeId") != m.end() && !m["K8sNodeId"].empty()) {
      k8sNodeId = make_shared<string>(boost::any_cast<string>(m["K8sNodeId"]));
    }
    if (m.find("K8sNodeName") != m.end() && !m["K8sNodeName"].empty()) {
      k8sNodeName = make_shared<string>(boost::any_cast<string>(m["K8sNodeName"]));
    }
    if (m.find("K8sPodName") != m.end() && !m["K8sPodName"].empty()) {
      k8sPodName = make_shared<string>(boost::any_cast<string>(m["K8sPodName"]));
    }
    if (m.find("Level") != m.end() && !m["Level"].empty()) {
      level = make_shared<string>(boost::any_cast<string>(m["Level"]));
    }
    if (m.find("Solution") != m.end() && !m["Solution"].empty()) {
      solution = make_shared<string>(boost::any_cast<string>(m["Solution"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<long>(boost::any_cast<long>(m["StartTime"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeAlarmEventDetailResponseBodyData() = default;
};
class DescribeAlarmEventDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeAlarmEventDetailResponseBodyData> data{};
  shared_ptr<string> requestId{};

  DescribeAlarmEventDetailResponseBody() {}

  explicit DescribeAlarmEventDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        DescribeAlarmEventDetailResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<DescribeAlarmEventDetailResponseBodyData>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeAlarmEventDetailResponseBody() = default;
};
class DescribeAlarmEventDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeAlarmEventDetailResponseBody> body{};

  DescribeAlarmEventDetailResponse() {}

  explicit DescribeAlarmEventDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeAlarmEventDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeAlarmEventDetailResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeAlarmEventDetailResponse() = default;
};
class DescribeAlarmEventListRequest : public Darabonba::Model {
public:
  shared_ptr<string> alarmEventName{};
  shared_ptr<string> alarmEventType{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> dealed{};
  shared_ptr<string> from{};
  shared_ptr<string> groupId{};
  shared_ptr<string> lang{};
  shared_ptr<string> levels{};
  shared_ptr<vector<string>> operateErrorCodeList{};
  shared_ptr<string> pageSize{};
  shared_ptr<string> remark{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> tacticId{};

  DescribeAlarmEventListRequest() {}

  explicit DescribeAlarmEventListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (alarmEventName) {
      res["AlarmEventName"] = boost::any(*alarmEventName);
    }
    if (alarmEventType) {
      res["AlarmEventType"] = boost::any(*alarmEventType);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (dealed) {
      res["Dealed"] = boost::any(*dealed);
    }
    if (from) {
      res["From"] = boost::any(*from);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (levels) {
      res["Levels"] = boost::any(*levels);
    }
    if (operateErrorCodeList) {
      res["OperateErrorCodeList"] = boost::any(*operateErrorCodeList);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (remark) {
      res["Remark"] = boost::any(*remark);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (tacticId) {
      res["TacticId"] = boost::any(*tacticId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AlarmEventName") != m.end() && !m["AlarmEventName"].empty()) {
      alarmEventName = make_shared<string>(boost::any_cast<string>(m["AlarmEventName"]));
    }
    if (m.find("AlarmEventType") != m.end() && !m["AlarmEventType"].empty()) {
      alarmEventType = make_shared<string>(boost::any_cast<string>(m["AlarmEventType"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Dealed") != m.end() && !m["Dealed"].empty()) {
      dealed = make_shared<string>(boost::any_cast<string>(m["Dealed"]));
    }
    if (m.find("From") != m.end() && !m["From"].empty()) {
      from = make_shared<string>(boost::any_cast<string>(m["From"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<string>(boost::any_cast<string>(m["GroupId"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("Levels") != m.end() && !m["Levels"].empty()) {
      levels = make_shared<string>(boost::any_cast<string>(m["Levels"]));
    }
    if (m.find("OperateErrorCodeList") != m.end() && !m["OperateErrorCodeList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["OperateErrorCodeList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["OperateErrorCodeList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      operateErrorCodeList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<string>(boost::any_cast<string>(m["PageSize"]));
    }
    if (m.find("Remark") != m.end() && !m["Remark"].empty()) {
      remark = make_shared<string>(boost::any_cast<string>(m["Remark"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("TacticId") != m.end() && !m["TacticId"].empty()) {
      tacticId = make_shared<string>(boost::any_cast<string>(m["TacticId"]));
    }
  }


  virtual ~DescribeAlarmEventListRequest() = default;
};
class DescribeAlarmEventListResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeAlarmEventListResponseBodyPageInfo() {}

  explicit DescribeAlarmEventListResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeAlarmEventListResponseBodyPageInfo() = default;
};
class DescribeAlarmEventListResponseBodySuspEventsTacticItems : public Darabonba::Model {
public:
  shared_ptr<string> tacticDisplayName{};
  shared_ptr<string> tacticId{};

  DescribeAlarmEventListResponseBodySuspEventsTacticItems() {}

  explicit DescribeAlarmEventListResponseBodySuspEventsTacticItems(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (tacticDisplayName) {
      res["TacticDisplayName"] = boost::any(*tacticDisplayName);
    }
    if (tacticId) {
      res["TacticId"] = boost::any(*tacticId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("TacticDisplayName") != m.end() && !m["TacticDisplayName"].empty()) {
      tacticDisplayName = make_shared<string>(boost::any_cast<string>(m["TacticDisplayName"]));
    }
    if (m.find("TacticId") != m.end() && !m["TacticId"].empty()) {
      tacticId = make_shared<string>(boost::any_cast<string>(m["TacticId"]));
    }
  }


  virtual ~DescribeAlarmEventListResponseBodySuspEventsTacticItems() = default;
};
class DescribeAlarmEventListResponseBodySuspEvents : public Darabonba::Model {
public:
  shared_ptr<string> alarmEventName{};
  shared_ptr<string> alarmEventNameOriginal{};
  shared_ptr<string> alarmEventType{};
  shared_ptr<string> alarmUniqueInfo{};
  shared_ptr<bool> canBeDealOnLine{};
  shared_ptr<bool> canCancelFault{};
  shared_ptr<string> dataSource{};
  shared_ptr<bool> dealed{};
  shared_ptr<string> description{};
  shared_ptr<long> endTime{};
  shared_ptr<long> gmtModified{};
  shared_ptr<bool> hasTraceInfo{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> level{};
  shared_ptr<string> operateErrorCode{};
  shared_ptr<long> operateTime{};
  shared_ptr<string> saleVersion{};
  shared_ptr<string> securityEventIds{};
  shared_ptr<string> solution{};
  shared_ptr<string> stages{};
  shared_ptr<long> startTime{};
  shared_ptr<long> suspiciousEventCount{};
  shared_ptr<vector<DescribeAlarmEventListResponseBodySuspEventsTacticItems>> tacticItems{};
  shared_ptr<string> uuid{};

  DescribeAlarmEventListResponseBodySuspEvents() {}

  explicit DescribeAlarmEventListResponseBodySuspEvents(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (alarmEventName) {
      res["AlarmEventName"] = boost::any(*alarmEventName);
    }
    if (alarmEventNameOriginal) {
      res["AlarmEventNameOriginal"] = boost::any(*alarmEventNameOriginal);
    }
    if (alarmEventType) {
      res["AlarmEventType"] = boost::any(*alarmEventType);
    }
    if (alarmUniqueInfo) {
      res["AlarmUniqueInfo"] = boost::any(*alarmUniqueInfo);
    }
    if (canBeDealOnLine) {
      res["CanBeDealOnLine"] = boost::any(*canBeDealOnLine);
    }
    if (canCancelFault) {
      res["CanCancelFault"] = boost::any(*canCancelFault);
    }
    if (dataSource) {
      res["DataSource"] = boost::any(*dataSource);
    }
    if (dealed) {
      res["Dealed"] = boost::any(*dealed);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (gmtModified) {
      res["GmtModified"] = boost::any(*gmtModified);
    }
    if (hasTraceInfo) {
      res["HasTraceInfo"] = boost::any(*hasTraceInfo);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (level) {
      res["Level"] = boost::any(*level);
    }
    if (operateErrorCode) {
      res["OperateErrorCode"] = boost::any(*operateErrorCode);
    }
    if (operateTime) {
      res["OperateTime"] = boost::any(*operateTime);
    }
    if (saleVersion) {
      res["SaleVersion"] = boost::any(*saleVersion);
    }
    if (securityEventIds) {
      res["SecurityEventIds"] = boost::any(*securityEventIds);
    }
    if (solution) {
      res["Solution"] = boost::any(*solution);
    }
    if (stages) {
      res["Stages"] = boost::any(*stages);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    if (suspiciousEventCount) {
      res["SuspiciousEventCount"] = boost::any(*suspiciousEventCount);
    }
    if (tacticItems) {
      vector<boost::any> temp1;
      for(auto item1:*tacticItems){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["TacticItems"] = boost::any(temp1);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AlarmEventName") != m.end() && !m["AlarmEventName"].empty()) {
      alarmEventName = make_shared<string>(boost::any_cast<string>(m["AlarmEventName"]));
    }
    if (m.find("AlarmEventNameOriginal") != m.end() && !m["AlarmEventNameOriginal"].empty()) {
      alarmEventNameOriginal = make_shared<string>(boost::any_cast<string>(m["AlarmEventNameOriginal"]));
    }
    if (m.find("AlarmEventType") != m.end() && !m["AlarmEventType"].empty()) {
      alarmEventType = make_shared<string>(boost::any_cast<string>(m["AlarmEventType"]));
    }
    if (m.find("AlarmUniqueInfo") != m.end() && !m["AlarmUniqueInfo"].empty()) {
      alarmUniqueInfo = make_shared<string>(boost::any_cast<string>(m["AlarmUniqueInfo"]));
    }
    if (m.find("CanBeDealOnLine") != m.end() && !m["CanBeDealOnLine"].empty()) {
      canBeDealOnLine = make_shared<bool>(boost::any_cast<bool>(m["CanBeDealOnLine"]));
    }
    if (m.find("CanCancelFault") != m.end() && !m["CanCancelFault"].empty()) {
      canCancelFault = make_shared<bool>(boost::any_cast<bool>(m["CanCancelFault"]));
    }
    if (m.find("DataSource") != m.end() && !m["DataSource"].empty()) {
      dataSource = make_shared<string>(boost::any_cast<string>(m["DataSource"]));
    }
    if (m.find("Dealed") != m.end() && !m["Dealed"].empty()) {
      dealed = make_shared<bool>(boost::any_cast<bool>(m["Dealed"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<long>(boost::any_cast<long>(m["EndTime"]));
    }
    if (m.find("GmtModified") != m.end() && !m["GmtModified"].empty()) {
      gmtModified = make_shared<long>(boost::any_cast<long>(m["GmtModified"]));
    }
    if (m.find("HasTraceInfo") != m.end() && !m["HasTraceInfo"].empty()) {
      hasTraceInfo = make_shared<bool>(boost::any_cast<bool>(m["HasTraceInfo"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("Level") != m.end() && !m["Level"].empty()) {
      level = make_shared<string>(boost::any_cast<string>(m["Level"]));
    }
    if (m.find("OperateErrorCode") != m.end() && !m["OperateErrorCode"].empty()) {
      operateErrorCode = make_shared<string>(boost::any_cast<string>(m["OperateErrorCode"]));
    }
    if (m.find("OperateTime") != m.end() && !m["OperateTime"].empty()) {
      operateTime = make_shared<long>(boost::any_cast<long>(m["OperateTime"]));
    }
    if (m.find("SaleVersion") != m.end() && !m["SaleVersion"].empty()) {
      saleVersion = make_shared<string>(boost::any_cast<string>(m["SaleVersion"]));
    }
    if (m.find("SecurityEventIds") != m.end() && !m["SecurityEventIds"].empty()) {
      securityEventIds = make_shared<string>(boost::any_cast<string>(m["SecurityEventIds"]));
    }
    if (m.find("Solution") != m.end() && !m["Solution"].empty()) {
      solution = make_shared<string>(boost::any_cast<string>(m["Solution"]));
    }
    if (m.find("Stages") != m.end() && !m["Stages"].empty()) {
      stages = make_shared<string>(boost::any_cast<string>(m["Stages"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<long>(boost::any_cast<long>(m["StartTime"]));
    }
    if (m.find("SuspiciousEventCount") != m.end() && !m["SuspiciousEventCount"].empty()) {
      suspiciousEventCount = make_shared<long>(boost::any_cast<long>(m["SuspiciousEventCount"]));
    }
    if (m.find("TacticItems") != m.end() && !m["TacticItems"].empty()) {
      if (typeid(vector<boost::any>) == m["TacticItems"].type()) {
        vector<DescribeAlarmEventListResponseBodySuspEventsTacticItems> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["TacticItems"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeAlarmEventListResponseBodySuspEventsTacticItems model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        tacticItems = make_shared<vector<DescribeAlarmEventListResponseBodySuspEventsTacticItems>>(expect1);
      }
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeAlarmEventListResponseBodySuspEvents() = default;
};
class DescribeAlarmEventListResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeAlarmEventListResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeAlarmEventListResponseBodySuspEvents>> suspEvents{};

  DescribeAlarmEventListResponseBody() {}

  explicit DescribeAlarmEventListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (suspEvents) {
      vector<boost::any> temp1;
      for(auto item1:*suspEvents){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["SuspEvents"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeAlarmEventListResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeAlarmEventListResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("SuspEvents") != m.end() && !m["SuspEvents"].empty()) {
      if (typeid(vector<boost::any>) == m["SuspEvents"].type()) {
        vector<DescribeAlarmEventListResponseBodySuspEvents> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["SuspEvents"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeAlarmEventListResponseBodySuspEvents model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        suspEvents = make_shared<vector<DescribeAlarmEventListResponseBodySuspEvents>>(expect1);
      }
    }
  }


  virtual ~DescribeAlarmEventListResponseBody() = default;
};
class DescribeAlarmEventListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeAlarmEventListResponseBody> body{};

  DescribeAlarmEventListResponse() {}

  explicit DescribeAlarmEventListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeAlarmEventListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeAlarmEventListResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeAlarmEventListResponse() = default;
};
class DescribeAllEntityResponseBodyEntityList : public Darabonba::Model {
public:
  shared_ptr<long> groupId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> ip{};
  shared_ptr<string> os{};
  shared_ptr<string> uuid{};

  DescribeAllEntityResponseBodyEntityList() {}

  explicit DescribeAllEntityResponseBodyEntityList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (ip) {
      res["Ip"] = boost::any(*ip);
    }
    if (os) {
      res["Os"] = boost::any(*os);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("Ip") != m.end() && !m["Ip"].empty()) {
      ip = make_shared<string>(boost::any_cast<string>(m["Ip"]));
    }
    if (m.find("Os") != m.end() && !m["Os"].empty()) {
      os = make_shared<string>(boost::any_cast<string>(m["Os"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeAllEntityResponseBodyEntityList() = default;
};
class DescribeAllEntityResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeAllEntityResponseBodyEntityList>> entityList{};
  shared_ptr<string> requestId{};

  DescribeAllEntityResponseBody() {}

  explicit DescribeAllEntityResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (entityList) {
      vector<boost::any> temp1;
      for(auto item1:*entityList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["EntityList"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("EntityList") != m.end() && !m["EntityList"].empty()) {
      if (typeid(vector<boost::any>) == m["EntityList"].type()) {
        vector<DescribeAllEntityResponseBodyEntityList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["EntityList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeAllEntityResponseBodyEntityList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        entityList = make_shared<vector<DescribeAllEntityResponseBodyEntityList>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeAllEntityResponseBody() = default;
};
class DescribeAllEntityResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeAllEntityResponseBody> body{};

  DescribeAllEntityResponse() {}

  explicit DescribeAllEntityResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeAllEntityResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeAllEntityResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeAllEntityResponse() = default;
};
class DescribeAllGroupsRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};

  DescribeAllGroupsRequest() {}

  explicit DescribeAllGroupsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
  }


  virtual ~DescribeAllGroupsRequest() = default;
};
class DescribeAllGroupsResponseBodyGroups : public Darabonba::Model {
public:
  shared_ptr<long> groupFlag{};
  shared_ptr<long> groupId{};
  shared_ptr<string> groupName{};

  DescribeAllGroupsResponseBodyGroups() {}

  explicit DescribeAllGroupsResponseBodyGroups(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupFlag) {
      res["GroupFlag"] = boost::any(*groupFlag);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (groupName) {
      res["GroupName"] = boost::any(*groupName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupFlag") != m.end() && !m["GroupFlag"].empty()) {
      groupFlag = make_shared<long>(boost::any_cast<long>(m["GroupFlag"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("GroupName") != m.end() && !m["GroupName"].empty()) {
      groupName = make_shared<string>(boost::any_cast<string>(m["GroupName"]));
    }
  }


  virtual ~DescribeAllGroupsResponseBodyGroups() = default;
};
class DescribeAllGroupsResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<vector<DescribeAllGroupsResponseBodyGroups>> groups{};
  shared_ptr<string> requestId{};

  DescribeAllGroupsResponseBody() {}

  explicit DescribeAllGroupsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (groups) {
      vector<boost::any> temp1;
      for(auto item1:*groups){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Groups"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("Groups") != m.end() && !m["Groups"].empty()) {
      if (typeid(vector<boost::any>) == m["Groups"].type()) {
        vector<DescribeAllGroupsResponseBodyGroups> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Groups"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeAllGroupsResponseBodyGroups model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        groups = make_shared<vector<DescribeAllGroupsResponseBodyGroups>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeAllGroupsResponseBody() = default;
};
class DescribeAllGroupsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeAllGroupsResponseBody> body{};

  DescribeAllGroupsResponse() {}

  explicit DescribeAllGroupsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeAllGroupsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeAllGroupsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeAllGroupsResponse() = default;
};
class DescribeAntiBruteForceRulesRequest : public Darabonba::Model {
public:
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};

  DescribeAntiBruteForceRulesRequest() {}

  explicit DescribeAntiBruteForceRulesRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeAntiBruteForceRulesRequest() = default;
};
class DescribeAntiBruteForceRulesResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeAntiBruteForceRulesResponseBodyPageInfo() {}

  explicit DescribeAntiBruteForceRulesResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeAntiBruteForceRulesResponseBodyPageInfo() = default;
};
class DescribeAntiBruteForceRulesResponseBodyRules : public Darabonba::Model {
public:
  shared_ptr<bool> defaultRule{};
  shared_ptr<bool> enableSmartRule{};
  shared_ptr<long> failCount{};
  shared_ptr<long> forbiddenTime{};
  shared_ptr<long> id{};
  shared_ptr<long> machineCount{};
  shared_ptr<string> name{};
  shared_ptr<long> span{};
  shared_ptr<vector<string>> uuidList{};

  DescribeAntiBruteForceRulesResponseBodyRules() {}

  explicit DescribeAntiBruteForceRulesResponseBodyRules(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (defaultRule) {
      res["DefaultRule"] = boost::any(*defaultRule);
    }
    if (enableSmartRule) {
      res["EnableSmartRule"] = boost::any(*enableSmartRule);
    }
    if (failCount) {
      res["FailCount"] = boost::any(*failCount);
    }
    if (forbiddenTime) {
      res["ForbiddenTime"] = boost::any(*forbiddenTime);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (machineCount) {
      res["MachineCount"] = boost::any(*machineCount);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (span) {
      res["Span"] = boost::any(*span);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DefaultRule") != m.end() && !m["DefaultRule"].empty()) {
      defaultRule = make_shared<bool>(boost::any_cast<bool>(m["DefaultRule"]));
    }
    if (m.find("EnableSmartRule") != m.end() && !m["EnableSmartRule"].empty()) {
      enableSmartRule = make_shared<bool>(boost::any_cast<bool>(m["EnableSmartRule"]));
    }
    if (m.find("FailCount") != m.end() && !m["FailCount"].empty()) {
      failCount = make_shared<long>(boost::any_cast<long>(m["FailCount"]));
    }
    if (m.find("ForbiddenTime") != m.end() && !m["ForbiddenTime"].empty()) {
      forbiddenTime = make_shared<long>(boost::any_cast<long>(m["ForbiddenTime"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("MachineCount") != m.end() && !m["MachineCount"].empty()) {
      machineCount = make_shared<long>(boost::any_cast<long>(m["MachineCount"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Span") != m.end() && !m["Span"].empty()) {
      span = make_shared<long>(boost::any_cast<long>(m["Span"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["UuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["UuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      uuidList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~DescribeAntiBruteForceRulesResponseBodyRules() = default;
};
class DescribeAntiBruteForceRulesResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeAntiBruteForceRulesResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeAntiBruteForceRulesResponseBodyRules>> rules{};

  DescribeAntiBruteForceRulesResponseBody() {}

  explicit DescribeAntiBruteForceRulesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (rules) {
      vector<boost::any> temp1;
      for(auto item1:*rules){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Rules"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeAntiBruteForceRulesResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeAntiBruteForceRulesResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Rules") != m.end() && !m["Rules"].empty()) {
      if (typeid(vector<boost::any>) == m["Rules"].type()) {
        vector<DescribeAntiBruteForceRulesResponseBodyRules> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Rules"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeAntiBruteForceRulesResponseBodyRules model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        rules = make_shared<vector<DescribeAntiBruteForceRulesResponseBodyRules>>(expect1);
      }
    }
  }


  virtual ~DescribeAntiBruteForceRulesResponseBody() = default;
};
class DescribeAntiBruteForceRulesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeAntiBruteForceRulesResponseBody> body{};

  DescribeAntiBruteForceRulesResponse() {}

  explicit DescribeAntiBruteForceRulesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeAntiBruteForceRulesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeAntiBruteForceRulesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeAntiBruteForceRulesResponse() = default;
};
class DescribeAssetDetailByUuidRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> uuid{};

  DescribeAssetDetailByUuidRequest() {}

  explicit DescribeAssetDetailByUuidRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeAssetDetailByUuidRequest() = default;
};
class DescribeAssetDetailByUuidResponseBodyAssetDetail : public Darabonba::Model {
public:
  shared_ptr<string> assetType{};
  shared_ptr<long> authModifyTime{};
  shared_ptr<long> authVersion{};
  shared_ptr<bool> bind{};
  shared_ptr<string> clientStatus{};
  shared_ptr<string> clientVersion{};
  shared_ptr<long> cpu{};
  shared_ptr<string> cpuInfo{};
  shared_ptr<long> createTime{};
  shared_ptr<vector<string>> diskInfoList{};
  shared_ptr<long> flag{};
  shared_ptr<string> groupTrace{};
  shared_ptr<string> hostName{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> ip{};
  shared_ptr<vector<string>> ipList{};
  shared_ptr<string> kernel{};
  shared_ptr<vector<string>> macList{};
  shared_ptr<long> mem{};
  shared_ptr<long> memory{};
  shared_ptr<string> os{};
  shared_ptr<string> osDetail{};
  shared_ptr<string> osName{};
  shared_ptr<string> region{};
  shared_ptr<string> regionId{};
  shared_ptr<string> regionName{};
  shared_ptr<string> sysInfo{};
  shared_ptr<string> tag{};
  shared_ptr<string> uuid{};
  shared_ptr<string> vpcInstanceId{};

  DescribeAssetDetailByUuidResponseBodyAssetDetail() {}

  explicit DescribeAssetDetailByUuidResponseBodyAssetDetail(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (assetType) {
      res["AssetType"] = boost::any(*assetType);
    }
    if (authModifyTime) {
      res["AuthModifyTime"] = boost::any(*authModifyTime);
    }
    if (authVersion) {
      res["AuthVersion"] = boost::any(*authVersion);
    }
    if (bind) {
      res["Bind"] = boost::any(*bind);
    }
    if (clientStatus) {
      res["ClientStatus"] = boost::any(*clientStatus);
    }
    if (clientVersion) {
      res["ClientVersion"] = boost::any(*clientVersion);
    }
    if (cpu) {
      res["Cpu"] = boost::any(*cpu);
    }
    if (cpuInfo) {
      res["CpuInfo"] = boost::any(*cpuInfo);
    }
    if (createTime) {
      res["CreateTime"] = boost::any(*createTime);
    }
    if (diskInfoList) {
      res["DiskInfoList"] = boost::any(*diskInfoList);
    }
    if (flag) {
      res["Flag"] = boost::any(*flag);
    }
    if (groupTrace) {
      res["GroupTrace"] = boost::any(*groupTrace);
    }
    if (hostName) {
      res["HostName"] = boost::any(*hostName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (ip) {
      res["Ip"] = boost::any(*ip);
    }
    if (ipList) {
      res["IpList"] = boost::any(*ipList);
    }
    if (kernel) {
      res["Kernel"] = boost::any(*kernel);
    }
    if (macList) {
      res["MacList"] = boost::any(*macList);
    }
    if (mem) {
      res["Mem"] = boost::any(*mem);
    }
    if (memory) {
      res["Memory"] = boost::any(*memory);
    }
    if (os) {
      res["Os"] = boost::any(*os);
    }
    if (osDetail) {
      res["OsDetail"] = boost::any(*osDetail);
    }
    if (osName) {
      res["OsName"] = boost::any(*osName);
    }
    if (region) {
      res["Region"] = boost::any(*region);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    if (regionName) {
      res["RegionName"] = boost::any(*regionName);
    }
    if (sysInfo) {
      res["SysInfo"] = boost::any(*sysInfo);
    }
    if (tag) {
      res["Tag"] = boost::any(*tag);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    if (vpcInstanceId) {
      res["VpcInstanceId"] = boost::any(*vpcInstanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AssetType") != m.end() && !m["AssetType"].empty()) {
      assetType = make_shared<string>(boost::any_cast<string>(m["AssetType"]));
    }
    if (m.find("AuthModifyTime") != m.end() && !m["AuthModifyTime"].empty()) {
      authModifyTime = make_shared<long>(boost::any_cast<long>(m["AuthModifyTime"]));
    }
    if (m.find("AuthVersion") != m.end() && !m["AuthVersion"].empty()) {
      authVersion = make_shared<long>(boost::any_cast<long>(m["AuthVersion"]));
    }
    if (m.find("Bind") != m.end() && !m["Bind"].empty()) {
      bind = make_shared<bool>(boost::any_cast<bool>(m["Bind"]));
    }
    if (m.find("ClientStatus") != m.end() && !m["ClientStatus"].empty()) {
      clientStatus = make_shared<string>(boost::any_cast<string>(m["ClientStatus"]));
    }
    if (m.find("ClientVersion") != m.end() && !m["ClientVersion"].empty()) {
      clientVersion = make_shared<string>(boost::any_cast<string>(m["ClientVersion"]));
    }
    if (m.find("Cpu") != m.end() && !m["Cpu"].empty()) {
      cpu = make_shared<long>(boost::any_cast<long>(m["Cpu"]));
    }
    if (m.find("CpuInfo") != m.end() && !m["CpuInfo"].empty()) {
      cpuInfo = make_shared<string>(boost::any_cast<string>(m["CpuInfo"]));
    }
    if (m.find("CreateTime") != m.end() && !m["CreateTime"].empty()) {
      createTime = make_shared<long>(boost::any_cast<long>(m["CreateTime"]));
    }
    if (m.find("DiskInfoList") != m.end() && !m["DiskInfoList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["DiskInfoList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DiskInfoList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      diskInfoList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("Flag") != m.end() && !m["Flag"].empty()) {
      flag = make_shared<long>(boost::any_cast<long>(m["Flag"]));
    }
    if (m.find("GroupTrace") != m.end() && !m["GroupTrace"].empty()) {
      groupTrace = make_shared<string>(boost::any_cast<string>(m["GroupTrace"]));
    }
    if (m.find("HostName") != m.end() && !m["HostName"].empty()) {
      hostName = make_shared<string>(boost::any_cast<string>(m["HostName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("Ip") != m.end() && !m["Ip"].empty()) {
      ip = make_shared<string>(boost::any_cast<string>(m["Ip"]));
    }
    if (m.find("IpList") != m.end() && !m["IpList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["IpList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["IpList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      ipList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("Kernel") != m.end() && !m["Kernel"].empty()) {
      kernel = make_shared<string>(boost::any_cast<string>(m["Kernel"]));
    }
    if (m.find("MacList") != m.end() && !m["MacList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["MacList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["MacList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      macList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("Mem") != m.end() && !m["Mem"].empty()) {
      mem = make_shared<long>(boost::any_cast<long>(m["Mem"]));
    }
    if (m.find("Memory") != m.end() && !m["Memory"].empty()) {
      memory = make_shared<long>(boost::any_cast<long>(m["Memory"]));
    }
    if (m.find("Os") != m.end() && !m["Os"].empty()) {
      os = make_shared<string>(boost::any_cast<string>(m["Os"]));
    }
    if (m.find("OsDetail") != m.end() && !m["OsDetail"].empty()) {
      osDetail = make_shared<string>(boost::any_cast<string>(m["OsDetail"]));
    }
    if (m.find("OsName") != m.end() && !m["OsName"].empty()) {
      osName = make_shared<string>(boost::any_cast<string>(m["OsName"]));
    }
    if (m.find("Region") != m.end() && !m["Region"].empty()) {
      region = make_shared<string>(boost::any_cast<string>(m["Region"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
    if (m.find("RegionName") != m.end() && !m["RegionName"].empty()) {
      regionName = make_shared<string>(boost::any_cast<string>(m["RegionName"]));
    }
    if (m.find("SysInfo") != m.end() && !m["SysInfo"].empty()) {
      sysInfo = make_shared<string>(boost::any_cast<string>(m["SysInfo"]));
    }
    if (m.find("Tag") != m.end() && !m["Tag"].empty()) {
      tag = make_shared<string>(boost::any_cast<string>(m["Tag"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
    if (m.find("VpcInstanceId") != m.end() && !m["VpcInstanceId"].empty()) {
      vpcInstanceId = make_shared<string>(boost::any_cast<string>(m["VpcInstanceId"]));
    }
  }


  virtual ~DescribeAssetDetailByUuidResponseBodyAssetDetail() = default;
};
class DescribeAssetDetailByUuidResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeAssetDetailByUuidResponseBodyAssetDetail> assetDetail{};
  shared_ptr<string> requestId{};

  DescribeAssetDetailByUuidResponseBody() {}

  explicit DescribeAssetDetailByUuidResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (assetDetail) {
      res["AssetDetail"] = assetDetail ? boost::any(assetDetail->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AssetDetail") != m.end() && !m["AssetDetail"].empty()) {
      if (typeid(map<string, boost::any>) == m["AssetDetail"].type()) {
        DescribeAssetDetailByUuidResponseBodyAssetDetail model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["AssetDetail"]));
        assetDetail = make_shared<DescribeAssetDetailByUuidResponseBodyAssetDetail>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeAssetDetailByUuidResponseBody() = default;
};
class DescribeAssetDetailByUuidResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeAssetDetailByUuidResponseBody> body{};

  DescribeAssetDetailByUuidResponse() {}

  explicit DescribeAssetDetailByUuidResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeAssetDetailByUuidResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeAssetDetailByUuidResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeAssetDetailByUuidResponse() = default;
};
class DescribeAssetDetailByUuidsRequest : public Darabonba::Model {
public:
  shared_ptr<string> uuids{};

  DescribeAssetDetailByUuidsRequest() {}

  explicit DescribeAssetDetailByUuidsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~DescribeAssetDetailByUuidsRequest() = default;
};
class DescribeAssetDetailByUuidsResponseBodyAssetList : public Darabonba::Model {
public:
  shared_ptr<string> assetType{};
  shared_ptr<string> clientStatus{};
  shared_ptr<long> flag{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> ip{};
  shared_ptr<string> os{};
  shared_ptr<string> osName{};
  shared_ptr<string> region{};
  shared_ptr<string> regionId{};
  shared_ptr<string> regionName{};
  shared_ptr<string> uuid{};
  shared_ptr<string> vpcInstanceId{};

  DescribeAssetDetailByUuidsResponseBodyAssetList() {}

  explicit DescribeAssetDetailByUuidsResponseBodyAssetList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (assetType) {
      res["AssetType"] = boost::any(*assetType);
    }
    if (clientStatus) {
      res["ClientStatus"] = boost::any(*clientStatus);
    }
    if (flag) {
      res["Flag"] = boost::any(*flag);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (ip) {
      res["Ip"] = boost::any(*ip);
    }
    if (os) {
      res["Os"] = boost::any(*os);
    }
    if (osName) {
      res["OsName"] = boost::any(*osName);
    }
    if (region) {
      res["Region"] = boost::any(*region);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    if (regionName) {
      res["RegionName"] = boost::any(*regionName);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    if (vpcInstanceId) {
      res["VpcInstanceId"] = boost::any(*vpcInstanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AssetType") != m.end() && !m["AssetType"].empty()) {
      assetType = make_shared<string>(boost::any_cast<string>(m["AssetType"]));
    }
    if (m.find("ClientStatus") != m.end() && !m["ClientStatus"].empty()) {
      clientStatus = make_shared<string>(boost::any_cast<string>(m["ClientStatus"]));
    }
    if (m.find("Flag") != m.end() && !m["Flag"].empty()) {
      flag = make_shared<long>(boost::any_cast<long>(m["Flag"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("Ip") != m.end() && !m["Ip"].empty()) {
      ip = make_shared<string>(boost::any_cast<string>(m["Ip"]));
    }
    if (m.find("Os") != m.end() && !m["Os"].empty()) {
      os = make_shared<string>(boost::any_cast<string>(m["Os"]));
    }
    if (m.find("OsName") != m.end() && !m["OsName"].empty()) {
      osName = make_shared<string>(boost::any_cast<string>(m["OsName"]));
    }
    if (m.find("Region") != m.end() && !m["Region"].empty()) {
      region = make_shared<string>(boost::any_cast<string>(m["Region"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
    if (m.find("RegionName") != m.end() && !m["RegionName"].empty()) {
      regionName = make_shared<string>(boost::any_cast<string>(m["RegionName"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
    if (m.find("VpcInstanceId") != m.end() && !m["VpcInstanceId"].empty()) {
      vpcInstanceId = make_shared<string>(boost::any_cast<string>(m["VpcInstanceId"]));
    }
  }


  virtual ~DescribeAssetDetailByUuidsResponseBodyAssetList() = default;
};
class DescribeAssetDetailByUuidsResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeAssetDetailByUuidsResponseBodyAssetList>> assetList{};
  shared_ptr<string> requestId{};

  DescribeAssetDetailByUuidsResponseBody() {}

  explicit DescribeAssetDetailByUuidsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (assetList) {
      vector<boost::any> temp1;
      for(auto item1:*assetList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["AssetList"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AssetList") != m.end() && !m["AssetList"].empty()) {
      if (typeid(vector<boost::any>) == m["AssetList"].type()) {
        vector<DescribeAssetDetailByUuidsResponseBodyAssetList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["AssetList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeAssetDetailByUuidsResponseBodyAssetList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        assetList = make_shared<vector<DescribeAssetDetailByUuidsResponseBodyAssetList>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeAssetDetailByUuidsResponseBody() = default;
};
class DescribeAssetDetailByUuidsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeAssetDetailByUuidsResponseBody> body{};

  DescribeAssetDetailByUuidsResponse() {}

  explicit DescribeAssetDetailByUuidsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeAssetDetailByUuidsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeAssetDetailByUuidsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeAssetDetailByUuidsResponse() = default;
};
class DescribeAssetSummaryResponseBodyAssetsSummary : public Darabonba::Model {
public:
  shared_ptr<long> totalCoreNum{};

  DescribeAssetSummaryResponseBodyAssetsSummary() {}

  explicit DescribeAssetSummaryResponseBodyAssetsSummary(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (totalCoreNum) {
      res["TotalCoreNum"] = boost::any(*totalCoreNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("TotalCoreNum") != m.end() && !m["TotalCoreNum"].empty()) {
      totalCoreNum = make_shared<long>(boost::any_cast<long>(m["TotalCoreNum"]));
    }
  }


  virtual ~DescribeAssetSummaryResponseBodyAssetsSummary() = default;
};
class DescribeAssetSummaryResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeAssetSummaryResponseBodyAssetsSummary> assetsSummary{};
  shared_ptr<string> requestId{};

  DescribeAssetSummaryResponseBody() {}

  explicit DescribeAssetSummaryResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (assetsSummary) {
      res["AssetsSummary"] = assetsSummary ? boost::any(assetsSummary->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AssetsSummary") != m.end() && !m["AssetsSummary"].empty()) {
      if (typeid(map<string, boost::any>) == m["AssetsSummary"].type()) {
        DescribeAssetSummaryResponseBodyAssetsSummary model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["AssetsSummary"]));
        assetsSummary = make_shared<DescribeAssetSummaryResponseBodyAssetsSummary>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeAssetSummaryResponseBody() = default;
};
class DescribeAssetSummaryResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeAssetSummaryResponseBody> body{};

  DescribeAssetSummaryResponse() {}

  explicit DescribeAssetSummaryResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeAssetSummaryResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeAssetSummaryResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeAssetSummaryResponse() = default;
};
class DescribeAttackAnalysisDataRequest : public Darabonba::Model {
public:
  shared_ptr<string> base64{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> data{};
  shared_ptr<long> endTime{};
  shared_ptr<string> lang{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startTime{};
  shared_ptr<string> type{};

  DescribeAttackAnalysisDataRequest() {}

  explicit DescribeAttackAnalysisDataRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (base64) {
      res["Base64"] = boost::any(*base64);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Base64") != m.end() && !m["Base64"].empty()) {
      base64 = make_shared<string>(boost::any_cast<string>(m["Base64"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<long>(boost::any_cast<long>(m["EndTime"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<long>(boost::any_cast<long>(m["StartTime"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribeAttackAnalysisDataRequest() = default;
};
class DescribeAttackAnalysisDataResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> data{};
  shared_ptr<long> page{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> total{};

  DescribeAttackAnalysisDataResponseBody() {}

  explicit DescribeAttackAnalysisDataResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (page) {
      res["Page"] = boost::any(*page);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (total) {
      res["Total"] = boost::any(*total);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Page") != m.end() && !m["Page"].empty()) {
      page = make_shared<long>(boost::any_cast<long>(m["Page"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Total") != m.end() && !m["Total"].empty()) {
      total = make_shared<long>(boost::any_cast<long>(m["Total"]));
    }
  }


  virtual ~DescribeAttackAnalysisDataResponseBody() = default;
};
class DescribeAttackAnalysisDataResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeAttackAnalysisDataResponseBody> body{};

  DescribeAttackAnalysisDataResponse() {}

  explicit DescribeAttackAnalysisDataResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeAttackAnalysisDataResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeAttackAnalysisDataResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeAttackAnalysisDataResponse() = default;
};
class DescribeAutoDelConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> days{};
  shared_ptr<string> requestId{};

  DescribeAutoDelConfigResponseBody() {}

  explicit DescribeAutoDelConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (days) {
      res["Days"] = boost::any(*days);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Days") != m.end() && !m["Days"].empty()) {
      days = make_shared<long>(boost::any_cast<long>(m["Days"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeAutoDelConfigResponseBody() = default;
};
class DescribeAutoDelConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeAutoDelConfigResponseBody> body{};

  DescribeAutoDelConfigResponse() {}

  explicit DescribeAutoDelConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeAutoDelConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeAutoDelConfigResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeAutoDelConfigResponse() = default;
};
class DescribeBackupClientsRequest : public Darabonba::Model {
public:
  shared_ptr<string> supportRegionId{};

  DescribeBackupClientsRequest() {}

  explicit DescribeBackupClientsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (supportRegionId) {
      res["SupportRegionId"] = boost::any(*supportRegionId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("SupportRegionId") != m.end() && !m["SupportRegionId"].empty()) {
      supportRegionId = make_shared<string>(boost::any_cast<string>(m["SupportRegionId"]));
    }
  }


  virtual ~DescribeBackupClientsRequest() = default;
};
class DescribeBackupClientsResponseBodyClients : public Darabonba::Model {
public:
  shared_ptr<string> clientId{};
  shared_ptr<string> clientStatus{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> uuid{};

  DescribeBackupClientsResponseBodyClients() {}

  explicit DescribeBackupClientsResponseBodyClients(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (clientId) {
      res["ClientId"] = boost::any(*clientId);
    }
    if (clientStatus) {
      res["ClientStatus"] = boost::any(*clientStatus);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ClientId") != m.end() && !m["ClientId"].empty()) {
      clientId = make_shared<string>(boost::any_cast<string>(m["ClientId"]));
    }
    if (m.find("ClientStatus") != m.end() && !m["ClientStatus"].empty()) {
      clientStatus = make_shared<string>(boost::any_cast<string>(m["ClientStatus"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeBackupClientsResponseBodyClients() = default;
};
class DescribeBackupClientsResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeBackupClientsResponseBodyClients>> clients{};
  shared_ptr<string> requestId{};

  DescribeBackupClientsResponseBody() {}

  explicit DescribeBackupClientsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (clients) {
      vector<boost::any> temp1;
      for(auto item1:*clients){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Clients"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Clients") != m.end() && !m["Clients"].empty()) {
      if (typeid(vector<boost::any>) == m["Clients"].type()) {
        vector<DescribeBackupClientsResponseBodyClients> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Clients"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeBackupClientsResponseBodyClients model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        clients = make_shared<vector<DescribeBackupClientsResponseBodyClients>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeBackupClientsResponseBody() = default;
};
class DescribeBackupClientsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeBackupClientsResponseBody> body{};

  DescribeBackupClientsResponse() {}

  explicit DescribeBackupClientsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeBackupClientsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeBackupClientsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeBackupClientsResponse() = default;
};
class DescribeBackupFilesRequest : public Darabonba::Model {
public:
  shared_ptr<string> currentPage{};
  shared_ptr<string> pageSize{};
  shared_ptr<string> path{};
  shared_ptr<string> snapshotHash{};
  shared_ptr<string> uuid{};

  DescribeBackupFilesRequest() {}

  explicit DescribeBackupFilesRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (path) {
      res["Path"] = boost::any(*path);
    }
    if (snapshotHash) {
      res["SnapshotHash"] = boost::any(*snapshotHash);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<string>(boost::any_cast<string>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<string>(boost::any_cast<string>(m["PageSize"]));
    }
    if (m.find("Path") != m.end() && !m["Path"].empty()) {
      path = make_shared<string>(boost::any_cast<string>(m["Path"]));
    }
    if (m.find("SnapshotHash") != m.end() && !m["SnapshotHash"].empty()) {
      snapshotHash = make_shared<string>(boost::any_cast<string>(m["SnapshotHash"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeBackupFilesRequest() = default;
};
class DescribeBackupFilesResponseBodyBackupFiles : public Darabonba::Model {
public:
  shared_ptr<string> name{};
  shared_ptr<long> size{};
  shared_ptr<string> subtree{};
  shared_ptr<string> type{};

  DescribeBackupFilesResponseBodyBackupFiles() {}

  explicit DescribeBackupFilesResponseBodyBackupFiles(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (size) {
      res["Size"] = boost::any(*size);
    }
    if (subtree) {
      res["Subtree"] = boost::any(*subtree);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Size") != m.end() && !m["Size"].empty()) {
      size = make_shared<long>(boost::any_cast<long>(m["Size"]));
    }
    if (m.find("Subtree") != m.end() && !m["Subtree"].empty()) {
      subtree = make_shared<string>(boost::any_cast<string>(m["Subtree"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribeBackupFilesResponseBodyBackupFiles() = default;
};
class DescribeBackupFilesResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeBackupFilesResponseBodyPageInfo() {}

  explicit DescribeBackupFilesResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeBackupFilesResponseBodyPageInfo() = default;
};
class DescribeBackupFilesResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeBackupFilesResponseBodyBackupFiles>> backupFiles{};
  shared_ptr<DescribeBackupFilesResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};

  DescribeBackupFilesResponseBody() {}

  explicit DescribeBackupFilesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (backupFiles) {
      vector<boost::any> temp1;
      for(auto item1:*backupFiles){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["BackupFiles"] = boost::any(temp1);
    }
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BackupFiles") != m.end() && !m["BackupFiles"].empty()) {
      if (typeid(vector<boost::any>) == m["BackupFiles"].type()) {
        vector<DescribeBackupFilesResponseBodyBackupFiles> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["BackupFiles"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeBackupFilesResponseBodyBackupFiles model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        backupFiles = make_shared<vector<DescribeBackupFilesResponseBodyBackupFiles>>(expect1);
      }
    }
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeBackupFilesResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeBackupFilesResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeBackupFilesResponseBody() = default;
};
class DescribeBackupFilesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeBackupFilesResponseBody> body{};

  DescribeBackupFilesResponse() {}

  explicit DescribeBackupFilesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeBackupFilesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeBackupFilesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeBackupFilesResponse() = default;
};
class DescribeBackupPoliciesRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> machineRemark{};
  shared_ptr<string> name{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> status{};

  DescribeBackupPoliciesRequest() {}

  explicit DescribeBackupPoliciesRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (machineRemark) {
      res["MachineRemark"] = boost::any(*machineRemark);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("MachineRemark") != m.end() && !m["MachineRemark"].empty()) {
      machineRemark = make_shared<string>(boost::any_cast<string>(m["MachineRemark"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
  }


  virtual ~DescribeBackupPoliciesRequest() = default;
};
class DescribeBackupPoliciesResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeBackupPoliciesResponseBodyPageInfo() {}

  explicit DescribeBackupPoliciesResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeBackupPoliciesResponseBodyPageInfo() = default;
};
class DescribeBackupPoliciesResponseBodyPolicies : public Darabonba::Model {
public:
  shared_ptr<long> clientErrorCount{};
  shared_ptr<vector<string>> clientErrorUuidList{};
  shared_ptr<string> clientStatus{};
  shared_ptr<long> healthClientCount{};
  shared_ptr<vector<string>> healthClientUuidList{};
  shared_ptr<long> id{};
  shared_ptr<string> name{};
  shared_ptr<string> policy{};
  shared_ptr<string> policyRegionId{};
  shared_ptr<string> policyVersion{};
  shared_ptr<vector<string>> remarkedUuidList{};
  shared_ptr<long> serviceErrorCount{};
  shared_ptr<vector<string>> serviceErrorUuidList{};
  shared_ptr<string> status{};
  shared_ptr<string> upgradeStatus{};
  shared_ptr<vector<string>> uuidList{};

  DescribeBackupPoliciesResponseBodyPolicies() {}

  explicit DescribeBackupPoliciesResponseBodyPolicies(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (clientErrorCount) {
      res["ClientErrorCount"] = boost::any(*clientErrorCount);
    }
    if (clientErrorUuidList) {
      res["ClientErrorUuidList"] = boost::any(*clientErrorUuidList);
    }
    if (clientStatus) {
      res["ClientStatus"] = boost::any(*clientStatus);
    }
    if (healthClientCount) {
      res["HealthClientCount"] = boost::any(*healthClientCount);
    }
    if (healthClientUuidList) {
      res["HealthClientUuidList"] = boost::any(*healthClientUuidList);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (policy) {
      res["Policy"] = boost::any(*policy);
    }
    if (policyRegionId) {
      res["PolicyRegionId"] = boost::any(*policyRegionId);
    }
    if (policyVersion) {
      res["PolicyVersion"] = boost::any(*policyVersion);
    }
    if (remarkedUuidList) {
      res["RemarkedUuidList"] = boost::any(*remarkedUuidList);
    }
    if (serviceErrorCount) {
      res["ServiceErrorCount"] = boost::any(*serviceErrorCount);
    }
    if (serviceErrorUuidList) {
      res["ServiceErrorUuidList"] = boost::any(*serviceErrorUuidList);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (upgradeStatus) {
      res["UpgradeStatus"] = boost::any(*upgradeStatus);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ClientErrorCount") != m.end() && !m["ClientErrorCount"].empty()) {
      clientErrorCount = make_shared<long>(boost::any_cast<long>(m["ClientErrorCount"]));
    }
    if (m.find("ClientErrorUuidList") != m.end() && !m["ClientErrorUuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["ClientErrorUuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ClientErrorUuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      clientErrorUuidList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("ClientStatus") != m.end() && !m["ClientStatus"].empty()) {
      clientStatus = make_shared<string>(boost::any_cast<string>(m["ClientStatus"]));
    }
    if (m.find("HealthClientCount") != m.end() && !m["HealthClientCount"].empty()) {
      healthClientCount = make_shared<long>(boost::any_cast<long>(m["HealthClientCount"]));
    }
    if (m.find("HealthClientUuidList") != m.end() && !m["HealthClientUuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["HealthClientUuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["HealthClientUuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      healthClientUuidList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Policy") != m.end() && !m["Policy"].empty()) {
      policy = make_shared<string>(boost::any_cast<string>(m["Policy"]));
    }
    if (m.find("PolicyRegionId") != m.end() && !m["PolicyRegionId"].empty()) {
      policyRegionId = make_shared<string>(boost::any_cast<string>(m["PolicyRegionId"]));
    }
    if (m.find("PolicyVersion") != m.end() && !m["PolicyVersion"].empty()) {
      policyVersion = make_shared<string>(boost::any_cast<string>(m["PolicyVersion"]));
    }
    if (m.find("RemarkedUuidList") != m.end() && !m["RemarkedUuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["RemarkedUuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["RemarkedUuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      remarkedUuidList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("ServiceErrorCount") != m.end() && !m["ServiceErrorCount"].empty()) {
      serviceErrorCount = make_shared<long>(boost::any_cast<long>(m["ServiceErrorCount"]));
    }
    if (m.find("ServiceErrorUuidList") != m.end() && !m["ServiceErrorUuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["ServiceErrorUuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ServiceErrorUuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      serviceErrorUuidList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("UpgradeStatus") != m.end() && !m["UpgradeStatus"].empty()) {
      upgradeStatus = make_shared<string>(boost::any_cast<string>(m["UpgradeStatus"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["UuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["UuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      uuidList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~DescribeBackupPoliciesResponseBodyPolicies() = default;
};
class DescribeBackupPoliciesResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeBackupPoliciesResponseBodyPageInfo> pageInfo{};
  shared_ptr<vector<DescribeBackupPoliciesResponseBodyPolicies>> policies{};
  shared_ptr<string> requestId{};

  DescribeBackupPoliciesResponseBody() {}

  explicit DescribeBackupPoliciesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (policies) {
      vector<boost::any> temp1;
      for(auto item1:*policies){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Policies"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeBackupPoliciesResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeBackupPoliciesResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("Policies") != m.end() && !m["Policies"].empty()) {
      if (typeid(vector<boost::any>) == m["Policies"].type()) {
        vector<DescribeBackupPoliciesResponseBodyPolicies> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Policies"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeBackupPoliciesResponseBodyPolicies model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        policies = make_shared<vector<DescribeBackupPoliciesResponseBodyPolicies>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeBackupPoliciesResponseBody() = default;
};
class DescribeBackupPoliciesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeBackupPoliciesResponseBody> body{};

  DescribeBackupPoliciesResponse() {}

  explicit DescribeBackupPoliciesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeBackupPoliciesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeBackupPoliciesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeBackupPoliciesResponse() = default;
};
class DescribeBackupRestoreCountResponseBodyBackupRestoreCount : public Darabonba::Model {
public:
  shared_ptr<long> recovering{};
  shared_ptr<long> total{};

  DescribeBackupRestoreCountResponseBodyBackupRestoreCount() {}

  explicit DescribeBackupRestoreCountResponseBodyBackupRestoreCount(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (recovering) {
      res["Recovering"] = boost::any(*recovering);
    }
    if (total) {
      res["Total"] = boost::any(*total);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Recovering") != m.end() && !m["Recovering"].empty()) {
      recovering = make_shared<long>(boost::any_cast<long>(m["Recovering"]));
    }
    if (m.find("Total") != m.end() && !m["Total"].empty()) {
      total = make_shared<long>(boost::any_cast<long>(m["Total"]));
    }
  }


  virtual ~DescribeBackupRestoreCountResponseBodyBackupRestoreCount() = default;
};
class DescribeBackupRestoreCountResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeBackupRestoreCountResponseBodyBackupRestoreCount> backupRestoreCount{};
  shared_ptr<string> requestId{};

  DescribeBackupRestoreCountResponseBody() {}

  explicit DescribeBackupRestoreCountResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (backupRestoreCount) {
      res["BackupRestoreCount"] = backupRestoreCount ? boost::any(backupRestoreCount->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BackupRestoreCount") != m.end() && !m["BackupRestoreCount"].empty()) {
      if (typeid(map<string, boost::any>) == m["BackupRestoreCount"].type()) {
        DescribeBackupRestoreCountResponseBodyBackupRestoreCount model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["BackupRestoreCount"]));
        backupRestoreCount = make_shared<DescribeBackupRestoreCountResponseBodyBackupRestoreCount>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeBackupRestoreCountResponseBody() = default;
};
class DescribeBackupRestoreCountResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeBackupRestoreCountResponseBody> body{};

  DescribeBackupRestoreCountResponse() {}

  explicit DescribeBackupRestoreCountResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeBackupRestoreCountResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeBackupRestoreCountResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeBackupRestoreCountResponse() = default;
};
class DescribeBruteForceSummaryRequest : public Darabonba::Model {
public:
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};

  DescribeBruteForceSummaryRequest() {}

  explicit DescribeBruteForceSummaryRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeBruteForceSummaryRequest() = default;
};
class DescribeBruteForceSummaryResponseBodyBruteForceSummary : public Darabonba::Model {
public:
  shared_ptr<long> allStrategyCount{};
  shared_ptr<long> effectiveCount{};

  DescribeBruteForceSummaryResponseBodyBruteForceSummary() {}

  explicit DescribeBruteForceSummaryResponseBodyBruteForceSummary(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (allStrategyCount) {
      res["AllStrategyCount"] = boost::any(*allStrategyCount);
    }
    if (effectiveCount) {
      res["EffectiveCount"] = boost::any(*effectiveCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AllStrategyCount") != m.end() && !m["AllStrategyCount"].empty()) {
      allStrategyCount = make_shared<long>(boost::any_cast<long>(m["AllStrategyCount"]));
    }
    if (m.find("EffectiveCount") != m.end() && !m["EffectiveCount"].empty()) {
      effectiveCount = make_shared<long>(boost::any_cast<long>(m["EffectiveCount"]));
    }
  }


  virtual ~DescribeBruteForceSummaryResponseBodyBruteForceSummary() = default;
};
class DescribeBruteForceSummaryResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeBruteForceSummaryResponseBodyBruteForceSummary> bruteForceSummary{};
  shared_ptr<string> requestId{};

  DescribeBruteForceSummaryResponseBody() {}

  explicit DescribeBruteForceSummaryResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (bruteForceSummary) {
      res["BruteForceSummary"] = bruteForceSummary ? boost::any(bruteForceSummary->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BruteForceSummary") != m.end() && !m["BruteForceSummary"].empty()) {
      if (typeid(map<string, boost::any>) == m["BruteForceSummary"].type()) {
        DescribeBruteForceSummaryResponseBodyBruteForceSummary model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["BruteForceSummary"]));
        bruteForceSummary = make_shared<DescribeBruteForceSummaryResponseBodyBruteForceSummary>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeBruteForceSummaryResponseBody() = default;
};
class DescribeBruteForceSummaryResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeBruteForceSummaryResponseBody> body{};

  DescribeBruteForceSummaryResponse() {}

  explicit DescribeBruteForceSummaryResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeBruteForceSummaryResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeBruteForceSummaryResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeBruteForceSummaryResponse() = default;
};
class DescribeCheckEcsWarningsRequest : public Darabonba::Model {
public:
  shared_ptr<string> sourceIp{};

  DescribeCheckEcsWarningsRequest() {}

  explicit DescribeCheckEcsWarningsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeCheckEcsWarningsRequest() = default;
};
class DescribeCheckEcsWarningsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> canTry{};
  shared_ptr<string> requestId{};
  shared_ptr<string> sasVersion{};
  shared_ptr<string> weakPasswordCount{};

  DescribeCheckEcsWarningsResponseBody() {}

  explicit DescribeCheckEcsWarningsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (canTry) {
      res["CanTry"] = boost::any(*canTry);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (sasVersion) {
      res["SasVersion"] = boost::any(*sasVersion);
    }
    if (weakPasswordCount) {
      res["WeakPasswordCount"] = boost::any(*weakPasswordCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CanTry") != m.end() && !m["CanTry"].empty()) {
      canTry = make_shared<string>(boost::any_cast<string>(m["CanTry"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("SasVersion") != m.end() && !m["SasVersion"].empty()) {
      sasVersion = make_shared<string>(boost::any_cast<string>(m["SasVersion"]));
    }
    if (m.find("WeakPasswordCount") != m.end() && !m["WeakPasswordCount"].empty()) {
      weakPasswordCount = make_shared<string>(boost::any_cast<string>(m["WeakPasswordCount"]));
    }
  }


  virtual ~DescribeCheckEcsWarningsResponseBody() = default;
};
class DescribeCheckEcsWarningsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeCheckEcsWarningsResponseBody> body{};

  DescribeCheckEcsWarningsResponse() {}

  explicit DescribeCheckEcsWarningsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeCheckEcsWarningsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeCheckEcsWarningsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeCheckEcsWarningsResponse() = default;
};
class DescribeCheckWarningDetailRequest : public Darabonba::Model {
public:
  shared_ptr<long> checkWarningId{};
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};

  DescribeCheckWarningDetailRequest() {}

  explicit DescribeCheckWarningDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (checkWarningId) {
      res["CheckWarningId"] = boost::any(*checkWarningId);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CheckWarningId") != m.end() && !m["CheckWarningId"].empty()) {
      checkWarningId = make_shared<long>(boost::any_cast<long>(m["CheckWarningId"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeCheckWarningDetailRequest() = default;
};
class DescribeCheckWarningDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> advice{};
  shared_ptr<long> checkId{};
  shared_ptr<string> description{};
  shared_ptr<string> item{};
  shared_ptr<string> level{};
  shared_ptr<string> prompt{};
  shared_ptr<string> requestId{};
  shared_ptr<string> type{};

  DescribeCheckWarningDetailResponseBody() {}

  explicit DescribeCheckWarningDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (advice) {
      res["Advice"] = boost::any(*advice);
    }
    if (checkId) {
      res["CheckId"] = boost::any(*checkId);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (item) {
      res["Item"] = boost::any(*item);
    }
    if (level) {
      res["Level"] = boost::any(*level);
    }
    if (prompt) {
      res["Prompt"] = boost::any(*prompt);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Advice") != m.end() && !m["Advice"].empty()) {
      advice = make_shared<string>(boost::any_cast<string>(m["Advice"]));
    }
    if (m.find("CheckId") != m.end() && !m["CheckId"].empty()) {
      checkId = make_shared<long>(boost::any_cast<long>(m["CheckId"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("Item") != m.end() && !m["Item"].empty()) {
      item = make_shared<string>(boost::any_cast<string>(m["Item"]));
    }
    if (m.find("Level") != m.end() && !m["Level"].empty()) {
      level = make_shared<string>(boost::any_cast<string>(m["Level"]));
    }
    if (m.find("Prompt") != m.end() && !m["Prompt"].empty()) {
      prompt = make_shared<string>(boost::any_cast<string>(m["Prompt"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribeCheckWarningDetailResponseBody() = default;
};
class DescribeCheckWarningDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeCheckWarningDetailResponseBody> body{};

  DescribeCheckWarningDetailResponse() {}

  explicit DescribeCheckWarningDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeCheckWarningDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeCheckWarningDetailResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeCheckWarningDetailResponse() = default;
};
class DescribeCheckWarningSummaryRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> lang{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> riskName{};
  shared_ptr<long> riskStatus{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> status{};
  shared_ptr<long> strategyId{};
  shared_ptr<string> typeName_{};
  shared_ptr<string> uuids{};

  DescribeCheckWarningSummaryRequest() {}

  explicit DescribeCheckWarningSummaryRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (riskName) {
      res["RiskName"] = boost::any(*riskName);
    }
    if (riskStatus) {
      res["RiskStatus"] = boost::any(*riskStatus);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (strategyId) {
      res["StrategyId"] = boost::any(*strategyId);
    }
    if (typeName_) {
      res["TypeName"] = boost::any(*typeName_);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RiskName") != m.end() && !m["RiskName"].empty()) {
      riskName = make_shared<string>(boost::any_cast<string>(m["RiskName"]));
    }
    if (m.find("RiskStatus") != m.end() && !m["RiskStatus"].empty()) {
      riskStatus = make_shared<long>(boost::any_cast<long>(m["RiskStatus"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("StrategyId") != m.end() && !m["StrategyId"].empty()) {
      strategyId = make_shared<long>(boost::any_cast<long>(m["StrategyId"]));
    }
    if (m.find("TypeName") != m.end() && !m["TypeName"].empty()) {
      typeName_ = make_shared<string>(boost::any_cast<string>(m["TypeName"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~DescribeCheckWarningSummaryRequest() = default;
};
class DescribeCheckWarningSummaryResponseBodyWarningSummarys : public Darabonba::Model {
public:
  shared_ptr<long> checkCount{};
  shared_ptr<long> highWarningCount{};
  shared_ptr<string> lastFoundTime{};
  shared_ptr<string> level{};
  shared_ptr<long> lowWarningCount{};
  shared_ptr<long> mediumWarningCount{};
  shared_ptr<long> riskId{};
  shared_ptr<string> riskName{};
  shared_ptr<string> subTypeAlias{};
  shared_ptr<string> typeAlias{};
  shared_ptr<long> warningMachineCount{};

  DescribeCheckWarningSummaryResponseBodyWarningSummarys() {}

  explicit DescribeCheckWarningSummaryResponseBodyWarningSummarys(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (checkCount) {
      res["CheckCount"] = boost::any(*checkCount);
    }
    if (highWarningCount) {
      res["HighWarningCount"] = boost::any(*highWarningCount);
    }
    if (lastFoundTime) {
      res["LastFoundTime"] = boost::any(*lastFoundTime);
    }
    if (level) {
      res["Level"] = boost::any(*level);
    }
    if (lowWarningCount) {
      res["LowWarningCount"] = boost::any(*lowWarningCount);
    }
    if (mediumWarningCount) {
      res["MediumWarningCount"] = boost::any(*mediumWarningCount);
    }
    if (riskId) {
      res["RiskId"] = boost::any(*riskId);
    }
    if (riskName) {
      res["RiskName"] = boost::any(*riskName);
    }
    if (subTypeAlias) {
      res["SubTypeAlias"] = boost::any(*subTypeAlias);
    }
    if (typeAlias) {
      res["TypeAlias"] = boost::any(*typeAlias);
    }
    if (warningMachineCount) {
      res["WarningMachineCount"] = boost::any(*warningMachineCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CheckCount") != m.end() && !m["CheckCount"].empty()) {
      checkCount = make_shared<long>(boost::any_cast<long>(m["CheckCount"]));
    }
    if (m.find("HighWarningCount") != m.end() && !m["HighWarningCount"].empty()) {
      highWarningCount = make_shared<long>(boost::any_cast<long>(m["HighWarningCount"]));
    }
    if (m.find("LastFoundTime") != m.end() && !m["LastFoundTime"].empty()) {
      lastFoundTime = make_shared<string>(boost::any_cast<string>(m["LastFoundTime"]));
    }
    if (m.find("Level") != m.end() && !m["Level"].empty()) {
      level = make_shared<string>(boost::any_cast<string>(m["Level"]));
    }
    if (m.find("LowWarningCount") != m.end() && !m["LowWarningCount"].empty()) {
      lowWarningCount = make_shared<long>(boost::any_cast<long>(m["LowWarningCount"]));
    }
    if (m.find("MediumWarningCount") != m.end() && !m["MediumWarningCount"].empty()) {
      mediumWarningCount = make_shared<long>(boost::any_cast<long>(m["MediumWarningCount"]));
    }
    if (m.find("RiskId") != m.end() && !m["RiskId"].empty()) {
      riskId = make_shared<long>(boost::any_cast<long>(m["RiskId"]));
    }
    if (m.find("RiskName") != m.end() && !m["RiskName"].empty()) {
      riskName = make_shared<string>(boost::any_cast<string>(m["RiskName"]));
    }
    if (m.find("SubTypeAlias") != m.end() && !m["SubTypeAlias"].empty()) {
      subTypeAlias = make_shared<string>(boost::any_cast<string>(m["SubTypeAlias"]));
    }
    if (m.find("TypeAlias") != m.end() && !m["TypeAlias"].empty()) {
      typeAlias = make_shared<string>(boost::any_cast<string>(m["TypeAlias"]));
    }
    if (m.find("WarningMachineCount") != m.end() && !m["WarningMachineCount"].empty()) {
      warningMachineCount = make_shared<long>(boost::any_cast<long>(m["WarningMachineCount"]));
    }
  }


  virtual ~DescribeCheckWarningSummaryResponseBodyWarningSummarys() = default;
};
class DescribeCheckWarningSummaryResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};
  shared_ptr<vector<DescribeCheckWarningSummaryResponseBodyWarningSummarys>> warningSummarys{};

  DescribeCheckWarningSummaryResponseBody() {}

  explicit DescribeCheckWarningSummaryResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    if (warningSummarys) {
      vector<boost::any> temp1;
      for(auto item1:*warningSummarys){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["WarningSummarys"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
    if (m.find("WarningSummarys") != m.end() && !m["WarningSummarys"].empty()) {
      if (typeid(vector<boost::any>) == m["WarningSummarys"].type()) {
        vector<DescribeCheckWarningSummaryResponseBodyWarningSummarys> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["WarningSummarys"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeCheckWarningSummaryResponseBodyWarningSummarys model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        warningSummarys = make_shared<vector<DescribeCheckWarningSummaryResponseBodyWarningSummarys>>(expect1);
      }
    }
  }


  virtual ~DescribeCheckWarningSummaryResponseBody() = default;
};
class DescribeCheckWarningSummaryResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeCheckWarningSummaryResponseBody> body{};

  DescribeCheckWarningSummaryResponse() {}

  explicit DescribeCheckWarningSummaryResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeCheckWarningSummaryResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeCheckWarningSummaryResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeCheckWarningSummaryResponse() = default;
};
class DescribeCheckWarningsRequest : public Darabonba::Model {
public:
  shared_ptr<long> checkId{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> lang{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> riskId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> uuid{};

  DescribeCheckWarningsRequest() {}

  explicit DescribeCheckWarningsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (checkId) {
      res["CheckId"] = boost::any(*checkId);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (riskId) {
      res["RiskId"] = boost::any(*riskId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CheckId") != m.end() && !m["CheckId"].empty()) {
      checkId = make_shared<long>(boost::any_cast<long>(m["CheckId"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RiskId") != m.end() && !m["RiskId"].empty()) {
      riskId = make_shared<long>(boost::any_cast<long>(m["RiskId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeCheckWarningsRequest() = default;
};
class DescribeCheckWarningsResponseBodyCheckWarnings : public Darabonba::Model {
public:
  shared_ptr<long> checkId{};
  shared_ptr<long> checkWarningId{};
  shared_ptr<string> item{};
  shared_ptr<string> level{};
  shared_ptr<long> status{};
  shared_ptr<string> type{};
  shared_ptr<string> uuid{};

  DescribeCheckWarningsResponseBodyCheckWarnings() {}

  explicit DescribeCheckWarningsResponseBodyCheckWarnings(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (checkId) {
      res["CheckId"] = boost::any(*checkId);
    }
    if (checkWarningId) {
      res["CheckWarningId"] = boost::any(*checkWarningId);
    }
    if (item) {
      res["Item"] = boost::any(*item);
    }
    if (level) {
      res["Level"] = boost::any(*level);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CheckId") != m.end() && !m["CheckId"].empty()) {
      checkId = make_shared<long>(boost::any_cast<long>(m["CheckId"]));
    }
    if (m.find("CheckWarningId") != m.end() && !m["CheckWarningId"].empty()) {
      checkWarningId = make_shared<long>(boost::any_cast<long>(m["CheckWarningId"]));
    }
    if (m.find("Item") != m.end() && !m["Item"].empty()) {
      item = make_shared<string>(boost::any_cast<string>(m["Item"]));
    }
    if (m.find("Level") != m.end() && !m["Level"].empty()) {
      level = make_shared<string>(boost::any_cast<string>(m["Level"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeCheckWarningsResponseBodyCheckWarnings() = default;
};
class DescribeCheckWarningsResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeCheckWarningsResponseBodyCheckWarnings>> checkWarnings{};
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};

  DescribeCheckWarningsResponseBody() {}

  explicit DescribeCheckWarningsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (checkWarnings) {
      vector<boost::any> temp1;
      for(auto item1:*checkWarnings){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["CheckWarnings"] = boost::any(temp1);
    }
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CheckWarnings") != m.end() && !m["CheckWarnings"].empty()) {
      if (typeid(vector<boost::any>) == m["CheckWarnings"].type()) {
        vector<DescribeCheckWarningsResponseBodyCheckWarnings> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["CheckWarnings"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeCheckWarningsResponseBodyCheckWarnings model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        checkWarnings = make_shared<vector<DescribeCheckWarningsResponseBodyCheckWarnings>>(expect1);
      }
    }
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeCheckWarningsResponseBody() = default;
};
class DescribeCheckWarningsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeCheckWarningsResponseBody> body{};

  DescribeCheckWarningsResponse() {}

  explicit DescribeCheckWarningsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeCheckWarningsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeCheckWarningsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeCheckWarningsResponse() = default;
};
class DescribeCloudCenterInstancesRequest : public Darabonba::Model {
public:
  shared_ptr<string> criteria{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> importance{};
  shared_ptr<string> logicalExp{};
  shared_ptr<string> machineTypes{};
  shared_ptr<bool> noGroupTrace{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> regionId{};

  DescribeCloudCenterInstancesRequest() {}

  explicit DescribeCloudCenterInstancesRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (criteria) {
      res["Criteria"] = boost::any(*criteria);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (importance) {
      res["Importance"] = boost::any(*importance);
    }
    if (logicalExp) {
      res["LogicalExp"] = boost::any(*logicalExp);
    }
    if (machineTypes) {
      res["MachineTypes"] = boost::any(*machineTypes);
    }
    if (noGroupTrace) {
      res["NoGroupTrace"] = boost::any(*noGroupTrace);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Criteria") != m.end() && !m["Criteria"].empty()) {
      criteria = make_shared<string>(boost::any_cast<string>(m["Criteria"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Importance") != m.end() && !m["Importance"].empty()) {
      importance = make_shared<long>(boost::any_cast<long>(m["Importance"]));
    }
    if (m.find("LogicalExp") != m.end() && !m["LogicalExp"].empty()) {
      logicalExp = make_shared<string>(boost::any_cast<string>(m["LogicalExp"]));
    }
    if (m.find("MachineTypes") != m.end() && !m["MachineTypes"].empty()) {
      machineTypes = make_shared<string>(boost::any_cast<string>(m["MachineTypes"]));
    }
    if (m.find("NoGroupTrace") != m.end() && !m["NoGroupTrace"].empty()) {
      noGroupTrace = make_shared<bool>(boost::any_cast<bool>(m["NoGroupTrace"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
  }


  virtual ~DescribeCloudCenterInstancesRequest() = default;
};
class DescribeCloudCenterInstancesResponseBodyInstances : public Darabonba::Model {
public:
  shared_ptr<string> alarmStatus{};
  shared_ptr<string> assetType{};
  shared_ptr<long> authModifyTime{};
  shared_ptr<long> authVersion{};
  shared_ptr<string> authVersionName{};
  shared_ptr<bool> bind{};
  shared_ptr<string> clientStatus{};
  shared_ptr<string> clusterId{};
  shared_ptr<string> clusterName{};
  shared_ptr<long> cores{};
  shared_ptr<string> cpuInfo{};
  shared_ptr<long> createdTime{};
  shared_ptr<long> exposedStatus{};
  shared_ptr<long> flag{};
  shared_ptr<long> groupId{};
  shared_ptr<string> groupTrace{};
  shared_ptr<string> hcStatus{};
  shared_ptr<long> healthCheckCount{};
  shared_ptr<long> importance{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> ip{};
  shared_ptr<string> ipListString{};
  shared_ptr<string> kernel{};
  shared_ptr<long> lastLoginTimestamp{};
  shared_ptr<string> macListString{};
  shared_ptr<long> mem{};
  shared_ptr<string> os{};
  shared_ptr<string> osName{};
  shared_ptr<long> podCount{};
  shared_ptr<string> region{};
  shared_ptr<string> regionId{};
  shared_ptr<string> regionName{};
  shared_ptr<string> riskCount{};
  shared_ptr<string> riskStatus{};
  shared_ptr<long> safeEventCount{};
  shared_ptr<string> status{};
  shared_ptr<string> tag{};
  shared_ptr<string> tagId{};
  shared_ptr<string> uuid{};
  shared_ptr<long> vendor{};
  shared_ptr<string> vendorName{};
  shared_ptr<string> vpcInstanceId{};
  shared_ptr<long> vulCount{};
  shared_ptr<string> vulStatus{};

  DescribeCloudCenterInstancesResponseBodyInstances() {}

  explicit DescribeCloudCenterInstancesResponseBodyInstances(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (alarmStatus) {
      res["AlarmStatus"] = boost::any(*alarmStatus);
    }
    if (assetType) {
      res["AssetType"] = boost::any(*assetType);
    }
    if (authModifyTime) {
      res["AuthModifyTime"] = boost::any(*authModifyTime);
    }
    if (authVersion) {
      res["AuthVersion"] = boost::any(*authVersion);
    }
    if (authVersionName) {
      res["AuthVersionName"] = boost::any(*authVersionName);
    }
    if (bind) {
      res["Bind"] = boost::any(*bind);
    }
    if (clientStatus) {
      res["ClientStatus"] = boost::any(*clientStatus);
    }
    if (clusterId) {
      res["ClusterId"] = boost::any(*clusterId);
    }
    if (clusterName) {
      res["ClusterName"] = boost::any(*clusterName);
    }
    if (cores) {
      res["Cores"] = boost::any(*cores);
    }
    if (cpuInfo) {
      res["CpuInfo"] = boost::any(*cpuInfo);
    }
    if (createdTime) {
      res["CreatedTime"] = boost::any(*createdTime);
    }
    if (exposedStatus) {
      res["ExposedStatus"] = boost::any(*exposedStatus);
    }
    if (flag) {
      res["Flag"] = boost::any(*flag);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (groupTrace) {
      res["GroupTrace"] = boost::any(*groupTrace);
    }
    if (hcStatus) {
      res["HcStatus"] = boost::any(*hcStatus);
    }
    if (healthCheckCount) {
      res["HealthCheckCount"] = boost::any(*healthCheckCount);
    }
    if (importance) {
      res["Importance"] = boost::any(*importance);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (ip) {
      res["Ip"] = boost::any(*ip);
    }
    if (ipListString) {
      res["IpListString"] = boost::any(*ipListString);
    }
    if (kernel) {
      res["Kernel"] = boost::any(*kernel);
    }
    if (lastLoginTimestamp) {
      res["LastLoginTimestamp"] = boost::any(*lastLoginTimestamp);
    }
    if (macListString) {
      res["MacListString"] = boost::any(*macListString);
    }
    if (mem) {
      res["Mem"] = boost::any(*mem);
    }
    if (os) {
      res["Os"] = boost::any(*os);
    }
    if (osName) {
      res["OsName"] = boost::any(*osName);
    }
    if (podCount) {
      res["PodCount"] = boost::any(*podCount);
    }
    if (region) {
      res["Region"] = boost::any(*region);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    if (regionName) {
      res["RegionName"] = boost::any(*regionName);
    }
    if (riskCount) {
      res["RiskCount"] = boost::any(*riskCount);
    }
    if (riskStatus) {
      res["RiskStatus"] = boost::any(*riskStatus);
    }
    if (safeEventCount) {
      res["SafeEventCount"] = boost::any(*safeEventCount);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (tag) {
      res["Tag"] = boost::any(*tag);
    }
    if (tagId) {
      res["TagId"] = boost::any(*tagId);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    if (vendor) {
      res["Vendor"] = boost::any(*vendor);
    }
    if (vendorName) {
      res["VendorName"] = boost::any(*vendorName);
    }
    if (vpcInstanceId) {
      res["VpcInstanceId"] = boost::any(*vpcInstanceId);
    }
    if (vulCount) {
      res["VulCount"] = boost::any(*vulCount);
    }
    if (vulStatus) {
      res["VulStatus"] = boost::any(*vulStatus);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AlarmStatus") != m.end() && !m["AlarmStatus"].empty()) {
      alarmStatus = make_shared<string>(boost::any_cast<string>(m["AlarmStatus"]));
    }
    if (m.find("AssetType") != m.end() && !m["AssetType"].empty()) {
      assetType = make_shared<string>(boost::any_cast<string>(m["AssetType"]));
    }
    if (m.find("AuthModifyTime") != m.end() && !m["AuthModifyTime"].empty()) {
      authModifyTime = make_shared<long>(boost::any_cast<long>(m["AuthModifyTime"]));
    }
    if (m.find("AuthVersion") != m.end() && !m["AuthVersion"].empty()) {
      authVersion = make_shared<long>(boost::any_cast<long>(m["AuthVersion"]));
    }
    if (m.find("AuthVersionName") != m.end() && !m["AuthVersionName"].empty()) {
      authVersionName = make_shared<string>(boost::any_cast<string>(m["AuthVersionName"]));
    }
    if (m.find("Bind") != m.end() && !m["Bind"].empty()) {
      bind = make_shared<bool>(boost::any_cast<bool>(m["Bind"]));
    }
    if (m.find("ClientStatus") != m.end() && !m["ClientStatus"].empty()) {
      clientStatus = make_shared<string>(boost::any_cast<string>(m["ClientStatus"]));
    }
    if (m.find("ClusterId") != m.end() && !m["ClusterId"].empty()) {
      clusterId = make_shared<string>(boost::any_cast<string>(m["ClusterId"]));
    }
    if (m.find("ClusterName") != m.end() && !m["ClusterName"].empty()) {
      clusterName = make_shared<string>(boost::any_cast<string>(m["ClusterName"]));
    }
    if (m.find("Cores") != m.end() && !m["Cores"].empty()) {
      cores = make_shared<long>(boost::any_cast<long>(m["Cores"]));
    }
    if (m.find("CpuInfo") != m.end() && !m["CpuInfo"].empty()) {
      cpuInfo = make_shared<string>(boost::any_cast<string>(m["CpuInfo"]));
    }
    if (m.find("CreatedTime") != m.end() && !m["CreatedTime"].empty()) {
      createdTime = make_shared<long>(boost::any_cast<long>(m["CreatedTime"]));
    }
    if (m.find("ExposedStatus") != m.end() && !m["ExposedStatus"].empty()) {
      exposedStatus = make_shared<long>(boost::any_cast<long>(m["ExposedStatus"]));
    }
    if (m.find("Flag") != m.end() && !m["Flag"].empty()) {
      flag = make_shared<long>(boost::any_cast<long>(m["Flag"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("GroupTrace") != m.end() && !m["GroupTrace"].empty()) {
      groupTrace = make_shared<string>(boost::any_cast<string>(m["GroupTrace"]));
    }
    if (m.find("HcStatus") != m.end() && !m["HcStatus"].empty()) {
      hcStatus = make_shared<string>(boost::any_cast<string>(m["HcStatus"]));
    }
    if (m.find("HealthCheckCount") != m.end() && !m["HealthCheckCount"].empty()) {
      healthCheckCount = make_shared<long>(boost::any_cast<long>(m["HealthCheckCount"]));
    }
    if (m.find("Importance") != m.end() && !m["Importance"].empty()) {
      importance = make_shared<long>(boost::any_cast<long>(m["Importance"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("Ip") != m.end() && !m["Ip"].empty()) {
      ip = make_shared<string>(boost::any_cast<string>(m["Ip"]));
    }
    if (m.find("IpListString") != m.end() && !m["IpListString"].empty()) {
      ipListString = make_shared<string>(boost::any_cast<string>(m["IpListString"]));
    }
    if (m.find("Kernel") != m.end() && !m["Kernel"].empty()) {
      kernel = make_shared<string>(boost::any_cast<string>(m["Kernel"]));
    }
    if (m.find("LastLoginTimestamp") != m.end() && !m["LastLoginTimestamp"].empty()) {
      lastLoginTimestamp = make_shared<long>(boost::any_cast<long>(m["LastLoginTimestamp"]));
    }
    if (m.find("MacListString") != m.end() && !m["MacListString"].empty()) {
      macListString = make_shared<string>(boost::any_cast<string>(m["MacListString"]));
    }
    if (m.find("Mem") != m.end() && !m["Mem"].empty()) {
      mem = make_shared<long>(boost::any_cast<long>(m["Mem"]));
    }
    if (m.find("Os") != m.end() && !m["Os"].empty()) {
      os = make_shared<string>(boost::any_cast<string>(m["Os"]));
    }
    if (m.find("OsName") != m.end() && !m["OsName"].empty()) {
      osName = make_shared<string>(boost::any_cast<string>(m["OsName"]));
    }
    if (m.find("PodCount") != m.end() && !m["PodCount"].empty()) {
      podCount = make_shared<long>(boost::any_cast<long>(m["PodCount"]));
    }
    if (m.find("Region") != m.end() && !m["Region"].empty()) {
      region = make_shared<string>(boost::any_cast<string>(m["Region"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
    if (m.find("RegionName") != m.end() && !m["RegionName"].empty()) {
      regionName = make_shared<string>(boost::any_cast<string>(m["RegionName"]));
    }
    if (m.find("RiskCount") != m.end() && !m["RiskCount"].empty()) {
      riskCount = make_shared<string>(boost::any_cast<string>(m["RiskCount"]));
    }
    if (m.find("RiskStatus") != m.end() && !m["RiskStatus"].empty()) {
      riskStatus = make_shared<string>(boost::any_cast<string>(m["RiskStatus"]));
    }
    if (m.find("SafeEventCount") != m.end() && !m["SafeEventCount"].empty()) {
      safeEventCount = make_shared<long>(boost::any_cast<long>(m["SafeEventCount"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("Tag") != m.end() && !m["Tag"].empty()) {
      tag = make_shared<string>(boost::any_cast<string>(m["Tag"]));
    }
    if (m.find("TagId") != m.end() && !m["TagId"].empty()) {
      tagId = make_shared<string>(boost::any_cast<string>(m["TagId"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
    if (m.find("Vendor") != m.end() && !m["Vendor"].empty()) {
      vendor = make_shared<long>(boost::any_cast<long>(m["Vendor"]));
    }
    if (m.find("VendorName") != m.end() && !m["VendorName"].empty()) {
      vendorName = make_shared<string>(boost::any_cast<string>(m["VendorName"]));
    }
    if (m.find("VpcInstanceId") != m.end() && !m["VpcInstanceId"].empty()) {
      vpcInstanceId = make_shared<string>(boost::any_cast<string>(m["VpcInstanceId"]));
    }
    if (m.find("VulCount") != m.end() && !m["VulCount"].empty()) {
      vulCount = make_shared<long>(boost::any_cast<long>(m["VulCount"]));
    }
    if (m.find("VulStatus") != m.end() && !m["VulStatus"].empty()) {
      vulStatus = make_shared<string>(boost::any_cast<string>(m["VulStatus"]));
    }
  }


  virtual ~DescribeCloudCenterInstancesResponseBodyInstances() = default;
};
class DescribeCloudCenterInstancesResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeCloudCenterInstancesResponseBodyPageInfo() {}

  explicit DescribeCloudCenterInstancesResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeCloudCenterInstancesResponseBodyPageInfo() = default;
};
class DescribeCloudCenterInstancesResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeCloudCenterInstancesResponseBodyInstances>> instances{};
  shared_ptr<DescribeCloudCenterInstancesResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  DescribeCloudCenterInstancesResponseBody() {}

  explicit DescribeCloudCenterInstancesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instances) {
      vector<boost::any> temp1;
      for(auto item1:*instances){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Instances"] = boost::any(temp1);
    }
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Instances") != m.end() && !m["Instances"].empty()) {
      if (typeid(vector<boost::any>) == m["Instances"].type()) {
        vector<DescribeCloudCenterInstancesResponseBodyInstances> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Instances"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeCloudCenterInstancesResponseBodyInstances model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        instances = make_shared<vector<DescribeCloudCenterInstancesResponseBodyInstances>>(expect1);
      }
    }
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeCloudCenterInstancesResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeCloudCenterInstancesResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~DescribeCloudCenterInstancesResponseBody() = default;
};
class DescribeCloudCenterInstancesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeCloudCenterInstancesResponseBody> body{};

  DescribeCloudCenterInstancesResponse() {}

  explicit DescribeCloudCenterInstancesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeCloudCenterInstancesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeCloudCenterInstancesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeCloudCenterInstancesResponse() = default;
};
class DescribeCloudProductFieldStatisticsResponseBodyGroupedFields : public Darabonba::Model {
public:
  shared_ptr<string> categoryCount{};
  shared_ptr<long> instanceCount{};
  shared_ptr<long> riskInstanceCount{};

  DescribeCloudProductFieldStatisticsResponseBodyGroupedFields() {}

  explicit DescribeCloudProductFieldStatisticsResponseBodyGroupedFields(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (categoryCount) {
      res["CategoryCount"] = boost::any(*categoryCount);
    }
    if (instanceCount) {
      res["InstanceCount"] = boost::any(*instanceCount);
    }
    if (riskInstanceCount) {
      res["RiskInstanceCount"] = boost::any(*riskInstanceCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CategoryCount") != m.end() && !m["CategoryCount"].empty()) {
      categoryCount = make_shared<string>(boost::any_cast<string>(m["CategoryCount"]));
    }
    if (m.find("InstanceCount") != m.end() && !m["InstanceCount"].empty()) {
      instanceCount = make_shared<long>(boost::any_cast<long>(m["InstanceCount"]));
    }
    if (m.find("RiskInstanceCount") != m.end() && !m["RiskInstanceCount"].empty()) {
      riskInstanceCount = make_shared<long>(boost::any_cast<long>(m["RiskInstanceCount"]));
    }
  }


  virtual ~DescribeCloudProductFieldStatisticsResponseBodyGroupedFields() = default;
};
class DescribeCloudProductFieldStatisticsResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeCloudProductFieldStatisticsResponseBodyGroupedFields> groupedFields{};
  shared_ptr<string> requestId{};

  DescribeCloudProductFieldStatisticsResponseBody() {}

  explicit DescribeCloudProductFieldStatisticsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupedFields) {
      res["GroupedFields"] = groupedFields ? boost::any(groupedFields->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupedFields") != m.end() && !m["GroupedFields"].empty()) {
      if (typeid(map<string, boost::any>) == m["GroupedFields"].type()) {
        DescribeCloudProductFieldStatisticsResponseBodyGroupedFields model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["GroupedFields"]));
        groupedFields = make_shared<DescribeCloudProductFieldStatisticsResponseBodyGroupedFields>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeCloudProductFieldStatisticsResponseBody() = default;
};
class DescribeCloudProductFieldStatisticsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeCloudProductFieldStatisticsResponseBody> body{};

  DescribeCloudProductFieldStatisticsResponse() {}

  explicit DescribeCloudProductFieldStatisticsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeCloudProductFieldStatisticsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeCloudProductFieldStatisticsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeCloudProductFieldStatisticsResponse() = default;
};
class DescribeConcernNecessityRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};

  DescribeConcernNecessityRequest() {}

  explicit DescribeConcernNecessityRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
  }


  virtual ~DescribeConcernNecessityRequest() = default;
};
class DescribeConcernNecessityResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<string>> concernNecessity{};
  shared_ptr<string> requestId{};

  DescribeConcernNecessityResponseBody() {}

  explicit DescribeConcernNecessityResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (concernNecessity) {
      res["ConcernNecessity"] = boost::any(*concernNecessity);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ConcernNecessity") != m.end() && !m["ConcernNecessity"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["ConcernNecessity"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ConcernNecessity"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      concernNecessity = make_shared<vector<string>>(toVec1);
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeConcernNecessityResponseBody() = default;
};
class DescribeConcernNecessityResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeConcernNecessityResponseBody> body{};

  DescribeConcernNecessityResponse() {}

  explicit DescribeConcernNecessityResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeConcernNecessityResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeConcernNecessityResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeConcernNecessityResponse() = default;
};
class DescribeContainerStatisticsRequest : public Darabonba::Model {
public:
  shared_ptr<string> clusterId{};

  DescribeContainerStatisticsRequest() {}

  explicit DescribeContainerStatisticsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (clusterId) {
      res["ClusterId"] = boost::any(*clusterId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ClusterId") != m.end() && !m["ClusterId"].empty()) {
      clusterId = make_shared<string>(boost::any_cast<string>(m["ClusterId"]));
    }
  }


  virtual ~DescribeContainerStatisticsRequest() = default;
};
class DescribeContainerStatisticsResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> remindAlarmCount{};
  shared_ptr<long> seriousAlarmCount{};
  shared_ptr<long> suspiciousAlarmCount{};
  shared_ptr<long> totalAlarmCount{};
  shared_ptr<long> totalNode{};
  shared_ptr<long> hasRiskNode{};

  DescribeContainerStatisticsResponseBodyData() {}

  explicit DescribeContainerStatisticsResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (remindAlarmCount) {
      res["RemindAlarmCount"] = boost::any(*remindAlarmCount);
    }
    if (seriousAlarmCount) {
      res["SeriousAlarmCount"] = boost::any(*seriousAlarmCount);
    }
    if (suspiciousAlarmCount) {
      res["SuspiciousAlarmCount"] = boost::any(*suspiciousAlarmCount);
    }
    if (totalAlarmCount) {
      res["TotalAlarmCount"] = boost::any(*totalAlarmCount);
    }
    if (totalNode) {
      res["TotalNode"] = boost::any(*totalNode);
    }
    if (hasRiskNode) {
      res["hasRiskNode"] = boost::any(*hasRiskNode);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RemindAlarmCount") != m.end() && !m["RemindAlarmCount"].empty()) {
      remindAlarmCount = make_shared<long>(boost::any_cast<long>(m["RemindAlarmCount"]));
    }
    if (m.find("SeriousAlarmCount") != m.end() && !m["SeriousAlarmCount"].empty()) {
      seriousAlarmCount = make_shared<long>(boost::any_cast<long>(m["SeriousAlarmCount"]));
    }
    if (m.find("SuspiciousAlarmCount") != m.end() && !m["SuspiciousAlarmCount"].empty()) {
      suspiciousAlarmCount = make_shared<long>(boost::any_cast<long>(m["SuspiciousAlarmCount"]));
    }
    if (m.find("TotalAlarmCount") != m.end() && !m["TotalAlarmCount"].empty()) {
      totalAlarmCount = make_shared<long>(boost::any_cast<long>(m["TotalAlarmCount"]));
    }
    if (m.find("TotalNode") != m.end() && !m["TotalNode"].empty()) {
      totalNode = make_shared<long>(boost::any_cast<long>(m["TotalNode"]));
    }
    if (m.find("hasRiskNode") != m.end() && !m["hasRiskNode"].empty()) {
      hasRiskNode = make_shared<long>(boost::any_cast<long>(m["hasRiskNode"]));
    }
  }


  virtual ~DescribeContainerStatisticsResponseBodyData() = default;
};
class DescribeContainerStatisticsResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeContainerStatisticsResponseBodyData> data{};
  shared_ptr<string> requestId{};

  DescribeContainerStatisticsResponseBody() {}

  explicit DescribeContainerStatisticsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        DescribeContainerStatisticsResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<DescribeContainerStatisticsResponseBodyData>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeContainerStatisticsResponseBody() = default;
};
class DescribeContainerStatisticsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeContainerStatisticsResponseBody> body{};

  DescribeContainerStatisticsResponse() {}

  explicit DescribeContainerStatisticsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeContainerStatisticsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeContainerStatisticsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeContainerStatisticsResponse() = default;
};
class DescribeCriteriaRequest : public Darabonba::Model {
public:
  shared_ptr<string> machineTypes{};
  shared_ptr<bool> supportAutoTag{};
  shared_ptr<string> value{};

  DescribeCriteriaRequest() {}

  explicit DescribeCriteriaRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (machineTypes) {
      res["MachineTypes"] = boost::any(*machineTypes);
    }
    if (supportAutoTag) {
      res["SupportAutoTag"] = boost::any(*supportAutoTag);
    }
    if (value) {
      res["Value"] = boost::any(*value);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("MachineTypes") != m.end() && !m["MachineTypes"].empty()) {
      machineTypes = make_shared<string>(boost::any_cast<string>(m["MachineTypes"]));
    }
    if (m.find("SupportAutoTag") != m.end() && !m["SupportAutoTag"].empty()) {
      supportAutoTag = make_shared<bool>(boost::any_cast<bool>(m["SupportAutoTag"]));
    }
    if (m.find("Value") != m.end() && !m["Value"].empty()) {
      value = make_shared<string>(boost::any_cast<string>(m["Value"]));
    }
  }


  virtual ~DescribeCriteriaRequest() = default;
};
class DescribeCriteriaResponseBodyCriteriaList : public Darabonba::Model {
public:
  shared_ptr<string> name{};
  shared_ptr<string> type{};
  shared_ptr<string> values{};

  DescribeCriteriaResponseBodyCriteriaList() {}

  explicit DescribeCriteriaResponseBodyCriteriaList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (values) {
      res["Values"] = boost::any(*values);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Values") != m.end() && !m["Values"].empty()) {
      values = make_shared<string>(boost::any_cast<string>(m["Values"]));
    }
  }


  virtual ~DescribeCriteriaResponseBodyCriteriaList() = default;
};
class DescribeCriteriaResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeCriteriaResponseBodyCriteriaList>> criteriaList{};
  shared_ptr<string> requestId{};

  DescribeCriteriaResponseBody() {}

  explicit DescribeCriteriaResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (criteriaList) {
      vector<boost::any> temp1;
      for(auto item1:*criteriaList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["CriteriaList"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CriteriaList") != m.end() && !m["CriteriaList"].empty()) {
      if (typeid(vector<boost::any>) == m["CriteriaList"].type()) {
        vector<DescribeCriteriaResponseBodyCriteriaList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["CriteriaList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeCriteriaResponseBodyCriteriaList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        criteriaList = make_shared<vector<DescribeCriteriaResponseBodyCriteriaList>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeCriteriaResponseBody() = default;
};
class DescribeCriteriaResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeCriteriaResponseBody> body{};

  DescribeCriteriaResponse() {}

  explicit DescribeCriteriaResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeCriteriaResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeCriteriaResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeCriteriaResponse() = default;
};
class DescribeDialogMessagesRequest : public Darabonba::Model {
public:
  shared_ptr<string> sourceIp{};

  DescribeDialogMessagesRequest() {}

  explicit DescribeDialogMessagesRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeDialogMessagesRequest() = default;
};
class DescribeDialogMessagesResponseBodyDialogList : public Darabonba::Model {
public:
  shared_ptr<string> dialogKey{};
  shared_ptr<long> ID{};
  shared_ptr<string> params{};

  DescribeDialogMessagesResponseBodyDialogList() {}

  explicit DescribeDialogMessagesResponseBodyDialogList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (dialogKey) {
      res["DialogKey"] = boost::any(*dialogKey);
    }
    if (ID) {
      res["ID"] = boost::any(*ID);
    }
    if (params) {
      res["Params"] = boost::any(*params);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DialogKey") != m.end() && !m["DialogKey"].empty()) {
      dialogKey = make_shared<string>(boost::any_cast<string>(m["DialogKey"]));
    }
    if (m.find("ID") != m.end() && !m["ID"].empty()) {
      ID = make_shared<long>(boost::any_cast<long>(m["ID"]));
    }
    if (m.find("Params") != m.end() && !m["Params"].empty()) {
      params = make_shared<string>(boost::any_cast<string>(m["Params"]));
    }
  }


  virtual ~DescribeDialogMessagesResponseBodyDialogList() = default;
};
class DescribeDialogMessagesResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeDialogMessagesResponseBodyDialogList>> dialogList{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};

  DescribeDialogMessagesResponseBody() {}

  explicit DescribeDialogMessagesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (dialogList) {
      vector<boost::any> temp1;
      for(auto item1:*dialogList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["DialogList"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DialogList") != m.end() && !m["DialogList"].empty()) {
      if (typeid(vector<boost::any>) == m["DialogList"].type()) {
        vector<DescribeDialogMessagesResponseBodyDialogList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["DialogList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeDialogMessagesResponseBodyDialogList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        dialogList = make_shared<vector<DescribeDialogMessagesResponseBodyDialogList>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeDialogMessagesResponseBody() = default;
};
class DescribeDialogMessagesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeDialogMessagesResponseBody> body{};

  DescribeDialogMessagesResponse() {}

  explicit DescribeDialogMessagesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeDialogMessagesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeDialogMessagesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeDialogMessagesResponse() = default;
};
class DescribeDingTalkRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> ruleActionName{};

  DescribeDingTalkRequest() {}

  explicit DescribeDingTalkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (ruleActionName) {
      res["RuleActionName"] = boost::any(*ruleActionName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RuleActionName") != m.end() && !m["RuleActionName"].empty()) {
      ruleActionName = make_shared<string>(boost::any_cast<string>(m["RuleActionName"]));
    }
  }


  virtual ~DescribeDingTalkRequest() = default;
};
class DescribeDingTalkResponseBodyActionList : public Darabonba::Model {
public:
  shared_ptr<string> actionName{};
  shared_ptr<long> aliUid{};
  shared_ptr<string> configList{};
  shared_ptr<string> dingTalkLang{};
  shared_ptr<long> gmtCreate{};
  shared_ptr<long> gmtModified{};
  shared_ptr<string> groupIdList{};
  shared_ptr<long> id{};
  shared_ptr<long> intervalTime{};
  shared_ptr<long> status{};
  shared_ptr<string> url{};

  DescribeDingTalkResponseBodyActionList() {}

  explicit DescribeDingTalkResponseBodyActionList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (actionName) {
      res["ActionName"] = boost::any(*actionName);
    }
    if (aliUid) {
      res["AliUid"] = boost::any(*aliUid);
    }
    if (configList) {
      res["ConfigList"] = boost::any(*configList);
    }
    if (dingTalkLang) {
      res["DingTalkLang"] = boost::any(*dingTalkLang);
    }
    if (gmtCreate) {
      res["GmtCreate"] = boost::any(*gmtCreate);
    }
    if (gmtModified) {
      res["GmtModified"] = boost::any(*gmtModified);
    }
    if (groupIdList) {
      res["GroupIdList"] = boost::any(*groupIdList);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (intervalTime) {
      res["IntervalTime"] = boost::any(*intervalTime);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (url) {
      res["Url"] = boost::any(*url);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ActionName") != m.end() && !m["ActionName"].empty()) {
      actionName = make_shared<string>(boost::any_cast<string>(m["ActionName"]));
    }
    if (m.find("AliUid") != m.end() && !m["AliUid"].empty()) {
      aliUid = make_shared<long>(boost::any_cast<long>(m["AliUid"]));
    }
    if (m.find("ConfigList") != m.end() && !m["ConfigList"].empty()) {
      configList = make_shared<string>(boost::any_cast<string>(m["ConfigList"]));
    }
    if (m.find("DingTalkLang") != m.end() && !m["DingTalkLang"].empty()) {
      dingTalkLang = make_shared<string>(boost::any_cast<string>(m["DingTalkLang"]));
    }
    if (m.find("GmtCreate") != m.end() && !m["GmtCreate"].empty()) {
      gmtCreate = make_shared<long>(boost::any_cast<long>(m["GmtCreate"]));
    }
    if (m.find("GmtModified") != m.end() && !m["GmtModified"].empty()) {
      gmtModified = make_shared<long>(boost::any_cast<long>(m["GmtModified"]));
    }
    if (m.find("GroupIdList") != m.end() && !m["GroupIdList"].empty()) {
      groupIdList = make_shared<string>(boost::any_cast<string>(m["GroupIdList"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("IntervalTime") != m.end() && !m["IntervalTime"].empty()) {
      intervalTime = make_shared<long>(boost::any_cast<long>(m["IntervalTime"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("Url") != m.end() && !m["Url"].empty()) {
      url = make_shared<string>(boost::any_cast<string>(m["Url"]));
    }
  }


  virtual ~DescribeDingTalkResponseBodyActionList() = default;
};
class DescribeDingTalkResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeDingTalkResponseBodyPageInfo() {}

  explicit DescribeDingTalkResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeDingTalkResponseBodyPageInfo() = default;
};
class DescribeDingTalkResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeDingTalkResponseBodyActionList>> actionList{};
  shared_ptr<DescribeDingTalkResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};

  DescribeDingTalkResponseBody() {}

  explicit DescribeDingTalkResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (actionList) {
      vector<boost::any> temp1;
      for(auto item1:*actionList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["ActionList"] = boost::any(temp1);
    }
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ActionList") != m.end() && !m["ActionList"].empty()) {
      if (typeid(vector<boost::any>) == m["ActionList"].type()) {
        vector<DescribeDingTalkResponseBodyActionList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["ActionList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeDingTalkResponseBodyActionList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        actionList = make_shared<vector<DescribeDingTalkResponseBodyActionList>>(expect1);
      }
    }
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeDingTalkResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeDingTalkResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeDingTalkResponseBody() = default;
};
class DescribeDingTalkResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeDingTalkResponseBody> body{};

  DescribeDingTalkResponse() {}

  explicit DescribeDingTalkResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeDingTalkResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeDingTalkResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeDingTalkResponse() = default;
};
class DescribeDomainCountRequest : public Darabonba::Model {
public:
  shared_ptr<string> sourceIp{};

  DescribeDomainCountRequest() {}

  explicit DescribeDomainCountRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeDomainCountRequest() = default;
};
class DescribeDomainCountResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<long> rootDomainsCount{};
  shared_ptr<long> subDomainsCount{};
  shared_ptr<long> totalDomainsCount{};

  DescribeDomainCountResponseBody() {}

  explicit DescribeDomainCountResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (rootDomainsCount) {
      res["RootDomainsCount"] = boost::any(*rootDomainsCount);
    }
    if (subDomainsCount) {
      res["SubDomainsCount"] = boost::any(*subDomainsCount);
    }
    if (totalDomainsCount) {
      res["TotalDomainsCount"] = boost::any(*totalDomainsCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("RootDomainsCount") != m.end() && !m["RootDomainsCount"].empty()) {
      rootDomainsCount = make_shared<long>(boost::any_cast<long>(m["RootDomainsCount"]));
    }
    if (m.find("SubDomainsCount") != m.end() && !m["SubDomainsCount"].empty()) {
      subDomainsCount = make_shared<long>(boost::any_cast<long>(m["SubDomainsCount"]));
    }
    if (m.find("TotalDomainsCount") != m.end() && !m["TotalDomainsCount"].empty()) {
      totalDomainsCount = make_shared<long>(boost::any_cast<long>(m["TotalDomainsCount"]));
    }
  }


  virtual ~DescribeDomainCountResponseBody() = default;
};
class DescribeDomainCountResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeDomainCountResponseBody> body{};

  DescribeDomainCountResponse() {}

  explicit DescribeDomainCountResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeDomainCountResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeDomainCountResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeDomainCountResponse() = default;
};
class DescribeDomainDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> domainName{};
  shared_ptr<string> sourceIp{};

  DescribeDomainDetailRequest() {}

  explicit DescribeDomainDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (domainName) {
      res["DomainName"] = boost::any(*domainName);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DomainName") != m.end() && !m["DomainName"].empty()) {
      domainName = make_shared<string>(boost::any_cast<string>(m["DomainName"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeDomainDetailRequest() = default;
};
class DescribeDomainDetailResponseBodyDomainDetailItems : public Darabonba::Model {
public:
  shared_ptr<string> assetType{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> uuid{};

  DescribeDomainDetailResponseBodyDomainDetailItems() {}

  explicit DescribeDomainDetailResponseBodyDomainDetailItems(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (assetType) {
      res["AssetType"] = boost::any(*assetType);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AssetType") != m.end() && !m["AssetType"].empty()) {
      assetType = make_shared<string>(boost::any_cast<string>(m["AssetType"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeDomainDetailResponseBodyDomainDetailItems() = default;
};
class DescribeDomainDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> alarmCount{};
  shared_ptr<string> domain{};
  shared_ptr<vector<DescribeDomainDetailResponseBodyDomainDetailItems>> domainDetailItems{};
  shared_ptr<string> requestId{};
  shared_ptr<string> rootDomain{};
  shared_ptr<long> vulCount{};

  DescribeDomainDetailResponseBody() {}

  explicit DescribeDomainDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (alarmCount) {
      res["AlarmCount"] = boost::any(*alarmCount);
    }
    if (domain) {
      res["Domain"] = boost::any(*domain);
    }
    if (domainDetailItems) {
      vector<boost::any> temp1;
      for(auto item1:*domainDetailItems){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["DomainDetailItems"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (rootDomain) {
      res["RootDomain"] = boost::any(*rootDomain);
    }
    if (vulCount) {
      res["VulCount"] = boost::any(*vulCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AlarmCount") != m.end() && !m["AlarmCount"].empty()) {
      alarmCount = make_shared<long>(boost::any_cast<long>(m["AlarmCount"]));
    }
    if (m.find("Domain") != m.end() && !m["Domain"].empty()) {
      domain = make_shared<string>(boost::any_cast<string>(m["Domain"]));
    }
    if (m.find("DomainDetailItems") != m.end() && !m["DomainDetailItems"].empty()) {
      if (typeid(vector<boost::any>) == m["DomainDetailItems"].type()) {
        vector<DescribeDomainDetailResponseBodyDomainDetailItems> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["DomainDetailItems"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeDomainDetailResponseBodyDomainDetailItems model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        domainDetailItems = make_shared<vector<DescribeDomainDetailResponseBodyDomainDetailItems>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("RootDomain") != m.end() && !m["RootDomain"].empty()) {
      rootDomain = make_shared<string>(boost::any_cast<string>(m["RootDomain"]));
    }
    if (m.find("VulCount") != m.end() && !m["VulCount"].empty()) {
      vulCount = make_shared<long>(boost::any_cast<long>(m["VulCount"]));
    }
  }


  virtual ~DescribeDomainDetailResponseBody() = default;
};
class DescribeDomainDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeDomainDetailResponseBody> body{};

  DescribeDomainDetailResponse() {}

  explicit DescribeDomainDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeDomainDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeDomainDetailResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeDomainDetailResponse() = default;
};
class DescribeDomainListRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> domainType{};
  shared_ptr<string> fuzzyDomain{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> sourceIp{};

  DescribeDomainListRequest() {}

  explicit DescribeDomainListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (domainType) {
      res["DomainType"] = boost::any(*domainType);
    }
    if (fuzzyDomain) {
      res["FuzzyDomain"] = boost::any(*fuzzyDomain);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DomainType") != m.end() && !m["DomainType"].empty()) {
      domainType = make_shared<string>(boost::any_cast<string>(m["DomainType"]));
    }
    if (m.find("FuzzyDomain") != m.end() && !m["FuzzyDomain"].empty()) {
      fuzzyDomain = make_shared<string>(boost::any_cast<string>(m["FuzzyDomain"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeDomainListRequest() = default;
};
class DescribeDomainListResponseBodyDomainListResponseList : public Darabonba::Model {
public:
  shared_ptr<string> domain{};
  shared_ptr<string> ipList{};

  DescribeDomainListResponseBodyDomainListResponseList() {}

  explicit DescribeDomainListResponseBodyDomainListResponseList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (domain) {
      res["Domain"] = boost::any(*domain);
    }
    if (ipList) {
      res["IpList"] = boost::any(*ipList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Domain") != m.end() && !m["Domain"].empty()) {
      domain = make_shared<string>(boost::any_cast<string>(m["Domain"]));
    }
    if (m.find("IpList") != m.end() && !m["IpList"].empty()) {
      ipList = make_shared<string>(boost::any_cast<string>(m["IpList"]));
    }
  }


  virtual ~DescribeDomainListResponseBodyDomainListResponseList() = default;
};
class DescribeDomainListResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeDomainListResponseBodyPageInfo() {}

  explicit DescribeDomainListResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeDomainListResponseBodyPageInfo() = default;
};
class DescribeDomainListResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeDomainListResponseBodyDomainListResponseList>> domainListResponseList{};
  shared_ptr<DescribeDomainListResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};

  DescribeDomainListResponseBody() {}

  explicit DescribeDomainListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (domainListResponseList) {
      vector<boost::any> temp1;
      for(auto item1:*domainListResponseList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["DomainListResponseList"] = boost::any(temp1);
    }
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DomainListResponseList") != m.end() && !m["DomainListResponseList"].empty()) {
      if (typeid(vector<boost::any>) == m["DomainListResponseList"].type()) {
        vector<DescribeDomainListResponseBodyDomainListResponseList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["DomainListResponseList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeDomainListResponseBodyDomainListResponseList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        domainListResponseList = make_shared<vector<DescribeDomainListResponseBodyDomainListResponseList>>(expect1);
      }
    }
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeDomainListResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeDomainListResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeDomainListResponseBody() = default;
};
class DescribeDomainListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeDomainListResponseBody> body{};

  DescribeDomainListResponse() {}

  explicit DescribeDomainListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeDomainListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeDomainListResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeDomainListResponse() = default;
};
class DescribeEmgVulItemRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> lang{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> riskStatus{};
  shared_ptr<string> scanType{};
  shared_ptr<string> vulName{};

  DescribeEmgVulItemRequest() {}

  explicit DescribeEmgVulItemRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (riskStatus) {
      res["RiskStatus"] = boost::any(*riskStatus);
    }
    if (scanType) {
      res["ScanType"] = boost::any(*scanType);
    }
    if (vulName) {
      res["VulName"] = boost::any(*vulName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RiskStatus") != m.end() && !m["RiskStatus"].empty()) {
      riskStatus = make_shared<string>(boost::any_cast<string>(m["RiskStatus"]));
    }
    if (m.find("ScanType") != m.end() && !m["ScanType"].empty()) {
      scanType = make_shared<string>(boost::any_cast<string>(m["ScanType"]));
    }
    if (m.find("VulName") != m.end() && !m["VulName"].empty()) {
      vulName = make_shared<string>(boost::any_cast<string>(m["VulName"]));
    }
  }


  virtual ~DescribeEmgVulItemRequest() = default;
};
class DescribeEmgVulItemResponseBodyGroupedVulItems : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<long> gmtLastCheck{};
  shared_ptr<long> gmtPublish{};
  shared_ptr<string> name{};
  shared_ptr<long> pendingCount{};
  shared_ptr<long> progress{};
  shared_ptr<long> status{};
  shared_ptr<string> type{};

  DescribeEmgVulItemResponseBodyGroupedVulItems() {}

  explicit DescribeEmgVulItemResponseBodyGroupedVulItems(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (gmtLastCheck) {
      res["GmtLastCheck"] = boost::any(*gmtLastCheck);
    }
    if (gmtPublish) {
      res["GmtPublish"] = boost::any(*gmtPublish);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (pendingCount) {
      res["PendingCount"] = boost::any(*pendingCount);
    }
    if (progress) {
      res["Progress"] = boost::any(*progress);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("GmtLastCheck") != m.end() && !m["GmtLastCheck"].empty()) {
      gmtLastCheck = make_shared<long>(boost::any_cast<long>(m["GmtLastCheck"]));
    }
    if (m.find("GmtPublish") != m.end() && !m["GmtPublish"].empty()) {
      gmtPublish = make_shared<long>(boost::any_cast<long>(m["GmtPublish"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("PendingCount") != m.end() && !m["PendingCount"].empty()) {
      pendingCount = make_shared<long>(boost::any_cast<long>(m["PendingCount"]));
    }
    if (m.find("Progress") != m.end() && !m["Progress"].empty()) {
      progress = make_shared<long>(boost::any_cast<long>(m["Progress"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribeEmgVulItemResponseBodyGroupedVulItems() = default;
};
class DescribeEmgVulItemResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<DescribeEmgVulItemResponseBodyGroupedVulItems>> groupedVulItems{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};

  DescribeEmgVulItemResponseBody() {}

  explicit DescribeEmgVulItemResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (groupedVulItems) {
      vector<boost::any> temp1;
      for(auto item1:*groupedVulItems){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["GroupedVulItems"] = boost::any(temp1);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("GroupedVulItems") != m.end() && !m["GroupedVulItems"].empty()) {
      if (typeid(vector<boost::any>) == m["GroupedVulItems"].type()) {
        vector<DescribeEmgVulItemResponseBodyGroupedVulItems> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["GroupedVulItems"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeEmgVulItemResponseBodyGroupedVulItems model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        groupedVulItems = make_shared<vector<DescribeEmgVulItemResponseBodyGroupedVulItems>>(expect1);
      }
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeEmgVulItemResponseBody() = default;
};
class DescribeEmgVulItemResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeEmgVulItemResponseBody> body{};

  DescribeEmgVulItemResponse() {}

  explicit DescribeEmgVulItemResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeEmgVulItemResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeEmgVulItemResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeEmgVulItemResponse() = default;
};
class DescribeExportInfoRequest : public Darabonba::Model {
public:
  shared_ptr<long> exportId{};

  DescribeExportInfoRequest() {}

  explicit DescribeExportInfoRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (exportId) {
      res["ExportId"] = boost::any(*exportId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ExportId") != m.end() && !m["ExportId"].empty()) {
      exportId = make_shared<long>(boost::any_cast<long>(m["ExportId"]));
    }
  }


  virtual ~DescribeExportInfoRequest() = default;
};
class DescribeExportInfoResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> currentCount{};
  shared_ptr<string> exportStatus{};
  shared_ptr<string> fileName{};
  shared_ptr<long> id{};
  shared_ptr<string> link{};
  shared_ptr<string> message{};
  shared_ptr<long> progress{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};

  DescribeExportInfoResponseBody() {}

  explicit DescribeExportInfoResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentCount) {
      res["CurrentCount"] = boost::any(*currentCount);
    }
    if (exportStatus) {
      res["ExportStatus"] = boost::any(*exportStatus);
    }
    if (fileName) {
      res["FileName"] = boost::any(*fileName);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (link) {
      res["Link"] = boost::any(*link);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (progress) {
      res["Progress"] = boost::any(*progress);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentCount") != m.end() && !m["CurrentCount"].empty()) {
      currentCount = make_shared<long>(boost::any_cast<long>(m["CurrentCount"]));
    }
    if (m.find("ExportStatus") != m.end() && !m["ExportStatus"].empty()) {
      exportStatus = make_shared<string>(boost::any_cast<string>(m["ExportStatus"]));
    }
    if (m.find("FileName") != m.end() && !m["FileName"].empty()) {
      fileName = make_shared<string>(boost::any_cast<string>(m["FileName"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("Link") != m.end() && !m["Link"].empty()) {
      link = make_shared<string>(boost::any_cast<string>(m["Link"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("Progress") != m.end() && !m["Progress"].empty()) {
      progress = make_shared<long>(boost::any_cast<long>(m["Progress"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeExportInfoResponseBody() = default;
};
class DescribeExportInfoResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeExportInfoResponseBody> body{};

  DescribeExportInfoResponse() {}

  explicit DescribeExportInfoResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeExportInfoResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeExportInfoResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeExportInfoResponse() = default;
};
class DescribeExposedInstanceCriteriaRequest : public Darabonba::Model {
public:
  shared_ptr<string> value{};

  DescribeExposedInstanceCriteriaRequest() {}

  explicit DescribeExposedInstanceCriteriaRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (value) {
      res["Value"] = boost::any(*value);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Value") != m.end() && !m["Value"].empty()) {
      value = make_shared<string>(boost::any_cast<string>(m["Value"]));
    }
  }


  virtual ~DescribeExposedInstanceCriteriaRequest() = default;
};
class DescribeExposedInstanceCriteriaResponseBodyCriteriaList : public Darabonba::Model {
public:
  shared_ptr<string> name{};
  shared_ptr<string> type{};
  shared_ptr<string> values{};

  DescribeExposedInstanceCriteriaResponseBodyCriteriaList() {}

  explicit DescribeExposedInstanceCriteriaResponseBodyCriteriaList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (values) {
      res["Values"] = boost::any(*values);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Values") != m.end() && !m["Values"].empty()) {
      values = make_shared<string>(boost::any_cast<string>(m["Values"]));
    }
  }


  virtual ~DescribeExposedInstanceCriteriaResponseBodyCriteriaList() = default;
};
class DescribeExposedInstanceCriteriaResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeExposedInstanceCriteriaResponseBodyCriteriaList>> criteriaList{};
  shared_ptr<string> requestId{};

  DescribeExposedInstanceCriteriaResponseBody() {}

  explicit DescribeExposedInstanceCriteriaResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (criteriaList) {
      vector<boost::any> temp1;
      for(auto item1:*criteriaList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["CriteriaList"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CriteriaList") != m.end() && !m["CriteriaList"].empty()) {
      if (typeid(vector<boost::any>) == m["CriteriaList"].type()) {
        vector<DescribeExposedInstanceCriteriaResponseBodyCriteriaList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["CriteriaList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeExposedInstanceCriteriaResponseBodyCriteriaList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        criteriaList = make_shared<vector<DescribeExposedInstanceCriteriaResponseBodyCriteriaList>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeExposedInstanceCriteriaResponseBody() = default;
};
class DescribeExposedInstanceCriteriaResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeExposedInstanceCriteriaResponseBody> body{};

  DescribeExposedInstanceCriteriaResponse() {}

  explicit DescribeExposedInstanceCriteriaResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeExposedInstanceCriteriaResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeExposedInstanceCriteriaResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeExposedInstanceCriteriaResponse() = default;
};
class DescribeExposedInstanceDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> uuid{};

  DescribeExposedInstanceDetailRequest() {}

  explicit DescribeExposedInstanceDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeExposedInstanceDetailRequest() = default;
};
class DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<string> name{};
  shared_ptr<string> necessity{};
  shared_ptr<string> type{};
  shared_ptr<string> uuid{};

  DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList() {}

  explicit DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (necessity) {
      res["Necessity"] = boost::any(*necessity);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Necessity") != m.end() && !m["Necessity"].empty()) {
      necessity = make_shared<string>(boost::any_cast<string>(m["Necessity"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList() = default;
};
class DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<string> name{};
  shared_ptr<string> necessity{};
  shared_ptr<string> type{};
  shared_ptr<string> uuid{};

  DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList() {}

  explicit DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (necessity) {
      res["Necessity"] = boost::any(*necessity);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Necessity") != m.end() && !m["Necessity"].empty()) {
      necessity = make_shared<string>(boost::any_cast<string>(m["Necessity"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList() = default;
};
class DescribeExposedInstanceDetailResponseBodyExposedChains : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList>> allVulList{};
  shared_ptr<string> exposureComponent{};
  shared_ptr<string> exposureIp{};
  shared_ptr<string> exposurePort{};
  shared_ptr<string> exposureType{};
  shared_ptr<string> exposureTypeId{};
  shared_ptr<string> groupNo{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<vector<DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList>> realVulList{};
  shared_ptr<string> regionId{};
  shared_ptr<string> uuid{};

  DescribeExposedInstanceDetailResponseBodyExposedChains() {}

  explicit DescribeExposedInstanceDetailResponseBodyExposedChains(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (allVulList) {
      vector<boost::any> temp1;
      for(auto item1:*allVulList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["AllVulList"] = boost::any(temp1);
    }
    if (exposureComponent) {
      res["ExposureComponent"] = boost::any(*exposureComponent);
    }
    if (exposureIp) {
      res["ExposureIp"] = boost::any(*exposureIp);
    }
    if (exposurePort) {
      res["ExposurePort"] = boost::any(*exposurePort);
    }
    if (exposureType) {
      res["ExposureType"] = boost::any(*exposureType);
    }
    if (exposureTypeId) {
      res["ExposureTypeId"] = boost::any(*exposureTypeId);
    }
    if (groupNo) {
      res["GroupNo"] = boost::any(*groupNo);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (realVulList) {
      vector<boost::any> temp1;
      for(auto item1:*realVulList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["RealVulList"] = boost::any(temp1);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AllVulList") != m.end() && !m["AllVulList"].empty()) {
      if (typeid(vector<boost::any>) == m["AllVulList"].type()) {
        vector<DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["AllVulList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        allVulList = make_shared<vector<DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList>>(expect1);
      }
    }
    if (m.find("ExposureComponent") != m.end() && !m["ExposureComponent"].empty()) {
      exposureComponent = make_shared<string>(boost::any_cast<string>(m["ExposureComponent"]));
    }
    if (m.find("ExposureIp") != m.end() && !m["ExposureIp"].empty()) {
      exposureIp = make_shared<string>(boost::any_cast<string>(m["ExposureIp"]));
    }
    if (m.find("ExposurePort") != m.end() && !m["ExposurePort"].empty()) {
      exposurePort = make_shared<string>(boost::any_cast<string>(m["ExposurePort"]));
    }
    if (m.find("ExposureType") != m.end() && !m["ExposureType"].empty()) {
      exposureType = make_shared<string>(boost::any_cast<string>(m["ExposureType"]));
    }
    if (m.find("ExposureTypeId") != m.end() && !m["ExposureTypeId"].empty()) {
      exposureTypeId = make_shared<string>(boost::any_cast<string>(m["ExposureTypeId"]));
    }
    if (m.find("GroupNo") != m.end() && !m["GroupNo"].empty()) {
      groupNo = make_shared<string>(boost::any_cast<string>(m["GroupNo"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("RealVulList") != m.end() && !m["RealVulList"].empty()) {
      if (typeid(vector<boost::any>) == m["RealVulList"].type()) {
        vector<DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["RealVulList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        realVulList = make_shared<vector<DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList>>(expect1);
      }
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeExposedInstanceDetailResponseBodyExposedChains() = default;
};
class DescribeExposedInstanceDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeExposedInstanceDetailResponseBodyExposedChains>> exposedChains{};
  shared_ptr<string> requestId{};

  DescribeExposedInstanceDetailResponseBody() {}

  explicit DescribeExposedInstanceDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (exposedChains) {
      vector<boost::any> temp1;
      for(auto item1:*exposedChains){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["ExposedChains"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ExposedChains") != m.end() && !m["ExposedChains"].empty()) {
      if (typeid(vector<boost::any>) == m["ExposedChains"].type()) {
        vector<DescribeExposedInstanceDetailResponseBodyExposedChains> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["ExposedChains"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeExposedInstanceDetailResponseBodyExposedChains model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        exposedChains = make_shared<vector<DescribeExposedInstanceDetailResponseBodyExposedChains>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeExposedInstanceDetailResponseBody() = default;
};
class DescribeExposedInstanceDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeExposedInstanceDetailResponseBody> body{};

  DescribeExposedInstanceDetailResponse() {}

  explicit DescribeExposedInstanceDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeExposedInstanceDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeExposedInstanceDetailResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeExposedInstanceDetailResponse() = default;
};
class DescribeExposedInstanceListRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> exposureComponent{};
  shared_ptr<string> exposureIp{};
  shared_ptr<string> exposurePort{};
  shared_ptr<long> groupId{};
  shared_ptr<bool> healthStatus{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<long> pageSize{};
  shared_ptr<bool> vulStatus{};

  DescribeExposedInstanceListRequest() {}

  explicit DescribeExposedInstanceListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (exposureComponent) {
      res["ExposureComponent"] = boost::any(*exposureComponent);
    }
    if (exposureIp) {
      res["ExposureIp"] = boost::any(*exposureIp);
    }
    if (exposurePort) {
      res["ExposurePort"] = boost::any(*exposurePort);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (healthStatus) {
      res["HealthStatus"] = boost::any(*healthStatus);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (vulStatus) {
      res["VulStatus"] = boost::any(*vulStatus);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("ExposureComponent") != m.end() && !m["ExposureComponent"].empty()) {
      exposureComponent = make_shared<string>(boost::any_cast<string>(m["ExposureComponent"]));
    }
    if (m.find("ExposureIp") != m.end() && !m["ExposureIp"].empty()) {
      exposureIp = make_shared<string>(boost::any_cast<string>(m["ExposureIp"]));
    }
    if (m.find("ExposurePort") != m.end() && !m["ExposurePort"].empty()) {
      exposurePort = make_shared<string>(boost::any_cast<string>(m["ExposurePort"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("HealthStatus") != m.end() && !m["HealthStatus"].empty()) {
      healthStatus = make_shared<bool>(boost::any_cast<bool>(m["HealthStatus"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("VulStatus") != m.end() && !m["VulStatus"].empty()) {
      vulStatus = make_shared<bool>(boost::any_cast<bool>(m["VulStatus"]));
    }
  }


  virtual ~DescribeExposedInstanceListRequest() = default;
};
class DescribeExposedInstanceListResponseBodyExposedInstances : public Darabonba::Model {
public:
  shared_ptr<long> asapVulCount{};
  shared_ptr<long> exploitHealthCount{};
  shared_ptr<string> exposureComponent{};
  shared_ptr<string> exposureIp{};
  shared_ptr<string> exposurePort{};
  shared_ptr<string> exposureType{};
  shared_ptr<string> exposureTypeId{};
  shared_ptr<long> groupId{};
  shared_ptr<string> groupName{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<long> laterVulCount{};
  shared_ptr<long> nntfVulCount{};
  shared_ptr<string> regionId{};
  shared_ptr<long> totalVulCount{};
  shared_ptr<string> uuid{};

  DescribeExposedInstanceListResponseBodyExposedInstances() {}

  explicit DescribeExposedInstanceListResponseBodyExposedInstances(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (asapVulCount) {
      res["AsapVulCount"] = boost::any(*asapVulCount);
    }
    if (exploitHealthCount) {
      res["ExploitHealthCount"] = boost::any(*exploitHealthCount);
    }
    if (exposureComponent) {
      res["ExposureComponent"] = boost::any(*exposureComponent);
    }
    if (exposureIp) {
      res["ExposureIp"] = boost::any(*exposureIp);
    }
    if (exposurePort) {
      res["ExposurePort"] = boost::any(*exposurePort);
    }
    if (exposureType) {
      res["ExposureType"] = boost::any(*exposureType);
    }
    if (exposureTypeId) {
      res["ExposureTypeId"] = boost::any(*exposureTypeId);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (groupName) {
      res["GroupName"] = boost::any(*groupName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (laterVulCount) {
      res["LaterVulCount"] = boost::any(*laterVulCount);
    }
    if (nntfVulCount) {
      res["NntfVulCount"] = boost::any(*nntfVulCount);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    if (totalVulCount) {
      res["TotalVulCount"] = boost::any(*totalVulCount);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AsapVulCount") != m.end() && !m["AsapVulCount"].empty()) {
      asapVulCount = make_shared<long>(boost::any_cast<long>(m["AsapVulCount"]));
    }
    if (m.find("ExploitHealthCount") != m.end() && !m["ExploitHealthCount"].empty()) {
      exploitHealthCount = make_shared<long>(boost::any_cast<long>(m["ExploitHealthCount"]));
    }
    if (m.find("ExposureComponent") != m.end() && !m["ExposureComponent"].empty()) {
      exposureComponent = make_shared<string>(boost::any_cast<string>(m["ExposureComponent"]));
    }
    if (m.find("ExposureIp") != m.end() && !m["ExposureIp"].empty()) {
      exposureIp = make_shared<string>(boost::any_cast<string>(m["ExposureIp"]));
    }
    if (m.find("ExposurePort") != m.end() && !m["ExposurePort"].empty()) {
      exposurePort = make_shared<string>(boost::any_cast<string>(m["ExposurePort"]));
    }
    if (m.find("ExposureType") != m.end() && !m["ExposureType"].empty()) {
      exposureType = make_shared<string>(boost::any_cast<string>(m["ExposureType"]));
    }
    if (m.find("ExposureTypeId") != m.end() && !m["ExposureTypeId"].empty()) {
      exposureTypeId = make_shared<string>(boost::any_cast<string>(m["ExposureTypeId"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("GroupName") != m.end() && !m["GroupName"].empty()) {
      groupName = make_shared<string>(boost::any_cast<string>(m["GroupName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("LaterVulCount") != m.end() && !m["LaterVulCount"].empty()) {
      laterVulCount = make_shared<long>(boost::any_cast<long>(m["LaterVulCount"]));
    }
    if (m.find("NntfVulCount") != m.end() && !m["NntfVulCount"].empty()) {
      nntfVulCount = make_shared<long>(boost::any_cast<long>(m["NntfVulCount"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
    if (m.find("TotalVulCount") != m.end() && !m["TotalVulCount"].empty()) {
      totalVulCount = make_shared<long>(boost::any_cast<long>(m["TotalVulCount"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeExposedInstanceListResponseBodyExposedInstances() = default;
};
class DescribeExposedInstanceListResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeExposedInstanceListResponseBodyPageInfo() {}

  explicit DescribeExposedInstanceListResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeExposedInstanceListResponseBodyPageInfo() = default;
};
class DescribeExposedInstanceListResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeExposedInstanceListResponseBodyExposedInstances>> exposedInstances{};
  shared_ptr<DescribeExposedInstanceListResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};

  DescribeExposedInstanceListResponseBody() {}

  explicit DescribeExposedInstanceListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (exposedInstances) {
      vector<boost::any> temp1;
      for(auto item1:*exposedInstances){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["ExposedInstances"] = boost::any(temp1);
    }
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ExposedInstances") != m.end() && !m["ExposedInstances"].empty()) {
      if (typeid(vector<boost::any>) == m["ExposedInstances"].type()) {
        vector<DescribeExposedInstanceListResponseBodyExposedInstances> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["ExposedInstances"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeExposedInstanceListResponseBodyExposedInstances model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        exposedInstances = make_shared<vector<DescribeExposedInstanceListResponseBodyExposedInstances>>(expect1);
      }
    }
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeExposedInstanceListResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeExposedInstanceListResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeExposedInstanceListResponseBody() = default;
};
class DescribeExposedInstanceListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeExposedInstanceListResponseBody> body{};

  DescribeExposedInstanceListResponse() {}

  explicit DescribeExposedInstanceListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeExposedInstanceListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeExposedInstanceListResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeExposedInstanceListResponse() = default;
};
class DescribeExposedStatisticsResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> exposedAsapVulCount{};
  shared_ptr<long> exposedComponentCount{};
  shared_ptr<long> exposedInstanceCount{};
  shared_ptr<long> exposedIpCount{};
  shared_ptr<long> exposedLaterVulCount{};
  shared_ptr<long> exposedNntfVulCount{};
  shared_ptr<long> exposedPortCount{};
  shared_ptr<long> exposedWeekPasswordMachineCount{};
  shared_ptr<long> gatewayAssetCount{};
  shared_ptr<string> requestId{};

  DescribeExposedStatisticsResponseBody() {}

  explicit DescribeExposedStatisticsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (exposedAsapVulCount) {
      res["ExposedAsapVulCount"] = boost::any(*exposedAsapVulCount);
    }
    if (exposedComponentCount) {
      res["ExposedComponentCount"] = boost::any(*exposedComponentCount);
    }
    if (exposedInstanceCount) {
      res["ExposedInstanceCount"] = boost::any(*exposedInstanceCount);
    }
    if (exposedIpCount) {
      res["ExposedIpCount"] = boost::any(*exposedIpCount);
    }
    if (exposedLaterVulCount) {
      res["ExposedLaterVulCount"] = boost::any(*exposedLaterVulCount);
    }
    if (exposedNntfVulCount) {
      res["ExposedNntfVulCount"] = boost::any(*exposedNntfVulCount);
    }
    if (exposedPortCount) {
      res["ExposedPortCount"] = boost::any(*exposedPortCount);
    }
    if (exposedWeekPasswordMachineCount) {
      res["ExposedWeekPasswordMachineCount"] = boost::any(*exposedWeekPasswordMachineCount);
    }
    if (gatewayAssetCount) {
      res["GatewayAssetCount"] = boost::any(*gatewayAssetCount);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ExposedAsapVulCount") != m.end() && !m["ExposedAsapVulCount"].empty()) {
      exposedAsapVulCount = make_shared<long>(boost::any_cast<long>(m["ExposedAsapVulCount"]));
    }
    if (m.find("ExposedComponentCount") != m.end() && !m["ExposedComponentCount"].empty()) {
      exposedComponentCount = make_shared<long>(boost::any_cast<long>(m["ExposedComponentCount"]));
    }
    if (m.find("ExposedInstanceCount") != m.end() && !m["ExposedInstanceCount"].empty()) {
      exposedInstanceCount = make_shared<long>(boost::any_cast<long>(m["ExposedInstanceCount"]));
    }
    if (m.find("ExposedIpCount") != m.end() && !m["ExposedIpCount"].empty()) {
      exposedIpCount = make_shared<long>(boost::any_cast<long>(m["ExposedIpCount"]));
    }
    if (m.find("ExposedLaterVulCount") != m.end() && !m["ExposedLaterVulCount"].empty()) {
      exposedLaterVulCount = make_shared<long>(boost::any_cast<long>(m["ExposedLaterVulCount"]));
    }
    if (m.find("ExposedNntfVulCount") != m.end() && !m["ExposedNntfVulCount"].empty()) {
      exposedNntfVulCount = make_shared<long>(boost::any_cast<long>(m["ExposedNntfVulCount"]));
    }
    if (m.find("ExposedPortCount") != m.end() && !m["ExposedPortCount"].empty()) {
      exposedPortCount = make_shared<long>(boost::any_cast<long>(m["ExposedPortCount"]));
    }
    if (m.find("ExposedWeekPasswordMachineCount") != m.end() && !m["ExposedWeekPasswordMachineCount"].empty()) {
      exposedWeekPasswordMachineCount = make_shared<long>(boost::any_cast<long>(m["ExposedWeekPasswordMachineCount"]));
    }
    if (m.find("GatewayAssetCount") != m.end() && !m["GatewayAssetCount"].empty()) {
      gatewayAssetCount = make_shared<long>(boost::any_cast<long>(m["GatewayAssetCount"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeExposedStatisticsResponseBody() = default;
};
class DescribeExposedStatisticsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeExposedStatisticsResponseBody> body{};

  DescribeExposedStatisticsResponse() {}

  explicit DescribeExposedStatisticsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeExposedStatisticsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeExposedStatisticsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeExposedStatisticsResponse() = default;
};
class DescribeExposedStatisticsDetailRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> statisticsType{};
  shared_ptr<string> statisticsTypeGatewayType{};
  shared_ptr<string> statisticsTypeInstanceValue{};

  DescribeExposedStatisticsDetailRequest() {}

  explicit DescribeExposedStatisticsDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (statisticsType) {
      res["StatisticsType"] = boost::any(*statisticsType);
    }
    if (statisticsTypeGatewayType) {
      res["StatisticsTypeGatewayType"] = boost::any(*statisticsTypeGatewayType);
    }
    if (statisticsTypeInstanceValue) {
      res["StatisticsTypeInstanceValue"] = boost::any(*statisticsTypeInstanceValue);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StatisticsType") != m.end() && !m["StatisticsType"].empty()) {
      statisticsType = make_shared<string>(boost::any_cast<string>(m["StatisticsType"]));
    }
    if (m.find("StatisticsTypeGatewayType") != m.end() && !m["StatisticsTypeGatewayType"].empty()) {
      statisticsTypeGatewayType = make_shared<string>(boost::any_cast<string>(m["StatisticsTypeGatewayType"]));
    }
    if (m.find("StatisticsTypeInstanceValue") != m.end() && !m["StatisticsTypeInstanceValue"].empty()) {
      statisticsTypeInstanceValue = make_shared<string>(boost::any_cast<string>(m["StatisticsTypeInstanceValue"]));
    }
  }


  virtual ~DescribeExposedStatisticsDetailRequest() = default;
};
class DescribeExposedStatisticsDetailResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeExposedStatisticsDetailResponseBodyPageInfo() {}

  explicit DescribeExposedStatisticsDetailResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeExposedStatisticsDetailResponseBodyPageInfo() = default;
};
class DescribeExposedStatisticsDetailResponseBodyStatisticsDetails : public Darabonba::Model {
public:
  shared_ptr<long> exposedCount{};
  shared_ptr<string> exposureComponent{};
  shared_ptr<string> exposureIp{};
  shared_ptr<string> exposurePort{};
  shared_ptr<string> exposureType{};
  shared_ptr<string> exposureTypeId{};
  shared_ptr<string> exposureTypeInstanceName{};
  shared_ptr<string> regionId{};

  DescribeExposedStatisticsDetailResponseBodyStatisticsDetails() {}

  explicit DescribeExposedStatisticsDetailResponseBodyStatisticsDetails(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (exposedCount) {
      res["ExposedCount"] = boost::any(*exposedCount);
    }
    if (exposureComponent) {
      res["ExposureComponent"] = boost::any(*exposureComponent);
    }
    if (exposureIp) {
      res["ExposureIp"] = boost::any(*exposureIp);
    }
    if (exposurePort) {
      res["ExposurePort"] = boost::any(*exposurePort);
    }
    if (exposureType) {
      res["ExposureType"] = boost::any(*exposureType);
    }
    if (exposureTypeId) {
      res["ExposureTypeId"] = boost::any(*exposureTypeId);
    }
    if (exposureTypeInstanceName) {
      res["ExposureTypeInstanceName"] = boost::any(*exposureTypeInstanceName);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ExposedCount") != m.end() && !m["ExposedCount"].empty()) {
      exposedCount = make_shared<long>(boost::any_cast<long>(m["ExposedCount"]));
    }
    if (m.find("ExposureComponent") != m.end() && !m["ExposureComponent"].empty()) {
      exposureComponent = make_shared<string>(boost::any_cast<string>(m["ExposureComponent"]));
    }
    if (m.find("ExposureIp") != m.end() && !m["ExposureIp"].empty()) {
      exposureIp = make_shared<string>(boost::any_cast<string>(m["ExposureIp"]));
    }
    if (m.find("ExposurePort") != m.end() && !m["ExposurePort"].empty()) {
      exposurePort = make_shared<string>(boost::any_cast<string>(m["ExposurePort"]));
    }
    if (m.find("ExposureType") != m.end() && !m["ExposureType"].empty()) {
      exposureType = make_shared<string>(boost::any_cast<string>(m["ExposureType"]));
    }
    if (m.find("ExposureTypeId") != m.end() && !m["ExposureTypeId"].empty()) {
      exposureTypeId = make_shared<string>(boost::any_cast<string>(m["ExposureTypeId"]));
    }
    if (m.find("ExposureTypeInstanceName") != m.end() && !m["ExposureTypeInstanceName"].empty()) {
      exposureTypeInstanceName = make_shared<string>(boost::any_cast<string>(m["ExposureTypeInstanceName"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
  }


  virtual ~DescribeExposedStatisticsDetailResponseBodyStatisticsDetails() = default;
};
class DescribeExposedStatisticsDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeExposedStatisticsDetailResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeExposedStatisticsDetailResponseBodyStatisticsDetails>> statisticsDetails{};

  DescribeExposedStatisticsDetailResponseBody() {}

  explicit DescribeExposedStatisticsDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (statisticsDetails) {
      vector<boost::any> temp1;
      for(auto item1:*statisticsDetails){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["StatisticsDetails"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeExposedStatisticsDetailResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeExposedStatisticsDetailResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("StatisticsDetails") != m.end() && !m["StatisticsDetails"].empty()) {
      if (typeid(vector<boost::any>) == m["StatisticsDetails"].type()) {
        vector<DescribeExposedStatisticsDetailResponseBodyStatisticsDetails> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["StatisticsDetails"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeExposedStatisticsDetailResponseBodyStatisticsDetails model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        statisticsDetails = make_shared<vector<DescribeExposedStatisticsDetailResponseBodyStatisticsDetails>>(expect1);
      }
    }
  }


  virtual ~DescribeExposedStatisticsDetailResponseBody() = default;
};
class DescribeExposedStatisticsDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeExposedStatisticsDetailResponseBody> body{};

  DescribeExposedStatisticsDetailResponse() {}

  explicit DescribeExposedStatisticsDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeExposedStatisticsDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeExposedStatisticsDetailResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeExposedStatisticsDetailResponse() = default;
};
class DescribeFieldStatisticsRequest : public Darabonba::Model {
public:
  shared_ptr<string> machineTypes{};
  shared_ptr<string> regionId{};

  DescribeFieldStatisticsRequest() {}

  explicit DescribeFieldStatisticsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (machineTypes) {
      res["MachineTypes"] = boost::any(*machineTypes);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("MachineTypes") != m.end() && !m["MachineTypes"].empty()) {
      machineTypes = make_shared<string>(boost::any_cast<string>(m["MachineTypes"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
  }


  virtual ~DescribeFieldStatisticsRequest() = default;
};
class DescribeFieldStatisticsResponseBodyGroupedFields : public Darabonba::Model {
public:
  shared_ptr<long> aliYunInstanceCount{};
  shared_ptr<long> awsInstanceCount{};
  shared_ptr<long> exposedInstanceCount{};
  shared_ptr<long> generalAssetCount{};
  shared_ptr<long> groupCount{};
  shared_ptr<long> huaweiInstanceCount{};
  shared_ptr<long> idcInstanceCount{};
  shared_ptr<long> importantAssetCount{};
  shared_ptr<long> instanceCount{};
  shared_ptr<long> instanceSyncTaskCount{};
  shared_ptr<long> newInstanceCount{};
  shared_ptr<long> notRunningStatusCount{};
  shared_ptr<long> offlineInstanceCount{};
  shared_ptr<long> pauseInstanceCount{};
  shared_ptr<long> regionCount{};
  shared_ptr<long> riskInstanceCount{};
  shared_ptr<long> tencentInstanceCount{};
  shared_ptr<long> testAssetCount{};
  shared_ptr<long> unprotectedInstanceCount{};
  shared_ptr<long> vpcCount{};

  DescribeFieldStatisticsResponseBodyGroupedFields() {}

  explicit DescribeFieldStatisticsResponseBodyGroupedFields(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliYunInstanceCount) {
      res["AliYunInstanceCount"] = boost::any(*aliYunInstanceCount);
    }
    if (awsInstanceCount) {
      res["AwsInstanceCount"] = boost::any(*awsInstanceCount);
    }
    if (exposedInstanceCount) {
      res["ExposedInstanceCount"] = boost::any(*exposedInstanceCount);
    }
    if (generalAssetCount) {
      res["GeneralAssetCount"] = boost::any(*generalAssetCount);
    }
    if (groupCount) {
      res["GroupCount"] = boost::any(*groupCount);
    }
    if (huaweiInstanceCount) {
      res["HuaweiInstanceCount"] = boost::any(*huaweiInstanceCount);
    }
    if (idcInstanceCount) {
      res["IdcInstanceCount"] = boost::any(*idcInstanceCount);
    }
    if (importantAssetCount) {
      res["ImportantAssetCount"] = boost::any(*importantAssetCount);
    }
    if (instanceCount) {
      res["InstanceCount"] = boost::any(*instanceCount);
    }
    if (instanceSyncTaskCount) {
      res["InstanceSyncTaskCount"] = boost::any(*instanceSyncTaskCount);
    }
    if (newInstanceCount) {
      res["NewInstanceCount"] = boost::any(*newInstanceCount);
    }
    if (notRunningStatusCount) {
      res["NotRunningStatusCount"] = boost::any(*notRunningStatusCount);
    }
    if (offlineInstanceCount) {
      res["OfflineInstanceCount"] = boost::any(*offlineInstanceCount);
    }
    if (pauseInstanceCount) {
      res["PauseInstanceCount"] = boost::any(*pauseInstanceCount);
    }
    if (regionCount) {
      res["RegionCount"] = boost::any(*regionCount);
    }
    if (riskInstanceCount) {
      res["RiskInstanceCount"] = boost::any(*riskInstanceCount);
    }
    if (tencentInstanceCount) {
      res["TencentInstanceCount"] = boost::any(*tencentInstanceCount);
    }
    if (testAssetCount) {
      res["TestAssetCount"] = boost::any(*testAssetCount);
    }
    if (unprotectedInstanceCount) {
      res["UnprotectedInstanceCount"] = boost::any(*unprotectedInstanceCount);
    }
    if (vpcCount) {
      res["VpcCount"] = boost::any(*vpcCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliYunInstanceCount") != m.end() && !m["AliYunInstanceCount"].empty()) {
      aliYunInstanceCount = make_shared<long>(boost::any_cast<long>(m["AliYunInstanceCount"]));
    }
    if (m.find("AwsInstanceCount") != m.end() && !m["AwsInstanceCount"].empty()) {
      awsInstanceCount = make_shared<long>(boost::any_cast<long>(m["AwsInstanceCount"]));
    }
    if (m.find("ExposedInstanceCount") != m.end() && !m["ExposedInstanceCount"].empty()) {
      exposedInstanceCount = make_shared<long>(boost::any_cast<long>(m["ExposedInstanceCount"]));
    }
    if (m.find("GeneralAssetCount") != m.end() && !m["GeneralAssetCount"].empty()) {
      generalAssetCount = make_shared<long>(boost::any_cast<long>(m["GeneralAssetCount"]));
    }
    if (m.find("GroupCount") != m.end() && !m["GroupCount"].empty()) {
      groupCount = make_shared<long>(boost::any_cast<long>(m["GroupCount"]));
    }
    if (m.find("HuaweiInstanceCount") != m.end() && !m["HuaweiInstanceCount"].empty()) {
      huaweiInstanceCount = make_shared<long>(boost::any_cast<long>(m["HuaweiInstanceCount"]));
    }
    if (m.find("IdcInstanceCount") != m.end() && !m["IdcInstanceCount"].empty()) {
      idcInstanceCount = make_shared<long>(boost::any_cast<long>(m["IdcInstanceCount"]));
    }
    if (m.find("ImportantAssetCount") != m.end() && !m["ImportantAssetCount"].empty()) {
      importantAssetCount = make_shared<long>(boost::any_cast<long>(m["ImportantAssetCount"]));
    }
    if (m.find("InstanceCount") != m.end() && !m["InstanceCount"].empty()) {
      instanceCount = make_shared<long>(boost::any_cast<long>(m["InstanceCount"]));
    }
    if (m.find("InstanceSyncTaskCount") != m.end() && !m["InstanceSyncTaskCount"].empty()) {
      instanceSyncTaskCount = make_shared<long>(boost::any_cast<long>(m["InstanceSyncTaskCount"]));
    }
    if (m.find("NewInstanceCount") != m.end() && !m["NewInstanceCount"].empty()) {
      newInstanceCount = make_shared<long>(boost::any_cast<long>(m["NewInstanceCount"]));
    }
    if (m.find("NotRunningStatusCount") != m.end() && !m["NotRunningStatusCount"].empty()) {
      notRunningStatusCount = make_shared<long>(boost::any_cast<long>(m["NotRunningStatusCount"]));
    }
    if (m.find("OfflineInstanceCount") != m.end() && !m["OfflineInstanceCount"].empty()) {
      offlineInstanceCount = make_shared<long>(boost::any_cast<long>(m["OfflineInstanceCount"]));
    }
    if (m.find("PauseInstanceCount") != m.end() && !m["PauseInstanceCount"].empty()) {
      pauseInstanceCount = make_shared<long>(boost::any_cast<long>(m["PauseInstanceCount"]));
    }
    if (m.find("RegionCount") != m.end() && !m["RegionCount"].empty()) {
      regionCount = make_shared<long>(boost::any_cast<long>(m["RegionCount"]));
    }
    if (m.find("RiskInstanceCount") != m.end() && !m["RiskInstanceCount"].empty()) {
      riskInstanceCount = make_shared<long>(boost::any_cast<long>(m["RiskInstanceCount"]));
    }
    if (m.find("TencentInstanceCount") != m.end() && !m["TencentInstanceCount"].empty()) {
      tencentInstanceCount = make_shared<long>(boost::any_cast<long>(m["TencentInstanceCount"]));
    }
    if (m.find("TestAssetCount") != m.end() && !m["TestAssetCount"].empty()) {
      testAssetCount = make_shared<long>(boost::any_cast<long>(m["TestAssetCount"]));
    }
    if (m.find("UnprotectedInstanceCount") != m.end() && !m["UnprotectedInstanceCount"].empty()) {
      unprotectedInstanceCount = make_shared<long>(boost::any_cast<long>(m["UnprotectedInstanceCount"]));
    }
    if (m.find("VpcCount") != m.end() && !m["VpcCount"].empty()) {
      vpcCount = make_shared<long>(boost::any_cast<long>(m["VpcCount"]));
    }
  }


  virtual ~DescribeFieldStatisticsResponseBodyGroupedFields() = default;
};
class DescribeFieldStatisticsResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeFieldStatisticsResponseBodyGroupedFields> groupedFields{};
  shared_ptr<string> requestId{};

  DescribeFieldStatisticsResponseBody() {}

  explicit DescribeFieldStatisticsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupedFields) {
      res["GroupedFields"] = groupedFields ? boost::any(groupedFields->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupedFields") != m.end() && !m["GroupedFields"].empty()) {
      if (typeid(map<string, boost::any>) == m["GroupedFields"].type()) {
        DescribeFieldStatisticsResponseBodyGroupedFields model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["GroupedFields"]));
        groupedFields = make_shared<DescribeFieldStatisticsResponseBodyGroupedFields>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeFieldStatisticsResponseBody() = default;
};
class DescribeFieldStatisticsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeFieldStatisticsResponseBody> body{};

  DescribeFieldStatisticsResponse() {}

  explicit DescribeFieldStatisticsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeFieldStatisticsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeFieldStatisticsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeFieldStatisticsResponse() = default;
};
class DescribeGroupedContainerInstancesRequest : public Darabonba::Model {
public:
  shared_ptr<string> criteria{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> fieldValue{};
  shared_ptr<string> groupField{};
  shared_ptr<string> logicalExp{};
  shared_ptr<long> pageSize{};

  DescribeGroupedContainerInstancesRequest() {}

  explicit DescribeGroupedContainerInstancesRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (criteria) {
      res["Criteria"] = boost::any(*criteria);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (fieldValue) {
      res["FieldValue"] = boost::any(*fieldValue);
    }
    if (groupField) {
      res["GroupField"] = boost::any(*groupField);
    }
    if (logicalExp) {
      res["LogicalExp"] = boost::any(*logicalExp);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Criteria") != m.end() && !m["Criteria"].empty()) {
      criteria = make_shared<string>(boost::any_cast<string>(m["Criteria"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("FieldValue") != m.end() && !m["FieldValue"].empty()) {
      fieldValue = make_shared<string>(boost::any_cast<string>(m["FieldValue"]));
    }
    if (m.find("GroupField") != m.end() && !m["GroupField"].empty()) {
      groupField = make_shared<string>(boost::any_cast<string>(m["GroupField"]));
    }
    if (m.find("LogicalExp") != m.end() && !m["LogicalExp"].empty()) {
      logicalExp = make_shared<string>(boost::any_cast<string>(m["LogicalExp"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
  }


  virtual ~DescribeGroupedContainerInstancesRequest() = default;
};
class DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList : public Darabonba::Model {
public:
  shared_ptr<long> alarmCount{};
  shared_ptr<string> appName{};
  shared_ptr<string> clusterId{};
  shared_ptr<string> clusterName{};
  shared_ptr<string> clusterType{};
  shared_ptr<long> createTime{};
  shared_ptr<string> custerState{};
  shared_ptr<long> hcCount{};
  shared_ptr<string> hostIp{};
  shared_ptr<string> image{};
  shared_ptr<string> imageDigest{};
  shared_ptr<string> imageRepoName{};
  shared_ptr<string> imageRepoNamespace{};
  shared_ptr<string> imageRepoTag{};
  shared_ptr<string> imageUuid{};
  shared_ptr<long> instanceCount{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> namespace_{};
  shared_ptr<string> pod{};
  shared_ptr<string> podIp{};
  shared_ptr<string> regionId{};
  shared_ptr<long> riskInstanceCount{};
  shared_ptr<string> riskLevel{};
  shared_ptr<string> riskStatus{};
  shared_ptr<long> vulCount{};

  DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList() {}

  explicit DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (alarmCount) {
      res["AlarmCount"] = boost::any(*alarmCount);
    }
    if (appName) {
      res["AppName"] = boost::any(*appName);
    }
    if (clusterId) {
      res["ClusterId"] = boost::any(*clusterId);
    }
    if (clusterName) {
      res["ClusterName"] = boost::any(*clusterName);
    }
    if (clusterType) {
      res["ClusterType"] = boost::any(*clusterType);
    }
    if (createTime) {
      res["CreateTime"] = boost::any(*createTime);
    }
    if (custerState) {
      res["CusterState"] = boost::any(*custerState);
    }
    if (hcCount) {
      res["HcCount"] = boost::any(*hcCount);
    }
    if (hostIp) {
      res["HostIp"] = boost::any(*hostIp);
    }
    if (image) {
      res["Image"] = boost::any(*image);
    }
    if (imageDigest) {
      res["ImageDigest"] = boost::any(*imageDigest);
    }
    if (imageRepoName) {
      res["ImageRepoName"] = boost::any(*imageRepoName);
    }
    if (imageRepoNamespace) {
      res["ImageRepoNamespace"] = boost::any(*imageRepoNamespace);
    }
    if (imageRepoTag) {
      res["ImageRepoTag"] = boost::any(*imageRepoTag);
    }
    if (imageUuid) {
      res["ImageUuid"] = boost::any(*imageUuid);
    }
    if (instanceCount) {
      res["InstanceCount"] = boost::any(*instanceCount);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (namespace_) {
      res["Namespace"] = boost::any(*namespace_);
    }
    if (pod) {
      res["Pod"] = boost::any(*pod);
    }
    if (podIp) {
      res["PodIp"] = boost::any(*podIp);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    if (riskInstanceCount) {
      res["RiskInstanceCount"] = boost::any(*riskInstanceCount);
    }
    if (riskLevel) {
      res["RiskLevel"] = boost::any(*riskLevel);
    }
    if (riskStatus) {
      res["RiskStatus"] = boost::any(*riskStatus);
    }
    if (vulCount) {
      res["VulCount"] = boost::any(*vulCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AlarmCount") != m.end() && !m["AlarmCount"].empty()) {
      alarmCount = make_shared<long>(boost::any_cast<long>(m["AlarmCount"]));
    }
    if (m.find("AppName") != m.end() && !m["AppName"].empty()) {
      appName = make_shared<string>(boost::any_cast<string>(m["AppName"]));
    }
    if (m.find("ClusterId") != m.end() && !m["ClusterId"].empty()) {
      clusterId = make_shared<string>(boost::any_cast<string>(m["ClusterId"]));
    }
    if (m.find("ClusterName") != m.end() && !m["ClusterName"].empty()) {
      clusterName = make_shared<string>(boost::any_cast<string>(m["ClusterName"]));
    }
    if (m.find("ClusterType") != m.end() && !m["ClusterType"].empty()) {
      clusterType = make_shared<string>(boost::any_cast<string>(m["ClusterType"]));
    }
    if (m.find("CreateTime") != m.end() && !m["CreateTime"].empty()) {
      createTime = make_shared<long>(boost::any_cast<long>(m["CreateTime"]));
    }
    if (m.find("CusterState") != m.end() && !m["CusterState"].empty()) {
      custerState = make_shared<string>(boost::any_cast<string>(m["CusterState"]));
    }
    if (m.find("HcCount") != m.end() && !m["HcCount"].empty()) {
      hcCount = make_shared<long>(boost::any_cast<long>(m["HcCount"]));
    }
    if (m.find("HostIp") != m.end() && !m["HostIp"].empty()) {
      hostIp = make_shared<string>(boost::any_cast<string>(m["HostIp"]));
    }
    if (m.find("Image") != m.end() && !m["Image"].empty()) {
      image = make_shared<string>(boost::any_cast<string>(m["Image"]));
    }
    if (m.find("ImageDigest") != m.end() && !m["ImageDigest"].empty()) {
      imageDigest = make_shared<string>(boost::any_cast<string>(m["ImageDigest"]));
    }
    if (m.find("ImageRepoName") != m.end() && !m["ImageRepoName"].empty()) {
      imageRepoName = make_shared<string>(boost::any_cast<string>(m["ImageRepoName"]));
    }
    if (m.find("ImageRepoNamespace") != m.end() && !m["ImageRepoNamespace"].empty()) {
      imageRepoNamespace = make_shared<string>(boost::any_cast<string>(m["ImageRepoNamespace"]));
    }
    if (m.find("ImageRepoTag") != m.end() && !m["ImageRepoTag"].empty()) {
      imageRepoTag = make_shared<string>(boost::any_cast<string>(m["ImageRepoTag"]));
    }
    if (m.find("ImageUuid") != m.end() && !m["ImageUuid"].empty()) {
      imageUuid = make_shared<string>(boost::any_cast<string>(m["ImageUuid"]));
    }
    if (m.find("InstanceCount") != m.end() && !m["InstanceCount"].empty()) {
      instanceCount = make_shared<long>(boost::any_cast<long>(m["InstanceCount"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("Namespace") != m.end() && !m["Namespace"].empty()) {
      namespace_ = make_shared<string>(boost::any_cast<string>(m["Namespace"]));
    }
    if (m.find("Pod") != m.end() && !m["Pod"].empty()) {
      pod = make_shared<string>(boost::any_cast<string>(m["Pod"]));
    }
    if (m.find("PodIp") != m.end() && !m["PodIp"].empty()) {
      podIp = make_shared<string>(boost::any_cast<string>(m["PodIp"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
    if (m.find("RiskInstanceCount") != m.end() && !m["RiskInstanceCount"].empty()) {
      riskInstanceCount = make_shared<long>(boost::any_cast<long>(m["RiskInstanceCount"]));
    }
    if (m.find("RiskLevel") != m.end() && !m["RiskLevel"].empty()) {
      riskLevel = make_shared<string>(boost::any_cast<string>(m["RiskLevel"]));
    }
    if (m.find("RiskStatus") != m.end() && !m["RiskStatus"].empty()) {
      riskStatus = make_shared<string>(boost::any_cast<string>(m["RiskStatus"]));
    }
    if (m.find("VulCount") != m.end() && !m["VulCount"].empty()) {
      vulCount = make_shared<long>(boost::any_cast<long>(m["VulCount"]));
    }
  }


  virtual ~DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList() = default;
};
class DescribeGroupedContainerInstancesResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeGroupedContainerInstancesResponseBodyPageInfo() {}

  explicit DescribeGroupedContainerInstancesResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeGroupedContainerInstancesResponseBodyPageInfo() = default;
};
class DescribeGroupedContainerInstancesResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList>> groupedContainerInstanceList{};
  shared_ptr<DescribeGroupedContainerInstancesResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};

  DescribeGroupedContainerInstancesResponseBody() {}

  explicit DescribeGroupedContainerInstancesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupedContainerInstanceList) {
      vector<boost::any> temp1;
      for(auto item1:*groupedContainerInstanceList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["GroupedContainerInstanceList"] = boost::any(temp1);
    }
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupedContainerInstanceList") != m.end() && !m["GroupedContainerInstanceList"].empty()) {
      if (typeid(vector<boost::any>) == m["GroupedContainerInstanceList"].type()) {
        vector<DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["GroupedContainerInstanceList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        groupedContainerInstanceList = make_shared<vector<DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList>>(expect1);
      }
    }
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeGroupedContainerInstancesResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeGroupedContainerInstancesResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeGroupedContainerInstancesResponseBody() = default;
};
class DescribeGroupedContainerInstancesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeGroupedContainerInstancesResponseBody> body{};

  DescribeGroupedContainerInstancesResponse() {}

  explicit DescribeGroupedContainerInstancesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeGroupedContainerInstancesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeGroupedContainerInstancesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeGroupedContainerInstancesResponse() = default;
};
class DescribeGroupedInstancesRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> fieldValue{};
  shared_ptr<string> groupField{};
  shared_ptr<string> lang{};
  shared_ptr<string> machineTypes{};
  shared_ptr<bool> noPage{};
  shared_ptr<long> pageSize{};

  DescribeGroupedInstancesRequest() {}

  explicit DescribeGroupedInstancesRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (fieldValue) {
      res["FieldValue"] = boost::any(*fieldValue);
    }
    if (groupField) {
      res["GroupField"] = boost::any(*groupField);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (machineTypes) {
      res["MachineTypes"] = boost::any(*machineTypes);
    }
    if (noPage) {
      res["NoPage"] = boost::any(*noPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("FieldValue") != m.end() && !m["FieldValue"].empty()) {
      fieldValue = make_shared<string>(boost::any_cast<string>(m["FieldValue"]));
    }
    if (m.find("GroupField") != m.end() && !m["GroupField"].empty()) {
      groupField = make_shared<string>(boost::any_cast<string>(m["GroupField"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("MachineTypes") != m.end() && !m["MachineTypes"].empty()) {
      machineTypes = make_shared<string>(boost::any_cast<string>(m["MachineTypes"]));
    }
    if (m.find("NoPage") != m.end() && !m["NoPage"].empty()) {
      noPage = make_shared<bool>(boost::any_cast<bool>(m["NoPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
  }


  virtual ~DescribeGroupedInstancesRequest() = default;
};
class DescribeGroupedInstancesResponseBodyInstances : public Darabonba::Model {
public:
  shared_ptr<long> asapVulInstanceCount{};
  shared_ptr<string> fieldAliasName{};
  shared_ptr<long> groupFlag{};
  shared_ptr<string> instanceCount{};
  shared_ptr<string> riskInstanceCount{};
  shared_ptr<string> unProtectedInstanceCount{};

  DescribeGroupedInstancesResponseBodyInstances() {}

  explicit DescribeGroupedInstancesResponseBodyInstances(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (asapVulInstanceCount) {
      res["AsapVulInstanceCount"] = boost::any(*asapVulInstanceCount);
    }
    if (fieldAliasName) {
      res["FieldAliasName"] = boost::any(*fieldAliasName);
    }
    if (groupFlag) {
      res["GroupFlag"] = boost::any(*groupFlag);
    }
    if (instanceCount) {
      res["InstanceCount"] = boost::any(*instanceCount);
    }
    if (riskInstanceCount) {
      res["RiskInstanceCount"] = boost::any(*riskInstanceCount);
    }
    if (unProtectedInstanceCount) {
      res["UnProtectedInstanceCount"] = boost::any(*unProtectedInstanceCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AsapVulInstanceCount") != m.end() && !m["AsapVulInstanceCount"].empty()) {
      asapVulInstanceCount = make_shared<long>(boost::any_cast<long>(m["AsapVulInstanceCount"]));
    }
    if (m.find("FieldAliasName") != m.end() && !m["FieldAliasName"].empty()) {
      fieldAliasName = make_shared<string>(boost::any_cast<string>(m["FieldAliasName"]));
    }
    if (m.find("GroupFlag") != m.end() && !m["GroupFlag"].empty()) {
      groupFlag = make_shared<long>(boost::any_cast<long>(m["GroupFlag"]));
    }
    if (m.find("InstanceCount") != m.end() && !m["InstanceCount"].empty()) {
      instanceCount = make_shared<string>(boost::any_cast<string>(m["InstanceCount"]));
    }
    if (m.find("RiskInstanceCount") != m.end() && !m["RiskInstanceCount"].empty()) {
      riskInstanceCount = make_shared<string>(boost::any_cast<string>(m["RiskInstanceCount"]));
    }
    if (m.find("UnProtectedInstanceCount") != m.end() && !m["UnProtectedInstanceCount"].empty()) {
      unProtectedInstanceCount = make_shared<string>(boost::any_cast<string>(m["UnProtectedInstanceCount"]));
    }
  }


  virtual ~DescribeGroupedInstancesResponseBodyInstances() = default;
};
class DescribeGroupedInstancesResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeGroupedInstancesResponseBodyPageInfo() {}

  explicit DescribeGroupedInstancesResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeGroupedInstancesResponseBodyPageInfo() = default;
};
class DescribeGroupedInstancesResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeGroupedInstancesResponseBodyInstances>> instances{};
  shared_ptr<DescribeGroupedInstancesResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};

  DescribeGroupedInstancesResponseBody() {}

  explicit DescribeGroupedInstancesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instances) {
      vector<boost::any> temp1;
      for(auto item1:*instances){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Instances"] = boost::any(temp1);
    }
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Instances") != m.end() && !m["Instances"].empty()) {
      if (typeid(vector<boost::any>) == m["Instances"].type()) {
        vector<DescribeGroupedInstancesResponseBodyInstances> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Instances"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeGroupedInstancesResponseBodyInstances model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        instances = make_shared<vector<DescribeGroupedInstancesResponseBodyInstances>>(expect1);
      }
    }
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeGroupedInstancesResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeGroupedInstancesResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeGroupedInstancesResponseBody() = default;
};
class DescribeGroupedInstancesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeGroupedInstancesResponseBody> body{};

  DescribeGroupedInstancesResponse() {}

  explicit DescribeGroupedInstancesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeGroupedInstancesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeGroupedInstancesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeGroupedInstancesResponse() = default;
};
class DescribeGroupedMaliciousFilesRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> fuzzyMaliciousName{};
  shared_ptr<string> imageDigest{};
  shared_ptr<string> imageLayer{};
  shared_ptr<string> imageTag{};
  shared_ptr<string> lang{};
  shared_ptr<string> levels{};
  shared_ptr<string> pageSize{};
  shared_ptr<string> repoId{};
  shared_ptr<string> repoInstanceId{};
  shared_ptr<string> repoName{};
  shared_ptr<string> repoNamespace{};
  shared_ptr<string> repoRegionId{};

  DescribeGroupedMaliciousFilesRequest() {}

  explicit DescribeGroupedMaliciousFilesRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (fuzzyMaliciousName) {
      res["FuzzyMaliciousName"] = boost::any(*fuzzyMaliciousName);
    }
    if (imageDigest) {
      res["ImageDigest"] = boost::any(*imageDigest);
    }
    if (imageLayer) {
      res["ImageLayer"] = boost::any(*imageLayer);
    }
    if (imageTag) {
      res["ImageTag"] = boost::any(*imageTag);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (levels) {
      res["Levels"] = boost::any(*levels);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (repoId) {
      res["RepoId"] = boost::any(*repoId);
    }
    if (repoInstanceId) {
      res["RepoInstanceId"] = boost::any(*repoInstanceId);
    }
    if (repoName) {
      res["RepoName"] = boost::any(*repoName);
    }
    if (repoNamespace) {
      res["RepoNamespace"] = boost::any(*repoNamespace);
    }
    if (repoRegionId) {
      res["RepoRegionId"] = boost::any(*repoRegionId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("FuzzyMaliciousName") != m.end() && !m["FuzzyMaliciousName"].empty()) {
      fuzzyMaliciousName = make_shared<string>(boost::any_cast<string>(m["FuzzyMaliciousName"]));
    }
    if (m.find("ImageDigest") != m.end() && !m["ImageDigest"].empty()) {
      imageDigest = make_shared<string>(boost::any_cast<string>(m["ImageDigest"]));
    }
    if (m.find("ImageLayer") != m.end() && !m["ImageLayer"].empty()) {
      imageLayer = make_shared<string>(boost::any_cast<string>(m["ImageLayer"]));
    }
    if (m.find("ImageTag") != m.end() && !m["ImageTag"].empty()) {
      imageTag = make_shared<string>(boost::any_cast<string>(m["ImageTag"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("Levels") != m.end() && !m["Levels"].empty()) {
      levels = make_shared<string>(boost::any_cast<string>(m["Levels"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<string>(boost::any_cast<string>(m["PageSize"]));
    }
    if (m.find("RepoId") != m.end() && !m["RepoId"].empty()) {
      repoId = make_shared<string>(boost::any_cast<string>(m["RepoId"]));
    }
    if (m.find("RepoInstanceId") != m.end() && !m["RepoInstanceId"].empty()) {
      repoInstanceId = make_shared<string>(boost::any_cast<string>(m["RepoInstanceId"]));
    }
    if (m.find("RepoName") != m.end() && !m["RepoName"].empty()) {
      repoName = make_shared<string>(boost::any_cast<string>(m["RepoName"]));
    }
    if (m.find("RepoNamespace") != m.end() && !m["RepoNamespace"].empty()) {
      repoNamespace = make_shared<string>(boost::any_cast<string>(m["RepoNamespace"]));
    }
    if (m.find("RepoRegionId") != m.end() && !m["RepoRegionId"].empty()) {
      repoRegionId = make_shared<string>(boost::any_cast<string>(m["RepoRegionId"]));
    }
  }


  virtual ~DescribeGroupedMaliciousFilesRequest() = default;
};
class DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse : public Darabonba::Model {
public:
  shared_ptr<long> firstScanTimestamp{};
  shared_ptr<long> imageCount{};
  shared_ptr<long> latestScanTimestamp{};
  shared_ptr<string> level{};
  shared_ptr<string> maliciousMd5{};
  shared_ptr<string> maliciousName{};
  shared_ptr<long> status{};

  DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse() {}

  explicit DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (firstScanTimestamp) {
      res["FirstScanTimestamp"] = boost::any(*firstScanTimestamp);
    }
    if (imageCount) {
      res["ImageCount"] = boost::any(*imageCount);
    }
    if (latestScanTimestamp) {
      res["LatestScanTimestamp"] = boost::any(*latestScanTimestamp);
    }
    if (level) {
      res["Level"] = boost::any(*level);
    }
    if (maliciousMd5) {
      res["MaliciousMd5"] = boost::any(*maliciousMd5);
    }
    if (maliciousName) {
      res["MaliciousName"] = boost::any(*maliciousName);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("FirstScanTimestamp") != m.end() && !m["FirstScanTimestamp"].empty()) {
      firstScanTimestamp = make_shared<long>(boost::any_cast<long>(m["FirstScanTimestamp"]));
    }
    if (m.find("ImageCount") != m.end() && !m["ImageCount"].empty()) {
      imageCount = make_shared<long>(boost::any_cast<long>(m["ImageCount"]));
    }
    if (m.find("LatestScanTimestamp") != m.end() && !m["LatestScanTimestamp"].empty()) {
      latestScanTimestamp = make_shared<long>(boost::any_cast<long>(m["LatestScanTimestamp"]));
    }
    if (m.find("Level") != m.end() && !m["Level"].empty()) {
      level = make_shared<string>(boost::any_cast<string>(m["Level"]));
    }
    if (m.find("MaliciousMd5") != m.end() && !m["MaliciousMd5"].empty()) {
      maliciousMd5 = make_shared<string>(boost::any_cast<string>(m["MaliciousMd5"]));
    }
    if (m.find("MaliciousName") != m.end() && !m["MaliciousName"].empty()) {
      maliciousName = make_shared<string>(boost::any_cast<string>(m["MaliciousName"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
  }


  virtual ~DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse() = default;
};
class DescribeGroupedMaliciousFilesResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeGroupedMaliciousFilesResponseBodyPageInfo() {}

  explicit DescribeGroupedMaliciousFilesResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeGroupedMaliciousFilesResponseBodyPageInfo() = default;
};
class DescribeGroupedMaliciousFilesResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse>> groupedMaliciousFileResponse{};
  shared_ptr<DescribeGroupedMaliciousFilesResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};

  DescribeGroupedMaliciousFilesResponseBody() {}

  explicit DescribeGroupedMaliciousFilesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupedMaliciousFileResponse) {
      vector<boost::any> temp1;
      for(auto item1:*groupedMaliciousFileResponse){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["GroupedMaliciousFileResponse"] = boost::any(temp1);
    }
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupedMaliciousFileResponse") != m.end() && !m["GroupedMaliciousFileResponse"].empty()) {
      if (typeid(vector<boost::any>) == m["GroupedMaliciousFileResponse"].type()) {
        vector<DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["GroupedMaliciousFileResponse"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        groupedMaliciousFileResponse = make_shared<vector<DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse>>(expect1);
      }
    }
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeGroupedMaliciousFilesResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeGroupedMaliciousFilesResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeGroupedMaliciousFilesResponseBody() = default;
};
class DescribeGroupedMaliciousFilesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeGroupedMaliciousFilesResponseBody> body{};

  DescribeGroupedMaliciousFilesResponse() {}

  explicit DescribeGroupedMaliciousFilesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeGroupedMaliciousFilesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeGroupedMaliciousFilesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeGroupedMaliciousFilesResponse() = default;
};
class DescribeGroupedTagsRequest : public Darabonba::Model {
public:
  shared_ptr<string> machineTypes{};

  DescribeGroupedTagsRequest() {}

  explicit DescribeGroupedTagsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (machineTypes) {
      res["MachineTypes"] = boost::any(*machineTypes);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("MachineTypes") != m.end() && !m["MachineTypes"].empty()) {
      machineTypes = make_shared<string>(boost::any_cast<string>(m["MachineTypes"]));
    }
  }


  virtual ~DescribeGroupedTagsRequest() = default;
};
class DescribeGroupedTagsResponseBodyGroupedFileds : public Darabonba::Model {
public:
  shared_ptr<string> count{};
  shared_ptr<string> name{};
  shared_ptr<long> tagId{};

  DescribeGroupedTagsResponseBodyGroupedFileds() {}

  explicit DescribeGroupedTagsResponseBodyGroupedFileds(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (tagId) {
      res["TagId"] = boost::any(*tagId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<string>(boost::any_cast<string>(m["Count"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("TagId") != m.end() && !m["TagId"].empty()) {
      tagId = make_shared<long>(boost::any_cast<long>(m["TagId"]));
    }
  }


  virtual ~DescribeGroupedTagsResponseBodyGroupedFileds() = default;
};
class DescribeGroupedTagsResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<vector<DescribeGroupedTagsResponseBodyGroupedFileds>> groupedFileds{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  DescribeGroupedTagsResponseBody() {}

  explicit DescribeGroupedTagsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (groupedFileds) {
      vector<boost::any> temp1;
      for(auto item1:*groupedFileds){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["GroupedFileds"] = boost::any(temp1);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("GroupedFileds") != m.end() && !m["GroupedFileds"].empty()) {
      if (typeid(vector<boost::any>) == m["GroupedFileds"].type()) {
        vector<DescribeGroupedTagsResponseBodyGroupedFileds> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["GroupedFileds"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeGroupedTagsResponseBodyGroupedFileds model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        groupedFileds = make_shared<vector<DescribeGroupedTagsResponseBodyGroupedFileds>>(expect1);
      }
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~DescribeGroupedTagsResponseBody() = default;
};
class DescribeGroupedTagsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeGroupedTagsResponseBody> body{};

  DescribeGroupedTagsResponse() {}

  explicit DescribeGroupedTagsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeGroupedTagsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeGroupedTagsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeGroupedTagsResponse() = default;
};
class DescribeGroupedVulRequest : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> dealed{};
  shared_ptr<string> groupId{};
  shared_ptr<string> lang{};
  shared_ptr<string> necessity{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> searchTags{};
  shared_ptr<string> type{};
  shared_ptr<string> uuids{};

  DescribeGroupedVulRequest() {}

  explicit DescribeGroupedVulRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (dealed) {
      res["Dealed"] = boost::any(*dealed);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (necessity) {
      res["Necessity"] = boost::any(*necessity);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (searchTags) {
      res["SearchTags"] = boost::any(*searchTags);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Dealed") != m.end() && !m["Dealed"].empty()) {
      dealed = make_shared<string>(boost::any_cast<string>(m["Dealed"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<string>(boost::any_cast<string>(m["GroupId"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("Necessity") != m.end() && !m["Necessity"].empty()) {
      necessity = make_shared<string>(boost::any_cast<string>(m["Necessity"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("SearchTags") != m.end() && !m["SearchTags"].empty()) {
      searchTags = make_shared<string>(boost::any_cast<string>(m["SearchTags"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~DescribeGroupedVulRequest() = default;
};
class DescribeGroupedVulResponseBodyGroupedVulItems : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<long> asapCount{};
  shared_ptr<long> gmtLast{};
  shared_ptr<long> handledCount{};
  shared_ptr<long> laterCount{};
  shared_ptr<string> name{};
  shared_ptr<long> nntfCount{};
  shared_ptr<string> tags{};
  shared_ptr<long> totalFixCount{};
  shared_ptr<string> type{};

  DescribeGroupedVulResponseBodyGroupedVulItems() {}

  explicit DescribeGroupedVulResponseBodyGroupedVulItems(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (asapCount) {
      res["AsapCount"] = boost::any(*asapCount);
    }
    if (gmtLast) {
      res["GmtLast"] = boost::any(*gmtLast);
    }
    if (handledCount) {
      res["HandledCount"] = boost::any(*handledCount);
    }
    if (laterCount) {
      res["LaterCount"] = boost::any(*laterCount);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (nntfCount) {
      res["NntfCount"] = boost::any(*nntfCount);
    }
    if (tags) {
      res["Tags"] = boost::any(*tags);
    }
    if (totalFixCount) {
      res["TotalFixCount"] = boost::any(*totalFixCount);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("AsapCount") != m.end() && !m["AsapCount"].empty()) {
      asapCount = make_shared<long>(boost::any_cast<long>(m["AsapCount"]));
    }
    if (m.find("GmtLast") != m.end() && !m["GmtLast"].empty()) {
      gmtLast = make_shared<long>(boost::any_cast<long>(m["GmtLast"]));
    }
    if (m.find("HandledCount") != m.end() && !m["HandledCount"].empty()) {
      handledCount = make_shared<long>(boost::any_cast<long>(m["HandledCount"]));
    }
    if (m.find("LaterCount") != m.end() && !m["LaterCount"].empty()) {
      laterCount = make_shared<long>(boost::any_cast<long>(m["LaterCount"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("NntfCount") != m.end() && !m["NntfCount"].empty()) {
      nntfCount = make_shared<long>(boost::any_cast<long>(m["NntfCount"]));
    }
    if (m.find("Tags") != m.end() && !m["Tags"].empty()) {
      tags = make_shared<string>(boost::any_cast<string>(m["Tags"]));
    }
    if (m.find("TotalFixCount") != m.end() && !m["TotalFixCount"].empty()) {
      totalFixCount = make_shared<long>(boost::any_cast<long>(m["TotalFixCount"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribeGroupedVulResponseBodyGroupedVulItems() = default;
};
class DescribeGroupedVulResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<DescribeGroupedVulResponseBodyGroupedVulItems>> groupedVulItems{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};

  DescribeGroupedVulResponseBody() {}

  explicit DescribeGroupedVulResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (groupedVulItems) {
      vector<boost::any> temp1;
      for(auto item1:*groupedVulItems){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["GroupedVulItems"] = boost::any(temp1);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("GroupedVulItems") != m.end() && !m["GroupedVulItems"].empty()) {
      if (typeid(vector<boost::any>) == m["GroupedVulItems"].type()) {
        vector<DescribeGroupedVulResponseBodyGroupedVulItems> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["GroupedVulItems"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeGroupedVulResponseBodyGroupedVulItems model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        groupedVulItems = make_shared<vector<DescribeGroupedVulResponseBodyGroupedVulItems>>(expect1);
      }
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeGroupedVulResponseBody() = default;
};
class DescribeGroupedVulResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeGroupedVulResponseBody> body{};

  DescribeGroupedVulResponse() {}

  explicit DescribeGroupedVulResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeGroupedVulResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeGroupedVulResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeGroupedVulResponse() = default;
};
class DescribeHoneyPotAuthResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> honeyPotAuthCount{};
  shared_ptr<long> honeyPotCount{};
  shared_ptr<string> requestId{};

  DescribeHoneyPotAuthResponseBody() {}

  explicit DescribeHoneyPotAuthResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (honeyPotAuthCount) {
      res["HoneyPotAuthCount"] = boost::any(*honeyPotAuthCount);
    }
    if (honeyPotCount) {
      res["HoneyPotCount"] = boost::any(*honeyPotCount);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("HoneyPotAuthCount") != m.end() && !m["HoneyPotAuthCount"].empty()) {
      honeyPotAuthCount = make_shared<long>(boost::any_cast<long>(m["HoneyPotAuthCount"]));
    }
    if (m.find("HoneyPotCount") != m.end() && !m["HoneyPotCount"].empty()) {
      honeyPotCount = make_shared<long>(boost::any_cast<long>(m["HoneyPotCount"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeHoneyPotAuthResponseBody() = default;
};
class DescribeHoneyPotAuthResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeHoneyPotAuthResponseBody> body{};

  DescribeHoneyPotAuthResponse() {}

  explicit DescribeHoneyPotAuthResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeHoneyPotAuthResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeHoneyPotAuthResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeHoneyPotAuthResponse() = default;
};
class DescribeHoneyPotSuspStatisticsRequest : public Darabonba::Model {
public:
  shared_ptr<string> from{};
  shared_ptr<long> statisticsDays{};
  shared_ptr<string> statisticsKeyType{};

  DescribeHoneyPotSuspStatisticsRequest() {}

  explicit DescribeHoneyPotSuspStatisticsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (from) {
      res["From"] = boost::any(*from);
    }
    if (statisticsDays) {
      res["StatisticsDays"] = boost::any(*statisticsDays);
    }
    if (statisticsKeyType) {
      res["StatisticsKeyType"] = boost::any(*statisticsKeyType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("From") != m.end() && !m["From"].empty()) {
      from = make_shared<string>(boost::any_cast<string>(m["From"]));
    }
    if (m.find("StatisticsDays") != m.end() && !m["StatisticsDays"].empty()) {
      statisticsDays = make_shared<long>(boost::any_cast<long>(m["StatisticsDays"]));
    }
    if (m.find("StatisticsKeyType") != m.end() && !m["StatisticsKeyType"].empty()) {
      statisticsKeyType = make_shared<string>(boost::any_cast<string>(m["StatisticsKeyType"]));
    }
  }


  virtual ~DescribeHoneyPotSuspStatisticsRequest() = default;
};
class DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> type{};
  shared_ptr<string> vpcId{};
  shared_ptr<string> vpcName{};

  DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse() {}

  explicit DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (vpcId) {
      res["VpcId"] = boost::any(*vpcId);
    }
    if (vpcName) {
      res["VpcName"] = boost::any(*vpcName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("VpcId") != m.end() && !m["VpcId"].empty()) {
      vpcId = make_shared<string>(boost::any_cast<string>(m["VpcId"]));
    }
    if (m.find("VpcName") != m.end() && !m["VpcName"].empty()) {
      vpcName = make_shared<string>(boost::any_cast<string>(m["VpcName"]));
    }
  }


  virtual ~DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse() = default;
};
class DescribeHoneyPotSuspStatisticsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse>> suspHoneyPotStatisticsResponse{};

  DescribeHoneyPotSuspStatisticsResponseBody() {}

  explicit DescribeHoneyPotSuspStatisticsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (suspHoneyPotStatisticsResponse) {
      vector<boost::any> temp1;
      for(auto item1:*suspHoneyPotStatisticsResponse){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["SuspHoneyPotStatisticsResponse"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("SuspHoneyPotStatisticsResponse") != m.end() && !m["SuspHoneyPotStatisticsResponse"].empty()) {
      if (typeid(vector<boost::any>) == m["SuspHoneyPotStatisticsResponse"].type()) {
        vector<DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["SuspHoneyPotStatisticsResponse"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        suspHoneyPotStatisticsResponse = make_shared<vector<DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse>>(expect1);
      }
    }
  }


  virtual ~DescribeHoneyPotSuspStatisticsResponseBody() = default;
};
class DescribeHoneyPotSuspStatisticsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeHoneyPotSuspStatisticsResponseBody> body{};

  DescribeHoneyPotSuspStatisticsResponse() {}

  explicit DescribeHoneyPotSuspStatisticsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeHoneyPotSuspStatisticsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeHoneyPotSuspStatisticsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeHoneyPotSuspStatisticsResponse() = default;
};
class DescribeImageBaselineCheckSummaryRequest : public Darabonba::Model {
public:
  shared_ptr<string> criteria{};
  shared_ptr<string> criteriaType{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> lang{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> riskLevel{};

  DescribeImageBaselineCheckSummaryRequest() {}

  explicit DescribeImageBaselineCheckSummaryRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (criteria) {
      res["Criteria"] = boost::any(*criteria);
    }
    if (criteriaType) {
      res["CriteriaType"] = boost::any(*criteriaType);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (riskLevel) {
      res["RiskLevel"] = boost::any(*riskLevel);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Criteria") != m.end() && !m["Criteria"].empty()) {
      criteria = make_shared<string>(boost::any_cast<string>(m["Criteria"]));
    }
    if (m.find("CriteriaType") != m.end() && !m["CriteriaType"].empty()) {
      criteriaType = make_shared<string>(boost::any_cast<string>(m["CriteriaType"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RiskLevel") != m.end() && !m["RiskLevel"].empty()) {
      riskLevel = make_shared<string>(boost::any_cast<string>(m["RiskLevel"]));
    }
  }


  virtual ~DescribeImageBaselineCheckSummaryRequest() = default;
};
class DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary : public Darabonba::Model {
public:
  shared_ptr<string> baselineClassAlias{};
  shared_ptr<string> baselineClassKey{};
  shared_ptr<string> baselineNameAlias{};
  shared_ptr<string> baselineNameKey{};
  shared_ptr<string> baselineNameLevel{};
  shared_ptr<long> firstScanTime{};
  shared_ptr<long> highRiskImage{};
  shared_ptr<long> lastScanTime{};
  shared_ptr<long> lowRiskImage{};
  shared_ptr<long> middleRiskImage{};
  shared_ptr<long> status{};

  DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary() {}

  explicit DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (baselineClassAlias) {
      res["BaselineClassAlias"] = boost::any(*baselineClassAlias);
    }
    if (baselineClassKey) {
      res["BaselineClassKey"] = boost::any(*baselineClassKey);
    }
    if (baselineNameAlias) {
      res["BaselineNameAlias"] = boost::any(*baselineNameAlias);
    }
    if (baselineNameKey) {
      res["BaselineNameKey"] = boost::any(*baselineNameKey);
    }
    if (baselineNameLevel) {
      res["BaselineNameLevel"] = boost::any(*baselineNameLevel);
    }
    if (firstScanTime) {
      res["FirstScanTime"] = boost::any(*firstScanTime);
    }
    if (highRiskImage) {
      res["HighRiskImage"] = boost::any(*highRiskImage);
    }
    if (lastScanTime) {
      res["LastScanTime"] = boost::any(*lastScanTime);
    }
    if (lowRiskImage) {
      res["LowRiskImage"] = boost::any(*lowRiskImage);
    }
    if (middleRiskImage) {
      res["MiddleRiskImage"] = boost::any(*middleRiskImage);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BaselineClassAlias") != m.end() && !m["BaselineClassAlias"].empty()) {
      baselineClassAlias = make_shared<string>(boost::any_cast<string>(m["BaselineClassAlias"]));
    }
    if (m.find("BaselineClassKey") != m.end() && !m["BaselineClassKey"].empty()) {
      baselineClassKey = make_shared<string>(boost::any_cast<string>(m["BaselineClassKey"]));
    }
    if (m.find("BaselineNameAlias") != m.end() && !m["BaselineNameAlias"].empty()) {
      baselineNameAlias = make_shared<string>(boost::any_cast<string>(m["BaselineNameAlias"]));
    }
    if (m.find("BaselineNameKey") != m.end() && !m["BaselineNameKey"].empty()) {
      baselineNameKey = make_shared<string>(boost::any_cast<string>(m["BaselineNameKey"]));
    }
    if (m.find("BaselineNameLevel") != m.end() && !m["BaselineNameLevel"].empty()) {
      baselineNameLevel = make_shared<string>(boost::any_cast<string>(m["BaselineNameLevel"]));
    }
    if (m.find("FirstScanTime") != m.end() && !m["FirstScanTime"].empty()) {
      firstScanTime = make_shared<long>(boost::any_cast<long>(m["FirstScanTime"]));
    }
    if (m.find("HighRiskImage") != m.end() && !m["HighRiskImage"].empty()) {
      highRiskImage = make_shared<long>(boost::any_cast<long>(m["HighRiskImage"]));
    }
    if (m.find("LastScanTime") != m.end() && !m["LastScanTime"].empty()) {
      lastScanTime = make_shared<long>(boost::any_cast<long>(m["LastScanTime"]));
    }
    if (m.find("LowRiskImage") != m.end() && !m["LowRiskImage"].empty()) {
      lowRiskImage = make_shared<long>(boost::any_cast<long>(m["LowRiskImage"]));
    }
    if (m.find("MiddleRiskImage") != m.end() && !m["MiddleRiskImage"].empty()) {
      middleRiskImage = make_shared<long>(boost::any_cast<long>(m["MiddleRiskImage"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
  }


  virtual ~DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary() = default;
};
class DescribeImageBaselineCheckSummaryResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeImageBaselineCheckSummaryResponseBodyPageInfo() {}

  explicit DescribeImageBaselineCheckSummaryResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeImageBaselineCheckSummaryResponseBodyPageInfo() = default;
};
class DescribeImageBaselineCheckSummaryResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary>> baselineResultSummary{};
  shared_ptr<DescribeImageBaselineCheckSummaryResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};

  DescribeImageBaselineCheckSummaryResponseBody() {}

  explicit DescribeImageBaselineCheckSummaryResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (baselineResultSummary) {
      vector<boost::any> temp1;
      for(auto item1:*baselineResultSummary){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["BaselineResultSummary"] = boost::any(temp1);
    }
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BaselineResultSummary") != m.end() && !m["BaselineResultSummary"].empty()) {
      if (typeid(vector<boost::any>) == m["BaselineResultSummary"].type()) {
        vector<DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["BaselineResultSummary"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        baselineResultSummary = make_shared<vector<DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary>>(expect1);
      }
    }
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeImageBaselineCheckSummaryResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeImageBaselineCheckSummaryResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeImageBaselineCheckSummaryResponseBody() = default;
};
class DescribeImageBaselineCheckSummaryResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeImageBaselineCheckSummaryResponseBody> body{};

  DescribeImageBaselineCheckSummaryResponse() {}

  explicit DescribeImageBaselineCheckSummaryResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeImageBaselineCheckSummaryResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeImageBaselineCheckSummaryResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeImageBaselineCheckSummaryResponse() = default;
};
class DescribeImageFixTaskRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> endTime{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startTime{};
  shared_ptr<string> status{};

  DescribeImageFixTaskRequest() {}

  explicit DescribeImageFixTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<long>(boost::any_cast<long>(m["EndTime"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<long>(boost::any_cast<long>(m["StartTime"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
  }


  virtual ~DescribeImageFixTaskRequest() = default;
};
class DescribeImageFixTaskResponseBodyBuildTasks : public Darabonba::Model {
public:
  shared_ptr<string> buildTaskId{};
  shared_ptr<string> finishTime{};
  shared_ptr<string> fixTime{};
  shared_ptr<string> newTag{};
  shared_ptr<string> newUuid{};
  shared_ptr<string> oldTag{};
  shared_ptr<string> oldUuid{};
  shared_ptr<string> regionId{};
  shared_ptr<string> repoName{};
  shared_ptr<string> repoNamespace{};
  shared_ptr<long> status{};
  shared_ptr<string> taskType{};

  DescribeImageFixTaskResponseBodyBuildTasks() {}

  explicit DescribeImageFixTaskResponseBodyBuildTasks(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (buildTaskId) {
      res["BuildTaskId"] = boost::any(*buildTaskId);
    }
    if (finishTime) {
      res["FinishTime"] = boost::any(*finishTime);
    }
    if (fixTime) {
      res["FixTime"] = boost::any(*fixTime);
    }
    if (newTag) {
      res["NewTag"] = boost::any(*newTag);
    }
    if (newUuid) {
      res["NewUuid"] = boost::any(*newUuid);
    }
    if (oldTag) {
      res["OldTag"] = boost::any(*oldTag);
    }
    if (oldUuid) {
      res["OldUuid"] = boost::any(*oldUuid);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    if (repoName) {
      res["RepoName"] = boost::any(*repoName);
    }
    if (repoNamespace) {
      res["RepoNamespace"] = boost::any(*repoNamespace);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (taskType) {
      res["TaskType"] = boost::any(*taskType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BuildTaskId") != m.end() && !m["BuildTaskId"].empty()) {
      buildTaskId = make_shared<string>(boost::any_cast<string>(m["BuildTaskId"]));
    }
    if (m.find("FinishTime") != m.end() && !m["FinishTime"].empty()) {
      finishTime = make_shared<string>(boost::any_cast<string>(m["FinishTime"]));
    }
    if (m.find("FixTime") != m.end() && !m["FixTime"].empty()) {
      fixTime = make_shared<string>(boost::any_cast<string>(m["FixTime"]));
    }
    if (m.find("NewTag") != m.end() && !m["NewTag"].empty()) {
      newTag = make_shared<string>(boost::any_cast<string>(m["NewTag"]));
    }
    if (m.find("NewUuid") != m.end() && !m["NewUuid"].empty()) {
      newUuid = make_shared<string>(boost::any_cast<string>(m["NewUuid"]));
    }
    if (m.find("OldTag") != m.end() && !m["OldTag"].empty()) {
      oldTag = make_shared<string>(boost::any_cast<string>(m["OldTag"]));
    }
    if (m.find("OldUuid") != m.end() && !m["OldUuid"].empty()) {
      oldUuid = make_shared<string>(boost::any_cast<string>(m["OldUuid"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
    if (m.find("RepoName") != m.end() && !m["RepoName"].empty()) {
      repoName = make_shared<string>(boost::any_cast<string>(m["RepoName"]));
    }
    if (m.find("RepoNamespace") != m.end() && !m["RepoNamespace"].empty()) {
      repoNamespace = make_shared<string>(boost::any_cast<string>(m["RepoNamespace"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("TaskType") != m.end() && !m["TaskType"].empty()) {
      taskType = make_shared<string>(boost::any_cast<string>(m["TaskType"]));
    }
  }


  virtual ~DescribeImageFixTaskResponseBodyBuildTasks() = default;
};
class DescribeImageFixTaskResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeImageFixTaskResponseBodyPageInfo() {}

  explicit DescribeImageFixTaskResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeImageFixTaskResponseBodyPageInfo() = default;
};
class DescribeImageFixTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeImageFixTaskResponseBodyBuildTasks>> buildTasks{};
  shared_ptr<DescribeImageFixTaskResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};

  DescribeImageFixTaskResponseBody() {}

  explicit DescribeImageFixTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (buildTasks) {
      vector<boost::any> temp1;
      for(auto item1:*buildTasks){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["BuildTasks"] = boost::any(temp1);
    }
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BuildTasks") != m.end() && !m["BuildTasks"].empty()) {
      if (typeid(vector<boost::any>) == m["BuildTasks"].type()) {
        vector<DescribeImageFixTaskResponseBodyBuildTasks> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["BuildTasks"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeImageFixTaskResponseBodyBuildTasks model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        buildTasks = make_shared<vector<DescribeImageFixTaskResponseBodyBuildTasks>>(expect1);
      }
    }
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeImageFixTaskResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeImageFixTaskResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeImageFixTaskResponseBody() = default;
};
class DescribeImageFixTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeImageFixTaskResponseBody> body{};

  DescribeImageFixTaskResponse() {}

  explicit DescribeImageFixTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeImageFixTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeImageFixTaskResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeImageFixTaskResponse() = default;
};
class DescribeImageGroupedVulListRequest : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> cveId{};
  shared_ptr<string> groupId{};
  shared_ptr<string> imageDigest{};
  shared_ptr<string> imageLayer{};
  shared_ptr<string> imageTag{};
  shared_ptr<long> isLatest{};
  shared_ptr<string> lang{};
  shared_ptr<string> name{};
  shared_ptr<string> necessity{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> patchId{};
  shared_ptr<string> repoId{};
  shared_ptr<string> repoInstanceId{};
  shared_ptr<string> repoName{};
  shared_ptr<string> repoNamespace{};
  shared_ptr<string> repoRegionId{};
  shared_ptr<string> type{};
  shared_ptr<string> uuids{};

  DescribeImageGroupedVulListRequest() {}

  explicit DescribeImageGroupedVulListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (cveId) {
      res["CveId"] = boost::any(*cveId);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (imageDigest) {
      res["ImageDigest"] = boost::any(*imageDigest);
    }
    if (imageLayer) {
      res["ImageLayer"] = boost::any(*imageLayer);
    }
    if (imageTag) {
      res["ImageTag"] = boost::any(*imageTag);
    }
    if (isLatest) {
      res["IsLatest"] = boost::any(*isLatest);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (necessity) {
      res["Necessity"] = boost::any(*necessity);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (patchId) {
      res["PatchId"] = boost::any(*patchId);
    }
    if (repoId) {
      res["RepoId"] = boost::any(*repoId);
    }
    if (repoInstanceId) {
      res["RepoInstanceId"] = boost::any(*repoInstanceId);
    }
    if (repoName) {
      res["RepoName"] = boost::any(*repoName);
    }
    if (repoNamespace) {
      res["RepoNamespace"] = boost::any(*repoNamespace);
    }
    if (repoRegionId) {
      res["RepoRegionId"] = boost::any(*repoRegionId);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("CveId") != m.end() && !m["CveId"].empty()) {
      cveId = make_shared<string>(boost::any_cast<string>(m["CveId"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<string>(boost::any_cast<string>(m["GroupId"]));
    }
    if (m.find("ImageDigest") != m.end() && !m["ImageDigest"].empty()) {
      imageDigest = make_shared<string>(boost::any_cast<string>(m["ImageDigest"]));
    }
    if (m.find("ImageLayer") != m.end() && !m["ImageLayer"].empty()) {
      imageLayer = make_shared<string>(boost::any_cast<string>(m["ImageLayer"]));
    }
    if (m.find("ImageTag") != m.end() && !m["ImageTag"].empty()) {
      imageTag = make_shared<string>(boost::any_cast<string>(m["ImageTag"]));
    }
    if (m.find("IsLatest") != m.end() && !m["IsLatest"].empty()) {
      isLatest = make_shared<long>(boost::any_cast<long>(m["IsLatest"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Necessity") != m.end() && !m["Necessity"].empty()) {
      necessity = make_shared<string>(boost::any_cast<string>(m["Necessity"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("PatchId") != m.end() && !m["PatchId"].empty()) {
      patchId = make_shared<long>(boost::any_cast<long>(m["PatchId"]));
    }
    if (m.find("RepoId") != m.end() && !m["RepoId"].empty()) {
      repoId = make_shared<string>(boost::any_cast<string>(m["RepoId"]));
    }
    if (m.find("RepoInstanceId") != m.end() && !m["RepoInstanceId"].empty()) {
      repoInstanceId = make_shared<string>(boost::any_cast<string>(m["RepoInstanceId"]));
    }
    if (m.find("RepoName") != m.end() && !m["RepoName"].empty()) {
      repoName = make_shared<string>(boost::any_cast<string>(m["RepoName"]));
    }
    if (m.find("RepoNamespace") != m.end() && !m["RepoNamespace"].empty()) {
      repoNamespace = make_shared<string>(boost::any_cast<string>(m["RepoNamespace"]));
    }
    if (m.find("RepoRegionId") != m.end() && !m["RepoRegionId"].empty()) {
      repoRegionId = make_shared<string>(boost::any_cast<string>(m["RepoRegionId"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~DescribeImageGroupedVulListRequest() = default;
};
class DescribeImageGroupedVulListResponseBodyGroupedVulItems : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<long> asapCount{};
  shared_ptr<long> gmtLast{};
  shared_ptr<long> lastScanTime{};
  shared_ptr<long> laterCount{};
  shared_ptr<string> name{};
  shared_ptr<long> nntfCount{};
  shared_ptr<long> status{};
  shared_ptr<string> tags{};
  shared_ptr<string> type{};

  DescribeImageGroupedVulListResponseBodyGroupedVulItems() {}

  explicit DescribeImageGroupedVulListResponseBodyGroupedVulItems(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (asapCount) {
      res["AsapCount"] = boost::any(*asapCount);
    }
    if (gmtLast) {
      res["GmtLast"] = boost::any(*gmtLast);
    }
    if (lastScanTime) {
      res["LastScanTime"] = boost::any(*lastScanTime);
    }
    if (laterCount) {
      res["LaterCount"] = boost::any(*laterCount);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (nntfCount) {
      res["NntfCount"] = boost::any(*nntfCount);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (tags) {
      res["Tags"] = boost::any(*tags);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("AsapCount") != m.end() && !m["AsapCount"].empty()) {
      asapCount = make_shared<long>(boost::any_cast<long>(m["AsapCount"]));
    }
    if (m.find("GmtLast") != m.end() && !m["GmtLast"].empty()) {
      gmtLast = make_shared<long>(boost::any_cast<long>(m["GmtLast"]));
    }
    if (m.find("LastScanTime") != m.end() && !m["LastScanTime"].empty()) {
      lastScanTime = make_shared<long>(boost::any_cast<long>(m["LastScanTime"]));
    }
    if (m.find("LaterCount") != m.end() && !m["LaterCount"].empty()) {
      laterCount = make_shared<long>(boost::any_cast<long>(m["LaterCount"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("NntfCount") != m.end() && !m["NntfCount"].empty()) {
      nntfCount = make_shared<long>(boost::any_cast<long>(m["NntfCount"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("Tags") != m.end() && !m["Tags"].empty()) {
      tags = make_shared<string>(boost::any_cast<string>(m["Tags"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribeImageGroupedVulListResponseBodyGroupedVulItems() = default;
};
class DescribeImageGroupedVulListResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<DescribeImageGroupedVulListResponseBodyGroupedVulItems>> groupedVulItems{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};

  DescribeImageGroupedVulListResponseBody() {}

  explicit DescribeImageGroupedVulListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (groupedVulItems) {
      vector<boost::any> temp1;
      for(auto item1:*groupedVulItems){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["GroupedVulItems"] = boost::any(temp1);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("GroupedVulItems") != m.end() && !m["GroupedVulItems"].empty()) {
      if (typeid(vector<boost::any>) == m["GroupedVulItems"].type()) {
        vector<DescribeImageGroupedVulListResponseBodyGroupedVulItems> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["GroupedVulItems"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeImageGroupedVulListResponseBodyGroupedVulItems model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        groupedVulItems = make_shared<vector<DescribeImageGroupedVulListResponseBodyGroupedVulItems>>(expect1);
      }
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeImageGroupedVulListResponseBody() = default;
};
class DescribeImageGroupedVulListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeImageGroupedVulListResponseBody> body{};

  DescribeImageGroupedVulListResponse() {}

  explicit DescribeImageGroupedVulListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeImageGroupedVulListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeImageGroupedVulListResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeImageGroupedVulListResponse() = default;
};
class DescribeImageListWithBaselineNameRequest : public Darabonba::Model {
public:
  shared_ptr<string> baselineNameKey{};
  shared_ptr<string> criteria{};
  shared_ptr<string> criteriaType{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> imageDigest{};
  shared_ptr<string> lang{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> repoInstanceId{};
  shared_ptr<string> repoName{};
  shared_ptr<string> repoNamespace{};

  DescribeImageListWithBaselineNameRequest() {}

  explicit DescribeImageListWithBaselineNameRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (baselineNameKey) {
      res["BaselineNameKey"] = boost::any(*baselineNameKey);
    }
    if (criteria) {
      res["Criteria"] = boost::any(*criteria);
    }
    if (criteriaType) {
      res["CriteriaType"] = boost::any(*criteriaType);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (imageDigest) {
      res["ImageDigest"] = boost::any(*imageDigest);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (repoInstanceId) {
      res["RepoInstanceId"] = boost::any(*repoInstanceId);
    }
    if (repoName) {
      res["RepoName"] = boost::any(*repoName);
    }
    if (repoNamespace) {
      res["RepoNamespace"] = boost::any(*repoNamespace);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BaselineNameKey") != m.end() && !m["BaselineNameKey"].empty()) {
      baselineNameKey = make_shared<string>(boost::any_cast<string>(m["BaselineNameKey"]));
    }
    if (m.find("Criteria") != m.end() && !m["Criteria"].empty()) {
      criteria = make_shared<string>(boost::any_cast<string>(m["Criteria"]));
    }
    if (m.find("CriteriaType") != m.end() && !m["CriteriaType"].empty()) {
      criteriaType = make_shared<string>(boost::any_cast<string>(m["CriteriaType"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("ImageDigest") != m.end() && !m["ImageDigest"].empty()) {
      imageDigest = make_shared<string>(boost::any_cast<string>(m["ImageDigest"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RepoInstanceId") != m.end() && !m["RepoInstanceId"].empty()) {
      repoInstanceId = make_shared<string>(boost::any_cast<string>(m["RepoInstanceId"]));
    }
    if (m.find("RepoName") != m.end() && !m["RepoName"].empty()) {
      repoName = make_shared<string>(boost::any_cast<string>(m["RepoName"]));
    }
    if (m.find("RepoNamespace") != m.end() && !m["RepoNamespace"].empty()) {
      repoNamespace = make_shared<string>(boost::any_cast<string>(m["RepoNamespace"]));
    }
  }


  virtual ~DescribeImageListWithBaselineNameRequest() = default;
};
class DescribeImageListWithBaselineNameResponseBodyImageInfos : public Darabonba::Model {
public:
  shared_ptr<string> digest{};
  shared_ptr<long> highRiskImage{};
  shared_ptr<long> imageCreate{};
  shared_ptr<string> imageId{};
  shared_ptr<long> imageSize{};
  shared_ptr<long> imageUpdate{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> lowRiskImage{};
  shared_ptr<long> middleRiskImage{};
  shared_ptr<long> noRiskImage{};
  shared_ptr<string> regionId{};
  shared_ptr<string> repoId{};
  shared_ptr<string> repoName{};
  shared_ptr<string> repoNamespace{};
  shared_ptr<string> repoType{};
  shared_ptr<string> riskStatus{};
  shared_ptr<string> tag{};
  shared_ptr<long> totalItemCount{};
  shared_ptr<string> uuid{};

  DescribeImageListWithBaselineNameResponseBodyImageInfos() {}

  explicit DescribeImageListWithBaselineNameResponseBodyImageInfos(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (digest) {
      res["Digest"] = boost::any(*digest);
    }
    if (highRiskImage) {
      res["HighRiskImage"] = boost::any(*highRiskImage);
    }
    if (imageCreate) {
      res["ImageCreate"] = boost::any(*imageCreate);
    }
    if (imageId) {
      res["ImageId"] = boost::any(*imageId);
    }
    if (imageSize) {
      res["ImageSize"] = boost::any(*imageSize);
    }
    if (imageUpdate) {
      res["ImageUpdate"] = boost::any(*imageUpdate);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (lowRiskImage) {
      res["LowRiskImage"] = boost::any(*lowRiskImage);
    }
    if (middleRiskImage) {
      res["MiddleRiskImage"] = boost::any(*middleRiskImage);
    }
    if (noRiskImage) {
      res["NoRiskImage"] = boost::any(*noRiskImage);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    if (repoId) {
      res["RepoId"] = boost::any(*repoId);
    }
    if (repoName) {
      res["RepoName"] = boost::any(*repoName);
    }
    if (repoNamespace) {
      res["RepoNamespace"] = boost::any(*repoNamespace);
    }
    if (repoType) {
      res["RepoType"] = boost::any(*repoType);
    }
    if (riskStatus) {
      res["RiskStatus"] = boost::any(*riskStatus);
    }
    if (tag) {
      res["Tag"] = boost::any(*tag);
    }
    if (totalItemCount) {
      res["TotalItemCount"] = boost::any(*totalItemCount);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Digest") != m.end() && !m["Digest"].empty()) {
      digest = make_shared<string>(boost::any_cast<string>(m["Digest"]));
    }
    if (m.find("HighRiskImage") != m.end() && !m["HighRiskImage"].empty()) {
      highRiskImage = make_shared<long>(boost::any_cast<long>(m["HighRiskImage"]));
    }
    if (m.find("ImageCreate") != m.end() && !m["ImageCreate"].empty()) {
      imageCreate = make_shared<long>(boost::any_cast<long>(m["ImageCreate"]));
    }
    if (m.find("ImageId") != m.end() && !m["ImageId"].empty()) {
      imageId = make_shared<string>(boost::any_cast<string>(m["ImageId"]));
    }
    if (m.find("ImageSize") != m.end() && !m["ImageSize"].empty()) {
      imageSize = make_shared<long>(boost::any_cast<long>(m["ImageSize"]));
    }
    if (m.find("ImageUpdate") != m.end() && !m["ImageUpdate"].empty()) {
      imageUpdate = make_shared<long>(boost::any_cast<long>(m["ImageUpdate"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("LowRiskImage") != m.end() && !m["LowRiskImage"].empty()) {
      lowRiskImage = make_shared<long>(boost::any_cast<long>(m["LowRiskImage"]));
    }
    if (m.find("MiddleRiskImage") != m.end() && !m["MiddleRiskImage"].empty()) {
      middleRiskImage = make_shared<long>(boost::any_cast<long>(m["MiddleRiskImage"]));
    }
    if (m.find("NoRiskImage") != m.end() && !m["NoRiskImage"].empty()) {
      noRiskImage = make_shared<long>(boost::any_cast<long>(m["NoRiskImage"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
    if (m.find("RepoId") != m.end() && !m["RepoId"].empty()) {
      repoId = make_shared<string>(boost::any_cast<string>(m["RepoId"]));
    }
    if (m.find("RepoName") != m.end() && !m["RepoName"].empty()) {
      repoName = make_shared<string>(boost::any_cast<string>(m["RepoName"]));
    }
    if (m.find("RepoNamespace") != m.end() && !m["RepoNamespace"].empty()) {
      repoNamespace = make_shared<string>(boost::any_cast<string>(m["RepoNamespace"]));
    }
    if (m.find("RepoType") != m.end() && !m["RepoType"].empty()) {
      repoType = make_shared<string>(boost::any_cast<string>(m["RepoType"]));
    }
    if (m.find("RiskStatus") != m.end() && !m["RiskStatus"].empty()) {
      riskStatus = make_shared<string>(boost::any_cast<string>(m["RiskStatus"]));
    }
    if (m.find("Tag") != m.end() && !m["Tag"].empty()) {
      tag = make_shared<string>(boost::any_cast<string>(m["Tag"]));
    }
    if (m.find("TotalItemCount") != m.end() && !m["TotalItemCount"].empty()) {
      totalItemCount = make_shared<long>(boost::any_cast<long>(m["TotalItemCount"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeImageListWithBaselineNameResponseBodyImageInfos() = default;
};
class DescribeImageListWithBaselineNameResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeImageListWithBaselineNameResponseBodyPageInfo() {}

  explicit DescribeImageListWithBaselineNameResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeImageListWithBaselineNameResponseBodyPageInfo() = default;
};
class DescribeImageListWithBaselineNameResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeImageListWithBaselineNameResponseBodyImageInfos>> imageInfos{};
  shared_ptr<DescribeImageListWithBaselineNameResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};

  DescribeImageListWithBaselineNameResponseBody() {}

  explicit DescribeImageListWithBaselineNameResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (imageInfos) {
      vector<boost::any> temp1;
      for(auto item1:*imageInfos){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["ImageInfos"] = boost::any(temp1);
    }
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ImageInfos") != m.end() && !m["ImageInfos"].empty()) {
      if (typeid(vector<boost::any>) == m["ImageInfos"].type()) {
        vector<DescribeImageListWithBaselineNameResponseBodyImageInfos> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["ImageInfos"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeImageListWithBaselineNameResponseBodyImageInfos model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        imageInfos = make_shared<vector<DescribeImageListWithBaselineNameResponseBodyImageInfos>>(expect1);
      }
    }
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeImageListWithBaselineNameResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeImageListWithBaselineNameResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeImageListWithBaselineNameResponseBody() = default;
};
class DescribeImageListWithBaselineNameResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeImageListWithBaselineNameResponseBody> body{};

  DescribeImageListWithBaselineNameResponse() {}

  explicit DescribeImageListWithBaselineNameResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeImageListWithBaselineNameResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeImageListWithBaselineNameResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeImageListWithBaselineNameResponse() = default;
};
class DescribeImageScanAuthCountResponseBodyImageScan : public Darabonba::Model {
public:
  shared_ptr<long> imageScanCapacity{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> scanCount{};

  DescribeImageScanAuthCountResponseBodyImageScan() {}

  explicit DescribeImageScanAuthCountResponseBodyImageScan(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (imageScanCapacity) {
      res["ImageScanCapacity"] = boost::any(*imageScanCapacity);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (scanCount) {
      res["ScanCount"] = boost::any(*scanCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ImageScanCapacity") != m.end() && !m["ImageScanCapacity"].empty()) {
      imageScanCapacity = make_shared<long>(boost::any_cast<long>(m["ImageScanCapacity"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("ScanCount") != m.end() && !m["ScanCount"].empty()) {
      scanCount = make_shared<long>(boost::any_cast<long>(m["ScanCount"]));
    }
  }


  virtual ~DescribeImageScanAuthCountResponseBodyImageScan() = default;
};
class DescribeImageScanAuthCountResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeImageScanAuthCountResponseBodyImageScan> imageScan{};
  shared_ptr<string> requestId{};

  DescribeImageScanAuthCountResponseBody() {}

  explicit DescribeImageScanAuthCountResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (imageScan) {
      res["ImageScan"] = imageScan ? boost::any(imageScan->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ImageScan") != m.end() && !m["ImageScan"].empty()) {
      if (typeid(map<string, boost::any>) == m["ImageScan"].type()) {
        DescribeImageScanAuthCountResponseBodyImageScan model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["ImageScan"]));
        imageScan = make_shared<DescribeImageScanAuthCountResponseBodyImageScan>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeImageScanAuthCountResponseBody() = default;
};
class DescribeImageScanAuthCountResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeImageScanAuthCountResponseBody> body{};

  DescribeImageScanAuthCountResponse() {}

  explicit DescribeImageScanAuthCountResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeImageScanAuthCountResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeImageScanAuthCountResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeImageScanAuthCountResponse() = default;
};
class DescribeImageStatisticsResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> instanceCount{};
  shared_ptr<string> requestId{};
  shared_ptr<long> riskInstanceCount{};

  DescribeImageStatisticsResponseBody() {}

  explicit DescribeImageStatisticsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceCount) {
      res["InstanceCount"] = boost::any(*instanceCount);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (riskInstanceCount) {
      res["RiskInstanceCount"] = boost::any(*riskInstanceCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceCount") != m.end() && !m["InstanceCount"].empty()) {
      instanceCount = make_shared<long>(boost::any_cast<long>(m["InstanceCount"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("RiskInstanceCount") != m.end() && !m["RiskInstanceCount"].empty()) {
      riskInstanceCount = make_shared<long>(boost::any_cast<long>(m["RiskInstanceCount"]));
    }
  }


  virtual ~DescribeImageStatisticsResponseBody() = default;
};
class DescribeImageStatisticsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeImageStatisticsResponseBody> body{};

  DescribeImageStatisticsResponse() {}

  explicit DescribeImageStatisticsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeImageStatisticsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeImageStatisticsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeImageStatisticsResponse() = default;
};
class DescribeImageVulListRequest : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> dealed{};
  shared_ptr<string> digest{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> lang{};
  shared_ptr<string> name{};
  shared_ptr<string> necessity{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> regionId{};
  shared_ptr<string> repoId{};
  shared_ptr<string> repoInstanceId{};
  shared_ptr<string> repoName{};
  shared_ptr<string> repoNamespace{};
  shared_ptr<string> repoRegionId{};
  shared_ptr<string> statusList{};
  shared_ptr<string> tag{};
  shared_ptr<string> type{};
  shared_ptr<string> uuids{};

  DescribeImageVulListRequest() {}

  explicit DescribeImageVulListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (dealed) {
      res["Dealed"] = boost::any(*dealed);
    }
    if (digest) {
      res["Digest"] = boost::any(*digest);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (necessity) {
      res["Necessity"] = boost::any(*necessity);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    if (repoId) {
      res["RepoId"] = boost::any(*repoId);
    }
    if (repoInstanceId) {
      res["RepoInstanceId"] = boost::any(*repoInstanceId);
    }
    if (repoName) {
      res["RepoName"] = boost::any(*repoName);
    }
    if (repoNamespace) {
      res["RepoNamespace"] = boost::any(*repoNamespace);
    }
    if (repoRegionId) {
      res["RepoRegionId"] = boost::any(*repoRegionId);
    }
    if (statusList) {
      res["StatusList"] = boost::any(*statusList);
    }
    if (tag) {
      res["Tag"] = boost::any(*tag);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Dealed") != m.end() && !m["Dealed"].empty()) {
      dealed = make_shared<string>(boost::any_cast<string>(m["Dealed"]));
    }
    if (m.find("Digest") != m.end() && !m["Digest"].empty()) {
      digest = make_shared<string>(boost::any_cast<string>(m["Digest"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Necessity") != m.end() && !m["Necessity"].empty()) {
      necessity = make_shared<string>(boost::any_cast<string>(m["Necessity"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
    if (m.find("RepoId") != m.end() && !m["RepoId"].empty()) {
      repoId = make_shared<string>(boost::any_cast<string>(m["RepoId"]));
    }
    if (m.find("RepoInstanceId") != m.end() && !m["RepoInstanceId"].empty()) {
      repoInstanceId = make_shared<string>(boost::any_cast<string>(m["RepoInstanceId"]));
    }
    if (m.find("RepoName") != m.end() && !m["RepoName"].empty()) {
      repoName = make_shared<string>(boost::any_cast<string>(m["RepoName"]));
    }
    if (m.find("RepoNamespace") != m.end() && !m["RepoNamespace"].empty()) {
      repoNamespace = make_shared<string>(boost::any_cast<string>(m["RepoNamespace"]));
    }
    if (m.find("RepoRegionId") != m.end() && !m["RepoRegionId"].empty()) {
      repoRegionId = make_shared<string>(boost::any_cast<string>(m["RepoRegionId"]));
    }
    if (m.find("StatusList") != m.end() && !m["StatusList"].empty()) {
      statusList = make_shared<string>(boost::any_cast<string>(m["StatusList"]));
    }
    if (m.find("Tag") != m.end() && !m["Tag"].empty()) {
      tag = make_shared<string>(boost::any_cast<string>(m["Tag"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~DescribeImageVulListRequest() = default;
};
class DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList : public Darabonba::Model {
public:
  shared_ptr<string> fullVersion{};
  shared_ptr<string> layer{};
  shared_ptr<string> matchDetail{};
  shared_ptr<vector<string>> matchList{};
  shared_ptr<string> name{};
  shared_ptr<string> path{};
  shared_ptr<string> updateCmd{};
  shared_ptr<string> version{};

  DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList() {}

  explicit DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (fullVersion) {
      res["FullVersion"] = boost::any(*fullVersion);
    }
    if (layer) {
      res["Layer"] = boost::any(*layer);
    }
    if (matchDetail) {
      res["MatchDetail"] = boost::any(*matchDetail);
    }
    if (matchList) {
      res["MatchList"] = boost::any(*matchList);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (path) {
      res["Path"] = boost::any(*path);
    }
    if (updateCmd) {
      res["UpdateCmd"] = boost::any(*updateCmd);
    }
    if (version) {
      res["Version"] = boost::any(*version);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("FullVersion") != m.end() && !m["FullVersion"].empty()) {
      fullVersion = make_shared<string>(boost::any_cast<string>(m["FullVersion"]));
    }
    if (m.find("Layer") != m.end() && !m["Layer"].empty()) {
      layer = make_shared<string>(boost::any_cast<string>(m["Layer"]));
    }
    if (m.find("MatchDetail") != m.end() && !m["MatchDetail"].empty()) {
      matchDetail = make_shared<string>(boost::any_cast<string>(m["MatchDetail"]));
    }
    if (m.find("MatchList") != m.end() && !m["MatchList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["MatchList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["MatchList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      matchList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Path") != m.end() && !m["Path"].empty()) {
      path = make_shared<string>(boost::any_cast<string>(m["Path"]));
    }
    if (m.find("UpdateCmd") != m.end() && !m["UpdateCmd"].empty()) {
      updateCmd = make_shared<string>(boost::any_cast<string>(m["UpdateCmd"]));
    }
    if (m.find("Version") != m.end() && !m["Version"].empty()) {
      version = make_shared<string>(boost::any_cast<string>(m["Version"]));
    }
  }


  virtual ~DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList() = default;
};
class DescribeImageVulListResponseBodyVulRecordsExtendContentJson : public Darabonba::Model {
public:
  shared_ptr<string> os{};
  shared_ptr<string> osRelease{};
  shared_ptr<vector<DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList>> rpmEntityList{};

  DescribeImageVulListResponseBodyVulRecordsExtendContentJson() {}

  explicit DescribeImageVulListResponseBodyVulRecordsExtendContentJson(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (os) {
      res["Os"] = boost::any(*os);
    }
    if (osRelease) {
      res["OsRelease"] = boost::any(*osRelease);
    }
    if (rpmEntityList) {
      vector<boost::any> temp1;
      for(auto item1:*rpmEntityList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["RpmEntityList"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Os") != m.end() && !m["Os"].empty()) {
      os = make_shared<string>(boost::any_cast<string>(m["Os"]));
    }
    if (m.find("OsRelease") != m.end() && !m["OsRelease"].empty()) {
      osRelease = make_shared<string>(boost::any_cast<string>(m["OsRelease"]));
    }
    if (m.find("RpmEntityList") != m.end() && !m["RpmEntityList"].empty()) {
      if (typeid(vector<boost::any>) == m["RpmEntityList"].type()) {
        vector<DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["RpmEntityList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        rpmEntityList = make_shared<vector<DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList>>(expect1);
      }
    }
  }


  virtual ~DescribeImageVulListResponseBodyVulRecordsExtendContentJson() = default;
};
class DescribeImageVulListResponseBodyVulRecords : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<bool> canUpdate{};
  shared_ptr<DescribeImageVulListResponseBodyVulRecordsExtendContentJson> extendContentJson{};
  shared_ptr<long> firstTs{};
  shared_ptr<string> imageDigest{};
  shared_ptr<long> lastTs{};
  shared_ptr<vector<string>> layers{};
  shared_ptr<long> modifyTs{};
  shared_ptr<string> name{};
  shared_ptr<string> necessity{};
  shared_ptr<long> primaryId{};
  shared_ptr<string> related{};
  shared_ptr<string> repoName{};
  shared_ptr<string> repoNamespace{};
  shared_ptr<long> status{};
  shared_ptr<string> tag{};
  shared_ptr<string> type{};
  shared_ptr<string> uuid{};

  DescribeImageVulListResponseBodyVulRecords() {}

  explicit DescribeImageVulListResponseBodyVulRecords(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (canUpdate) {
      res["CanUpdate"] = boost::any(*canUpdate);
    }
    if (extendContentJson) {
      res["ExtendContentJson"] = extendContentJson ? boost::any(extendContentJson->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (firstTs) {
      res["FirstTs"] = boost::any(*firstTs);
    }
    if (imageDigest) {
      res["ImageDigest"] = boost::any(*imageDigest);
    }
    if (lastTs) {
      res["LastTs"] = boost::any(*lastTs);
    }
    if (layers) {
      res["Layers"] = boost::any(*layers);
    }
    if (modifyTs) {
      res["ModifyTs"] = boost::any(*modifyTs);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (necessity) {
      res["Necessity"] = boost::any(*necessity);
    }
    if (primaryId) {
      res["PrimaryId"] = boost::any(*primaryId);
    }
    if (related) {
      res["Related"] = boost::any(*related);
    }
    if (repoName) {
      res["RepoName"] = boost::any(*repoName);
    }
    if (repoNamespace) {
      res["RepoNamespace"] = boost::any(*repoNamespace);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (tag) {
      res["Tag"] = boost::any(*tag);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("CanUpdate") != m.end() && !m["CanUpdate"].empty()) {
      canUpdate = make_shared<bool>(boost::any_cast<bool>(m["CanUpdate"]));
    }
    if (m.find("ExtendContentJson") != m.end() && !m["ExtendContentJson"].empty()) {
      if (typeid(map<string, boost::any>) == m["ExtendContentJson"].type()) {
        DescribeImageVulListResponseBodyVulRecordsExtendContentJson model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["ExtendContentJson"]));
        extendContentJson = make_shared<DescribeImageVulListResponseBodyVulRecordsExtendContentJson>(model1);
      }
    }
    if (m.find("FirstTs") != m.end() && !m["FirstTs"].empty()) {
      firstTs = make_shared<long>(boost::any_cast<long>(m["FirstTs"]));
    }
    if (m.find("ImageDigest") != m.end() && !m["ImageDigest"].empty()) {
      imageDigest = make_shared<string>(boost::any_cast<string>(m["ImageDigest"]));
    }
    if (m.find("LastTs") != m.end() && !m["LastTs"].empty()) {
      lastTs = make_shared<long>(boost::any_cast<long>(m["LastTs"]));
    }
    if (m.find("Layers") != m.end() && !m["Layers"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["Layers"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["Layers"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      layers = make_shared<vector<string>>(toVec1);
    }
    if (m.find("ModifyTs") != m.end() && !m["ModifyTs"].empty()) {
      modifyTs = make_shared<long>(boost::any_cast<long>(m["ModifyTs"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Necessity") != m.end() && !m["Necessity"].empty()) {
      necessity = make_shared<string>(boost::any_cast<string>(m["Necessity"]));
    }
    if (m.find("PrimaryId") != m.end() && !m["PrimaryId"].empty()) {
      primaryId = make_shared<long>(boost::any_cast<long>(m["PrimaryId"]));
    }
    if (m.find("Related") != m.end() && !m["Related"].empty()) {
      related = make_shared<string>(boost::any_cast<string>(m["Related"]));
    }
    if (m.find("RepoName") != m.end() && !m["RepoName"].empty()) {
      repoName = make_shared<string>(boost::any_cast<string>(m["RepoName"]));
    }
    if (m.find("RepoNamespace") != m.end() && !m["RepoNamespace"].empty()) {
      repoNamespace = make_shared<string>(boost::any_cast<string>(m["RepoNamespace"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("Tag") != m.end() && !m["Tag"].empty()) {
      tag = make_shared<string>(boost::any_cast<string>(m["Tag"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeImageVulListResponseBodyVulRecords() = default;
};
class DescribeImageVulListResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};
  shared_ptr<vector<DescribeImageVulListResponseBodyVulRecords>> vulRecords{};

  DescribeImageVulListResponseBody() {}

  explicit DescribeImageVulListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    if (vulRecords) {
      vector<boost::any> temp1;
      for(auto item1:*vulRecords){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["VulRecords"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
    if (m.find("VulRecords") != m.end() && !m["VulRecords"].empty()) {
      if (typeid(vector<boost::any>) == m["VulRecords"].type()) {
        vector<DescribeImageVulListResponseBodyVulRecords> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["VulRecords"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeImageVulListResponseBodyVulRecords model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        vulRecords = make_shared<vector<DescribeImageVulListResponseBodyVulRecords>>(expect1);
      }
    }
  }


  virtual ~DescribeImageVulListResponseBody() = default;
};
class DescribeImageVulListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeImageVulListResponseBody> body{};

  DescribeImageVulListResponse() {}

  explicit DescribeImageVulListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeImageVulListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeImageVulListResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeImageVulListResponse() = default;
};
class DescribeInstallCaptchaRequest : public Darabonba::Model {
public:
  shared_ptr<string> deadline{};
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};

  DescribeInstallCaptchaRequest() {}

  explicit DescribeInstallCaptchaRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (deadline) {
      res["Deadline"] = boost::any(*deadline);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Deadline") != m.end() && !m["Deadline"].empty()) {
      deadline = make_shared<string>(boost::any_cast<string>(m["Deadline"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeInstallCaptchaRequest() = default;
};
class DescribeInstallCaptchaResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> captchaCode{};
  shared_ptr<string> deadline{};
  shared_ptr<string> requestId{};

  DescribeInstallCaptchaResponseBody() {}

  explicit DescribeInstallCaptchaResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (captchaCode) {
      res["CaptchaCode"] = boost::any(*captchaCode);
    }
    if (deadline) {
      res["Deadline"] = boost::any(*deadline);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CaptchaCode") != m.end() && !m["CaptchaCode"].empty()) {
      captchaCode = make_shared<string>(boost::any_cast<string>(m["CaptchaCode"]));
    }
    if (m.find("Deadline") != m.end() && !m["Deadline"].empty()) {
      deadline = make_shared<string>(boost::any_cast<string>(m["Deadline"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeInstallCaptchaResponseBody() = default;
};
class DescribeInstallCaptchaResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeInstallCaptchaResponseBody> body{};

  DescribeInstallCaptchaResponse() {}

  explicit DescribeInstallCaptchaResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeInstallCaptchaResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeInstallCaptchaResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeInstallCaptchaResponse() = default;
};
class DescribeInstallCodesResponseBodyInstallCodes : public Darabonba::Model {
public:
  shared_ptr<string> captchaCode{};
  shared_ptr<long> expiredDate{};
  shared_ptr<long> groupId{};
  shared_ptr<string> groupName{};
  shared_ptr<bool> onlyImage{};
  shared_ptr<string> os{};
  shared_ptr<string> vendorName{};

  DescribeInstallCodesResponseBodyInstallCodes() {}

  explicit DescribeInstallCodesResponseBodyInstallCodes(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (captchaCode) {
      res["CaptchaCode"] = boost::any(*captchaCode);
    }
    if (expiredDate) {
      res["ExpiredDate"] = boost::any(*expiredDate);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (groupName) {
      res["GroupName"] = boost::any(*groupName);
    }
    if (onlyImage) {
      res["OnlyImage"] = boost::any(*onlyImage);
    }
    if (os) {
      res["Os"] = boost::any(*os);
    }
    if (vendorName) {
      res["VendorName"] = boost::any(*vendorName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CaptchaCode") != m.end() && !m["CaptchaCode"].empty()) {
      captchaCode = make_shared<string>(boost::any_cast<string>(m["CaptchaCode"]));
    }
    if (m.find("ExpiredDate") != m.end() && !m["ExpiredDate"].empty()) {
      expiredDate = make_shared<long>(boost::any_cast<long>(m["ExpiredDate"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("GroupName") != m.end() && !m["GroupName"].empty()) {
      groupName = make_shared<string>(boost::any_cast<string>(m["GroupName"]));
    }
    if (m.find("OnlyImage") != m.end() && !m["OnlyImage"].empty()) {
      onlyImage = make_shared<bool>(boost::any_cast<bool>(m["OnlyImage"]));
    }
    if (m.find("Os") != m.end() && !m["Os"].empty()) {
      os = make_shared<string>(boost::any_cast<string>(m["Os"]));
    }
    if (m.find("VendorName") != m.end() && !m["VendorName"].empty()) {
      vendorName = make_shared<string>(boost::any_cast<string>(m["VendorName"]));
    }
  }


  virtual ~DescribeInstallCodesResponseBodyInstallCodes() = default;
};
class DescribeInstallCodesResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeInstallCodesResponseBodyInstallCodes>> installCodes{};
  shared_ptr<string> requestId{};

  DescribeInstallCodesResponseBody() {}

  explicit DescribeInstallCodesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (installCodes) {
      vector<boost::any> temp1;
      for(auto item1:*installCodes){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["InstallCodes"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstallCodes") != m.end() && !m["InstallCodes"].empty()) {
      if (typeid(vector<boost::any>) == m["InstallCodes"].type()) {
        vector<DescribeInstallCodesResponseBodyInstallCodes> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["InstallCodes"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeInstallCodesResponseBodyInstallCodes model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        installCodes = make_shared<vector<DescribeInstallCodesResponseBodyInstallCodes>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeInstallCodesResponseBody() = default;
};
class DescribeInstallCodesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeInstallCodesResponseBody> body{};

  DescribeInstallCodesResponse() {}

  explicit DescribeInstallCodesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeInstallCodesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeInstallCodesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeInstallCodesResponse() = default;
};
class DescribeInstanceAntiBruteForceRulesRequest : public Darabonba::Model {
public:
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<vector<string>> uuidList{};

  DescribeInstanceAntiBruteForceRulesRequest() {}

  explicit DescribeInstanceAntiBruteForceRulesRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["UuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["UuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      uuidList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~DescribeInstanceAntiBruteForceRulesRequest() = default;
};
class DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo() {}

  explicit DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo() = default;
};
class DescribeInstanceAntiBruteForceRulesResponseBodyRules : public Darabonba::Model {
public:
  shared_ptr<long> id{};
  shared_ptr<string> name{};
  shared_ptr<string> uuid{};

  DescribeInstanceAntiBruteForceRulesResponseBodyRules() {}

  explicit DescribeInstanceAntiBruteForceRulesResponseBodyRules(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeInstanceAntiBruteForceRulesResponseBodyRules() = default;
};
class DescribeInstanceAntiBruteForceRulesResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeInstanceAntiBruteForceRulesResponseBodyRules>> rules{};

  DescribeInstanceAntiBruteForceRulesResponseBody() {}

  explicit DescribeInstanceAntiBruteForceRulesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (rules) {
      vector<boost::any> temp1;
      for(auto item1:*rules){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Rules"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Rules") != m.end() && !m["Rules"].empty()) {
      if (typeid(vector<boost::any>) == m["Rules"].type()) {
        vector<DescribeInstanceAntiBruteForceRulesResponseBodyRules> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Rules"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeInstanceAntiBruteForceRulesResponseBodyRules model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        rules = make_shared<vector<DescribeInstanceAntiBruteForceRulesResponseBodyRules>>(expect1);
      }
    }
  }


  virtual ~DescribeInstanceAntiBruteForceRulesResponseBody() = default;
};
class DescribeInstanceAntiBruteForceRulesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeInstanceAntiBruteForceRulesResponseBody> body{};

  DescribeInstanceAntiBruteForceRulesResponse() {}

  explicit DescribeInstanceAntiBruteForceRulesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeInstanceAntiBruteForceRulesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeInstanceAntiBruteForceRulesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeInstanceAntiBruteForceRulesResponse() = default;
};
class DescribeInstanceStatisticsRequest : public Darabonba::Model {
public:
  shared_ptr<string> from{};
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> uuid{};

  DescribeInstanceStatisticsRequest() {}

  explicit DescribeInstanceStatisticsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (from) {
      res["From"] = boost::any(*from);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("From") != m.end() && !m["From"].empty()) {
      from = make_shared<string>(boost::any_cast<string>(m["From"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeInstanceStatisticsRequest() = default;
};
class DescribeInstanceStatisticsResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> account{};
  shared_ptr<long> appNum{};
  shared_ptr<long> cmsNum{};
  shared_ptr<long> cveNum{};
  shared_ptr<long> emgNum{};
  shared_ptr<long> health{};
  shared_ptr<long> scaNum{};
  shared_ptr<long> suspicious{};
  shared_ptr<long> sysNum{};
  shared_ptr<long> trojan{};
  shared_ptr<string> uuid{};
  shared_ptr<long> vul{};

  DescribeInstanceStatisticsResponseBodyData() {}

  explicit DescribeInstanceStatisticsResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (account) {
      res["Account"] = boost::any(*account);
    }
    if (appNum) {
      res["AppNum"] = boost::any(*appNum);
    }
    if (cmsNum) {
      res["CmsNum"] = boost::any(*cmsNum);
    }
    if (cveNum) {
      res["CveNum"] = boost::any(*cveNum);
    }
    if (emgNum) {
      res["EmgNum"] = boost::any(*emgNum);
    }
    if (health) {
      res["Health"] = boost::any(*health);
    }
    if (scaNum) {
      res["ScaNum"] = boost::any(*scaNum);
    }
    if (suspicious) {
      res["Suspicious"] = boost::any(*suspicious);
    }
    if (sysNum) {
      res["SysNum"] = boost::any(*sysNum);
    }
    if (trojan) {
      res["Trojan"] = boost::any(*trojan);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    if (vul) {
      res["Vul"] = boost::any(*vul);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Account") != m.end() && !m["Account"].empty()) {
      account = make_shared<long>(boost::any_cast<long>(m["Account"]));
    }
    if (m.find("AppNum") != m.end() && !m["AppNum"].empty()) {
      appNum = make_shared<long>(boost::any_cast<long>(m["AppNum"]));
    }
    if (m.find("CmsNum") != m.end() && !m["CmsNum"].empty()) {
      cmsNum = make_shared<long>(boost::any_cast<long>(m["CmsNum"]));
    }
    if (m.find("CveNum") != m.end() && !m["CveNum"].empty()) {
      cveNum = make_shared<long>(boost::any_cast<long>(m["CveNum"]));
    }
    if (m.find("EmgNum") != m.end() && !m["EmgNum"].empty()) {
      emgNum = make_shared<long>(boost::any_cast<long>(m["EmgNum"]));
    }
    if (m.find("Health") != m.end() && !m["Health"].empty()) {
      health = make_shared<long>(boost::any_cast<long>(m["Health"]));
    }
    if (m.find("ScaNum") != m.end() && !m["ScaNum"].empty()) {
      scaNum = make_shared<long>(boost::any_cast<long>(m["ScaNum"]));
    }
    if (m.find("Suspicious") != m.end() && !m["Suspicious"].empty()) {
      suspicious = make_shared<long>(boost::any_cast<long>(m["Suspicious"]));
    }
    if (m.find("SysNum") != m.end() && !m["SysNum"].empty()) {
      sysNum = make_shared<long>(boost::any_cast<long>(m["SysNum"]));
    }
    if (m.find("Trojan") != m.end() && !m["Trojan"].empty()) {
      trojan = make_shared<long>(boost::any_cast<long>(m["Trojan"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
    if (m.find("Vul") != m.end() && !m["Vul"].empty()) {
      vul = make_shared<long>(boost::any_cast<long>(m["Vul"]));
    }
  }


  virtual ~DescribeInstanceStatisticsResponseBodyData() = default;
};
class DescribeInstanceStatisticsResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeInstanceStatisticsResponseBodyData>> data{};
  shared_ptr<string> requestId{};

  DescribeInstanceStatisticsResponseBody() {}

  explicit DescribeInstanceStatisticsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<DescribeInstanceStatisticsResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeInstanceStatisticsResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<DescribeInstanceStatisticsResponseBodyData>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeInstanceStatisticsResponseBody() = default;
};
class DescribeInstanceStatisticsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeInstanceStatisticsResponseBody> body{};

  DescribeInstanceStatisticsResponse() {}

  explicit DescribeInstanceStatisticsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeInstanceStatisticsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeInstanceStatisticsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeInstanceStatisticsResponse() = default;
};
class DescribeLogstoreStorageRequest : public Darabonba::Model {
public:
  shared_ptr<string> from{};
  shared_ptr<string> lang{};

  DescribeLogstoreStorageRequest() {}

  explicit DescribeLogstoreStorageRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (from) {
      res["From"] = boost::any(*from);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("From") != m.end() && !m["From"].empty()) {
      from = make_shared<string>(boost::any_cast<string>(m["From"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
  }


  virtual ~DescribeLogstoreStorageRequest() = default;
};
class DescribeLogstoreStorageResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> logstore{};
  shared_ptr<long> preserve{};
  shared_ptr<string> requestId{};
  shared_ptr<long> ttl{};
  shared_ptr<long> used{};

  DescribeLogstoreStorageResponseBody() {}

  explicit DescribeLogstoreStorageResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (logstore) {
      res["Logstore"] = boost::any(*logstore);
    }
    if (preserve) {
      res["Preserve"] = boost::any(*preserve);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (ttl) {
      res["Ttl"] = boost::any(*ttl);
    }
    if (used) {
      res["Used"] = boost::any(*used);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Logstore") != m.end() && !m["Logstore"].empty()) {
      logstore = make_shared<string>(boost::any_cast<string>(m["Logstore"]));
    }
    if (m.find("Preserve") != m.end() && !m["Preserve"].empty()) {
      preserve = make_shared<long>(boost::any_cast<long>(m["Preserve"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Ttl") != m.end() && !m["Ttl"].empty()) {
      ttl = make_shared<long>(boost::any_cast<long>(m["Ttl"]));
    }
    if (m.find("Used") != m.end() && !m["Used"].empty()) {
      used = make_shared<long>(boost::any_cast<long>(m["Used"]));
    }
  }


  virtual ~DescribeLogstoreStorageResponseBody() = default;
};
class DescribeLogstoreStorageResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeLogstoreStorageResponseBody> body{};

  DescribeLogstoreStorageResponse() {}

  explicit DescribeLogstoreStorageResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeLogstoreStorageResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeLogstoreStorageResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeLogstoreStorageResponse() = default;
};
class DescribeModuleConfigResponseBodyModuleConfigListItems : public Darabonba::Model {
public:
  shared_ptr<long> groupId{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> ip{};
  shared_ptr<string> region{};
  shared_ptr<string> uuid{};

  DescribeModuleConfigResponseBodyModuleConfigListItems() {}

  explicit DescribeModuleConfigResponseBodyModuleConfigListItems(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (ip) {
      res["Ip"] = boost::any(*ip);
    }
    if (region) {
      res["Region"] = boost::any(*region);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("Ip") != m.end() && !m["Ip"].empty()) {
      ip = make_shared<string>(boost::any_cast<string>(m["Ip"]));
    }
    if (m.find("Region") != m.end() && !m["Region"].empty()) {
      region = make_shared<string>(boost::any_cast<string>(m["Region"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeModuleConfigResponseBodyModuleConfigListItems() = default;
};
class DescribeModuleConfigResponseBodyModuleConfigList : public Darabonba::Model {
public:
  shared_ptr<string> configName{};
  shared_ptr<vector<DescribeModuleConfigResponseBodyModuleConfigListItems>> items{};
  shared_ptr<string> moduleName{};

  DescribeModuleConfigResponseBodyModuleConfigList() {}

  explicit DescribeModuleConfigResponseBodyModuleConfigList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (configName) {
      res["ConfigName"] = boost::any(*configName);
    }
    if (items) {
      vector<boost::any> temp1;
      for(auto item1:*items){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Items"] = boost::any(temp1);
    }
    if (moduleName) {
      res["ModuleName"] = boost::any(*moduleName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ConfigName") != m.end() && !m["ConfigName"].empty()) {
      configName = make_shared<string>(boost::any_cast<string>(m["ConfigName"]));
    }
    if (m.find("Items") != m.end() && !m["Items"].empty()) {
      if (typeid(vector<boost::any>) == m["Items"].type()) {
        vector<DescribeModuleConfigResponseBodyModuleConfigListItems> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Items"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeModuleConfigResponseBodyModuleConfigListItems model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        items = make_shared<vector<DescribeModuleConfigResponseBodyModuleConfigListItems>>(expect1);
      }
    }
    if (m.find("ModuleName") != m.end() && !m["ModuleName"].empty()) {
      moduleName = make_shared<string>(boost::any_cast<string>(m["ModuleName"]));
    }
  }


  virtual ~DescribeModuleConfigResponseBodyModuleConfigList() = default;
};
class DescribeModuleConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<vector<DescribeModuleConfigResponseBodyModuleConfigList>> moduleConfigList{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  DescribeModuleConfigResponseBody() {}

  explicit DescribeModuleConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (moduleConfigList) {
      vector<boost::any> temp1;
      for(auto item1:*moduleConfigList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["ModuleConfigList"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("ModuleConfigList") != m.end() && !m["ModuleConfigList"].empty()) {
      if (typeid(vector<boost::any>) == m["ModuleConfigList"].type()) {
        vector<DescribeModuleConfigResponseBodyModuleConfigList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["ModuleConfigList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeModuleConfigResponseBodyModuleConfigList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        moduleConfigList = make_shared<vector<DescribeModuleConfigResponseBodyModuleConfigList>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~DescribeModuleConfigResponseBody() = default;
};
class DescribeModuleConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeModuleConfigResponseBody> body{};

  DescribeModuleConfigResponse() {}

  explicit DescribeModuleConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeModuleConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeModuleConfigResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeModuleConfigResponse() = default;
};
class DescribeNoticeConfigRequest : public Darabonba::Model {
public:
  shared_ptr<string> sourceIp{};

  DescribeNoticeConfigRequest() {}

  explicit DescribeNoticeConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeNoticeConfigRequest() = default;
};
class DescribeNoticeConfigResponseBodyNoticeConfigList : public Darabonba::Model {
public:
  shared_ptr<long> aliUid{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> project{};
  shared_ptr<long> route{};
  shared_ptr<long> timeLimit{};

  DescribeNoticeConfigResponseBodyNoticeConfigList() {}

  explicit DescribeNoticeConfigResponseBodyNoticeConfigList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliUid) {
      res["AliUid"] = boost::any(*aliUid);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (project) {
      res["Project"] = boost::any(*project);
    }
    if (route) {
      res["Route"] = boost::any(*route);
    }
    if (timeLimit) {
      res["TimeLimit"] = boost::any(*timeLimit);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliUid") != m.end() && !m["AliUid"].empty()) {
      aliUid = make_shared<long>(boost::any_cast<long>(m["AliUid"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Project") != m.end() && !m["Project"].empty()) {
      project = make_shared<string>(boost::any_cast<string>(m["Project"]));
    }
    if (m.find("Route") != m.end() && !m["Route"].empty()) {
      route = make_shared<long>(boost::any_cast<long>(m["Route"]));
    }
    if (m.find("TimeLimit") != m.end() && !m["TimeLimit"].empty()) {
      timeLimit = make_shared<long>(boost::any_cast<long>(m["TimeLimit"]));
    }
  }


  virtual ~DescribeNoticeConfigResponseBodyNoticeConfigList() = default;
};
class DescribeNoticeConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeNoticeConfigResponseBodyNoticeConfigList>> noticeConfigList{};
  shared_ptr<string> requestId{};

  DescribeNoticeConfigResponseBody() {}

  explicit DescribeNoticeConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (noticeConfigList) {
      vector<boost::any> temp1;
      for(auto item1:*noticeConfigList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["NoticeConfigList"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("NoticeConfigList") != m.end() && !m["NoticeConfigList"].empty()) {
      if (typeid(vector<boost::any>) == m["NoticeConfigList"].type()) {
        vector<DescribeNoticeConfigResponseBodyNoticeConfigList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["NoticeConfigList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeNoticeConfigResponseBodyNoticeConfigList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        noticeConfigList = make_shared<vector<DescribeNoticeConfigResponseBodyNoticeConfigList>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeNoticeConfigResponseBody() = default;
};
class DescribeNoticeConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeNoticeConfigResponseBody> body{};

  DescribeNoticeConfigResponse() {}

  explicit DescribeNoticeConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeNoticeConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeNoticeConfigResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeNoticeConfigResponse() = default;
};
class DescribePropertyCountRequest : public Darabonba::Model {
public:
  shared_ptr<string> type{};
  shared_ptr<string> uuidList{};

  DescribePropertyCountRequest() {}

  explicit DescribePropertyCountRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      uuidList = make_shared<string>(boost::any_cast<string>(m["UuidList"]));
    }
  }


  virtual ~DescribePropertyCountRequest() = default;
};
class DescribePropertyCountResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> autorun{};
  shared_ptr<long> cron{};
  shared_ptr<long> database{};
  shared_ptr<long> lkm{};
  shared_ptr<long> port{};
  shared_ptr<long> process{};
  shared_ptr<string> requestId{};
  shared_ptr<long> sca{};
  shared_ptr<long> software{};
  shared_ptr<long> user{};
  shared_ptr<long> web{};
  shared_ptr<long> webserver{};

  DescribePropertyCountResponseBody() {}

  explicit DescribePropertyCountResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (autorun) {
      res["Autorun"] = boost::any(*autorun);
    }
    if (cron) {
      res["Cron"] = boost::any(*cron);
    }
    if (database) {
      res["Database"] = boost::any(*database);
    }
    if (lkm) {
      res["Lkm"] = boost::any(*lkm);
    }
    if (port) {
      res["Port"] = boost::any(*port);
    }
    if (process) {
      res["Process"] = boost::any(*process);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (sca) {
      res["Sca"] = boost::any(*sca);
    }
    if (software) {
      res["Software"] = boost::any(*software);
    }
    if (user) {
      res["User"] = boost::any(*user);
    }
    if (web) {
      res["Web"] = boost::any(*web);
    }
    if (webserver) {
      res["Webserver"] = boost::any(*webserver);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Autorun") != m.end() && !m["Autorun"].empty()) {
      autorun = make_shared<long>(boost::any_cast<long>(m["Autorun"]));
    }
    if (m.find("Cron") != m.end() && !m["Cron"].empty()) {
      cron = make_shared<long>(boost::any_cast<long>(m["Cron"]));
    }
    if (m.find("Database") != m.end() && !m["Database"].empty()) {
      database = make_shared<long>(boost::any_cast<long>(m["Database"]));
    }
    if (m.find("Lkm") != m.end() && !m["Lkm"].empty()) {
      lkm = make_shared<long>(boost::any_cast<long>(m["Lkm"]));
    }
    if (m.find("Port") != m.end() && !m["Port"].empty()) {
      port = make_shared<long>(boost::any_cast<long>(m["Port"]));
    }
    if (m.find("Process") != m.end() && !m["Process"].empty()) {
      process = make_shared<long>(boost::any_cast<long>(m["Process"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Sca") != m.end() && !m["Sca"].empty()) {
      sca = make_shared<long>(boost::any_cast<long>(m["Sca"]));
    }
    if (m.find("Software") != m.end() && !m["Software"].empty()) {
      software = make_shared<long>(boost::any_cast<long>(m["Software"]));
    }
    if (m.find("User") != m.end() && !m["User"].empty()) {
      user = make_shared<long>(boost::any_cast<long>(m["User"]));
    }
    if (m.find("Web") != m.end() && !m["Web"].empty()) {
      web = make_shared<long>(boost::any_cast<long>(m["Web"]));
    }
    if (m.find("Webserver") != m.end() && !m["Webserver"].empty()) {
      webserver = make_shared<long>(boost::any_cast<long>(m["Webserver"]));
    }
  }


  virtual ~DescribePropertyCountResponseBody() = default;
};
class DescribePropertyCountResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribePropertyCountResponseBody> body{};

  DescribePropertyCountResponse() {}

  explicit DescribePropertyCountResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribePropertyCountResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribePropertyCountResponseBody>(model1);
      }
    }
  }


  virtual ~DescribePropertyCountResponse() = default;
};
class DescribePropertyCronDetailRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> remark{};
  shared_ptr<string> source{};
  shared_ptr<string> user{};
  shared_ptr<string> uuid{};

  DescribePropertyCronDetailRequest() {}

  explicit DescribePropertyCronDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (remark) {
      res["Remark"] = boost::any(*remark);
    }
    if (source) {
      res["Source"] = boost::any(*source);
    }
    if (user) {
      res["User"] = boost::any(*user);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Remark") != m.end() && !m["Remark"].empty()) {
      remark = make_shared<string>(boost::any_cast<string>(m["Remark"]));
    }
    if (m.find("Source") != m.end() && !m["Source"].empty()) {
      source = make_shared<string>(boost::any_cast<string>(m["Source"]));
    }
    if (m.find("User") != m.end() && !m["User"].empty()) {
      user = make_shared<string>(boost::any_cast<string>(m["User"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribePropertyCronDetailRequest() = default;
};
class DescribePropertyCronDetailResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribePropertyCronDetailResponseBodyPageInfo() {}

  explicit DescribePropertyCronDetailResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribePropertyCronDetailResponseBodyPageInfo() = default;
};
class DescribePropertyCronDetailResponseBodyPropertys : public Darabonba::Model {
public:
  shared_ptr<string> cmd{};
  shared_ptr<string> create{};
  shared_ptr<long> createTimestamp{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> ip{};
  shared_ptr<string> md5{};
  shared_ptr<string> period{};
  shared_ptr<string> source{};
  shared_ptr<string> user{};
  shared_ptr<string> uuid{};

  DescribePropertyCronDetailResponseBodyPropertys() {}

  explicit DescribePropertyCronDetailResponseBodyPropertys(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (cmd) {
      res["Cmd"] = boost::any(*cmd);
    }
    if (create) {
      res["Create"] = boost::any(*create);
    }
    if (createTimestamp) {
      res["CreateTimestamp"] = boost::any(*createTimestamp);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (ip) {
      res["Ip"] = boost::any(*ip);
    }
    if (md5) {
      res["Md5"] = boost::any(*md5);
    }
    if (period) {
      res["Period"] = boost::any(*period);
    }
    if (source) {
      res["Source"] = boost::any(*source);
    }
    if (user) {
      res["User"] = boost::any(*user);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Cmd") != m.end() && !m["Cmd"].empty()) {
      cmd = make_shared<string>(boost::any_cast<string>(m["Cmd"]));
    }
    if (m.find("Create") != m.end() && !m["Create"].empty()) {
      create = make_shared<string>(boost::any_cast<string>(m["Create"]));
    }
    if (m.find("CreateTimestamp") != m.end() && !m["CreateTimestamp"].empty()) {
      createTimestamp = make_shared<long>(boost::any_cast<long>(m["CreateTimestamp"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("Ip") != m.end() && !m["Ip"].empty()) {
      ip = make_shared<string>(boost::any_cast<string>(m["Ip"]));
    }
    if (m.find("Md5") != m.end() && !m["Md5"].empty()) {
      md5 = make_shared<string>(boost::any_cast<string>(m["Md5"]));
    }
    if (m.find("Period") != m.end() && !m["Period"].empty()) {
      period = make_shared<string>(boost::any_cast<string>(m["Period"]));
    }
    if (m.find("Source") != m.end() && !m["Source"].empty()) {
      source = make_shared<string>(boost::any_cast<string>(m["Source"]));
    }
    if (m.find("User") != m.end() && !m["User"].empty()) {
      user = make_shared<string>(boost::any_cast<string>(m["User"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribePropertyCronDetailResponseBodyPropertys() = default;
};
class DescribePropertyCronDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribePropertyCronDetailResponseBodyPageInfo> pageInfo{};
  shared_ptr<vector<DescribePropertyCronDetailResponseBodyPropertys>> propertys{};
  shared_ptr<string> requestId{};

  DescribePropertyCronDetailResponseBody() {}

  explicit DescribePropertyCronDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (propertys) {
      vector<boost::any> temp1;
      for(auto item1:*propertys){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Propertys"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribePropertyCronDetailResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribePropertyCronDetailResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("Propertys") != m.end() && !m["Propertys"].empty()) {
      if (typeid(vector<boost::any>) == m["Propertys"].type()) {
        vector<DescribePropertyCronDetailResponseBodyPropertys> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Propertys"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribePropertyCronDetailResponseBodyPropertys model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        propertys = make_shared<vector<DescribePropertyCronDetailResponseBodyPropertys>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribePropertyCronDetailResponseBody() = default;
};
class DescribePropertyCronDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribePropertyCronDetailResponseBody> body{};

  DescribePropertyCronDetailResponse() {}

  explicit DescribePropertyCronDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribePropertyCronDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribePropertyCronDetailResponseBody>(model1);
      }
    }
  }


  virtual ~DescribePropertyCronDetailResponse() = default;
};
class DescribePropertyPortDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> bindIp{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> port{};
  shared_ptr<string> procName{};
  shared_ptr<string> remark{};
  shared_ptr<string> uuid{};

  DescribePropertyPortDetailRequest() {}

  explicit DescribePropertyPortDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (bindIp) {
      res["BindIp"] = boost::any(*bindIp);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (port) {
      res["Port"] = boost::any(*port);
    }
    if (procName) {
      res["ProcName"] = boost::any(*procName);
    }
    if (remark) {
      res["Remark"] = boost::any(*remark);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BindIp") != m.end() && !m["BindIp"].empty()) {
      bindIp = make_shared<string>(boost::any_cast<string>(m["BindIp"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Port") != m.end() && !m["Port"].empty()) {
      port = make_shared<string>(boost::any_cast<string>(m["Port"]));
    }
    if (m.find("ProcName") != m.end() && !m["ProcName"].empty()) {
      procName = make_shared<string>(boost::any_cast<string>(m["ProcName"]));
    }
    if (m.find("Remark") != m.end() && !m["Remark"].empty()) {
      remark = make_shared<string>(boost::any_cast<string>(m["Remark"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribePropertyPortDetailRequest() = default;
};
class DescribePropertyPortDetailResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribePropertyPortDetailResponseBodyPageInfo() {}

  explicit DescribePropertyPortDetailResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribePropertyPortDetailResponseBodyPageInfo() = default;
};
class DescribePropertyPortDetailResponseBodyPropertys : public Darabonba::Model {
public:
  shared_ptr<string> bindIp{};
  shared_ptr<string> create{};
  shared_ptr<long> createTimestamp{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> ip{};
  shared_ptr<string> pid{};
  shared_ptr<string> port{};
  shared_ptr<string> procName{};
  shared_ptr<string> proto{};
  shared_ptr<string> uuid{};

  DescribePropertyPortDetailResponseBodyPropertys() {}

  explicit DescribePropertyPortDetailResponseBodyPropertys(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (bindIp) {
      res["BindIp"] = boost::any(*bindIp);
    }
    if (create) {
      res["Create"] = boost::any(*create);
    }
    if (createTimestamp) {
      res["CreateTimestamp"] = boost::any(*createTimestamp);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (ip) {
      res["Ip"] = boost::any(*ip);
    }
    if (pid) {
      res["Pid"] = boost::any(*pid);
    }
    if (port) {
      res["Port"] = boost::any(*port);
    }
    if (procName) {
      res["ProcName"] = boost::any(*procName);
    }
    if (proto) {
      res["Proto"] = boost::any(*proto);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BindIp") != m.end() && !m["BindIp"].empty()) {
      bindIp = make_shared<string>(boost::any_cast<string>(m["BindIp"]));
    }
    if (m.find("Create") != m.end() && !m["Create"].empty()) {
      create = make_shared<string>(boost::any_cast<string>(m["Create"]));
    }
    if (m.find("CreateTimestamp") != m.end() && !m["CreateTimestamp"].empty()) {
      createTimestamp = make_shared<long>(boost::any_cast<long>(m["CreateTimestamp"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("Ip") != m.end() && !m["Ip"].empty()) {
      ip = make_shared<string>(boost::any_cast<string>(m["Ip"]));
    }
    if (m.find("Pid") != m.end() && !m["Pid"].empty()) {
      pid = make_shared<string>(boost::any_cast<string>(m["Pid"]));
    }
    if (m.find("Port") != m.end() && !m["Port"].empty()) {
      port = make_shared<string>(boost::any_cast<string>(m["Port"]));
    }
    if (m.find("ProcName") != m.end() && !m["ProcName"].empty()) {
      procName = make_shared<string>(boost::any_cast<string>(m["ProcName"]));
    }
    if (m.find("Proto") != m.end() && !m["Proto"].empty()) {
      proto = make_shared<string>(boost::any_cast<string>(m["Proto"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribePropertyPortDetailResponseBodyPropertys() = default;
};
class DescribePropertyPortDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribePropertyPortDetailResponseBodyPageInfo> pageInfo{};
  shared_ptr<vector<DescribePropertyPortDetailResponseBodyPropertys>> propertys{};
  shared_ptr<string> requestId{};

  DescribePropertyPortDetailResponseBody() {}

  explicit DescribePropertyPortDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (propertys) {
      vector<boost::any> temp1;
      for(auto item1:*propertys){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Propertys"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribePropertyPortDetailResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribePropertyPortDetailResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("Propertys") != m.end() && !m["Propertys"].empty()) {
      if (typeid(vector<boost::any>) == m["Propertys"].type()) {
        vector<DescribePropertyPortDetailResponseBodyPropertys> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Propertys"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribePropertyPortDetailResponseBodyPropertys model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        propertys = make_shared<vector<DescribePropertyPortDetailResponseBodyPropertys>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribePropertyPortDetailResponseBody() = default;
};
class DescribePropertyPortDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribePropertyPortDetailResponseBody> body{};

  DescribePropertyPortDetailResponse() {}

  explicit DescribePropertyPortDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribePropertyPortDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribePropertyPortDetailResponseBody>(model1);
      }
    }
  }


  virtual ~DescribePropertyPortDetailResponse() = default;
};
class DescribePropertyPortItemRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<bool> forceFlush{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> port{};

  DescribePropertyPortItemRequest() {}

  explicit DescribePropertyPortItemRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (forceFlush) {
      res["ForceFlush"] = boost::any(*forceFlush);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (port) {
      res["Port"] = boost::any(*port);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("ForceFlush") != m.end() && !m["ForceFlush"].empty()) {
      forceFlush = make_shared<bool>(boost::any_cast<bool>(m["ForceFlush"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Port") != m.end() && !m["Port"].empty()) {
      port = make_shared<string>(boost::any_cast<string>(m["Port"]));
    }
  }


  virtual ~DescribePropertyPortItemRequest() = default;
};
class DescribePropertyPortItemResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribePropertyPortItemResponseBodyPageInfo() {}

  explicit DescribePropertyPortItemResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribePropertyPortItemResponseBodyPageInfo() = default;
};
class DescribePropertyPortItemResponseBodyPropertyItems : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<string> port{};
  shared_ptr<string> proto{};

  DescribePropertyPortItemResponseBodyPropertyItems() {}

  explicit DescribePropertyPortItemResponseBodyPropertyItems(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (port) {
      res["Port"] = boost::any(*port);
    }
    if (proto) {
      res["Proto"] = boost::any(*proto);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("Port") != m.end() && !m["Port"].empty()) {
      port = make_shared<string>(boost::any_cast<string>(m["Port"]));
    }
    if (m.find("Proto") != m.end() && !m["Proto"].empty()) {
      proto = make_shared<string>(boost::any_cast<string>(m["Proto"]));
    }
  }


  virtual ~DescribePropertyPortItemResponseBodyPropertyItems() = default;
};
class DescribePropertyPortItemResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribePropertyPortItemResponseBodyPageInfo> pageInfo{};
  shared_ptr<vector<DescribePropertyPortItemResponseBodyPropertyItems>> propertyItems{};
  shared_ptr<string> requestId{};

  DescribePropertyPortItemResponseBody() {}

  explicit DescribePropertyPortItemResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (propertyItems) {
      vector<boost::any> temp1;
      for(auto item1:*propertyItems){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["PropertyItems"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribePropertyPortItemResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribePropertyPortItemResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("PropertyItems") != m.end() && !m["PropertyItems"].empty()) {
      if (typeid(vector<boost::any>) == m["PropertyItems"].type()) {
        vector<DescribePropertyPortItemResponseBodyPropertyItems> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["PropertyItems"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribePropertyPortItemResponseBodyPropertyItems model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        propertyItems = make_shared<vector<DescribePropertyPortItemResponseBodyPropertyItems>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribePropertyPortItemResponseBody() = default;
};
class DescribePropertyPortItemResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribePropertyPortItemResponseBody> body{};

  DescribePropertyPortItemResponse() {}

  explicit DescribePropertyPortItemResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribePropertyPortItemResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribePropertyPortItemResponseBody>(model1);
      }
    }
  }


  virtual ~DescribePropertyPortItemResponse() = default;
};
class DescribePropertyProcDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> cmdline{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> name{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> procTimeEnd{};
  shared_ptr<long> procTimeStart{};
  shared_ptr<string> remark{};
  shared_ptr<string> user{};
  shared_ptr<string> uuid{};

  DescribePropertyProcDetailRequest() {}

  explicit DescribePropertyProcDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (cmdline) {
      res["Cmdline"] = boost::any(*cmdline);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (procTimeEnd) {
      res["ProcTimeEnd"] = boost::any(*procTimeEnd);
    }
    if (procTimeStart) {
      res["ProcTimeStart"] = boost::any(*procTimeStart);
    }
    if (remark) {
      res["Remark"] = boost::any(*remark);
    }
    if (user) {
      res["User"] = boost::any(*user);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Cmdline") != m.end() && !m["Cmdline"].empty()) {
      cmdline = make_shared<string>(boost::any_cast<string>(m["Cmdline"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("ProcTimeEnd") != m.end() && !m["ProcTimeEnd"].empty()) {
      procTimeEnd = make_shared<long>(boost::any_cast<long>(m["ProcTimeEnd"]));
    }
    if (m.find("ProcTimeStart") != m.end() && !m["ProcTimeStart"].empty()) {
      procTimeStart = make_shared<long>(boost::any_cast<long>(m["ProcTimeStart"]));
    }
    if (m.find("Remark") != m.end() && !m["Remark"].empty()) {
      remark = make_shared<string>(boost::any_cast<string>(m["Remark"]));
    }
    if (m.find("User") != m.end() && !m["User"].empty()) {
      user = make_shared<string>(boost::any_cast<string>(m["User"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribePropertyProcDetailRequest() = default;
};
class DescribePropertyProcDetailResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribePropertyProcDetailResponseBodyPageInfo() {}

  explicit DescribePropertyProcDetailResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribePropertyProcDetailResponseBodyPageInfo() = default;
};
class DescribePropertyProcDetailResponseBodyPropertys : public Darabonba::Model {
public:
  shared_ptr<string> cmdline{};
  shared_ptr<string> create{};
  shared_ptr<long> createTimestamp{};
  shared_ptr<string> euidName{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<long> isPackage{};
  shared_ptr<string> md5{};
  shared_ptr<string> name{};
  shared_ptr<string> path{};
  shared_ptr<string> pid{};
  shared_ptr<string> pname{};
  shared_ptr<string> startTime{};
  shared_ptr<long> startTimeDt{};
  shared_ptr<string> state{};
  shared_ptr<string> user{};
  shared_ptr<string> uuid{};

  DescribePropertyProcDetailResponseBodyPropertys() {}

  explicit DescribePropertyProcDetailResponseBodyPropertys(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (cmdline) {
      res["Cmdline"] = boost::any(*cmdline);
    }
    if (create) {
      res["Create"] = boost::any(*create);
    }
    if (createTimestamp) {
      res["CreateTimestamp"] = boost::any(*createTimestamp);
    }
    if (euidName) {
      res["EuidName"] = boost::any(*euidName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (isPackage) {
      res["IsPackage"] = boost::any(*isPackage);
    }
    if (md5) {
      res["Md5"] = boost::any(*md5);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (path) {
      res["Path"] = boost::any(*path);
    }
    if (pid) {
      res["Pid"] = boost::any(*pid);
    }
    if (pname) {
      res["Pname"] = boost::any(*pname);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    if (startTimeDt) {
      res["StartTimeDt"] = boost::any(*startTimeDt);
    }
    if (state) {
      res["State"] = boost::any(*state);
    }
    if (user) {
      res["User"] = boost::any(*user);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Cmdline") != m.end() && !m["Cmdline"].empty()) {
      cmdline = make_shared<string>(boost::any_cast<string>(m["Cmdline"]));
    }
    if (m.find("Create") != m.end() && !m["Create"].empty()) {
      create = make_shared<string>(boost::any_cast<string>(m["Create"]));
    }
    if (m.find("CreateTimestamp") != m.end() && !m["CreateTimestamp"].empty()) {
      createTimestamp = make_shared<long>(boost::any_cast<long>(m["CreateTimestamp"]));
    }
    if (m.find("EuidName") != m.end() && !m["EuidName"].empty()) {
      euidName = make_shared<string>(boost::any_cast<string>(m["EuidName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("IsPackage") != m.end() && !m["IsPackage"].empty()) {
      isPackage = make_shared<long>(boost::any_cast<long>(m["IsPackage"]));
    }
    if (m.find("Md5") != m.end() && !m["Md5"].empty()) {
      md5 = make_shared<string>(boost::any_cast<string>(m["Md5"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Path") != m.end() && !m["Path"].empty()) {
      path = make_shared<string>(boost::any_cast<string>(m["Path"]));
    }
    if (m.find("Pid") != m.end() && !m["Pid"].empty()) {
      pid = make_shared<string>(boost::any_cast<string>(m["Pid"]));
    }
    if (m.find("Pname") != m.end() && !m["Pname"].empty()) {
      pname = make_shared<string>(boost::any_cast<string>(m["Pname"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<string>(boost::any_cast<string>(m["StartTime"]));
    }
    if (m.find("StartTimeDt") != m.end() && !m["StartTimeDt"].empty()) {
      startTimeDt = make_shared<long>(boost::any_cast<long>(m["StartTimeDt"]));
    }
    if (m.find("State") != m.end() && !m["State"].empty()) {
      state = make_shared<string>(boost::any_cast<string>(m["State"]));
    }
    if (m.find("User") != m.end() && !m["User"].empty()) {
      user = make_shared<string>(boost::any_cast<string>(m["User"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribePropertyProcDetailResponseBodyPropertys() = default;
};
class DescribePropertyProcDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribePropertyProcDetailResponseBodyPageInfo> pageInfo{};
  shared_ptr<vector<DescribePropertyProcDetailResponseBodyPropertys>> propertys{};
  shared_ptr<string> requestId{};

  DescribePropertyProcDetailResponseBody() {}

  explicit DescribePropertyProcDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (propertys) {
      vector<boost::any> temp1;
      for(auto item1:*propertys){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Propertys"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribePropertyProcDetailResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribePropertyProcDetailResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("Propertys") != m.end() && !m["Propertys"].empty()) {
      if (typeid(vector<boost::any>) == m["Propertys"].type()) {
        vector<DescribePropertyProcDetailResponseBodyPropertys> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Propertys"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribePropertyProcDetailResponseBodyPropertys model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        propertys = make_shared<vector<DescribePropertyProcDetailResponseBodyPropertys>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribePropertyProcDetailResponseBody() = default;
};
class DescribePropertyProcDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribePropertyProcDetailResponseBody> body{};

  DescribePropertyProcDetailResponse() {}

  explicit DescribePropertyProcDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribePropertyProcDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribePropertyProcDetailResponseBody>(model1);
      }
    }
  }


  virtual ~DescribePropertyProcDetailResponse() = default;
};
class DescribePropertyProcItemRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<bool> forceFlush{};
  shared_ptr<string> name{};
  shared_ptr<long> pageSize{};

  DescribePropertyProcItemRequest() {}

  explicit DescribePropertyProcItemRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (forceFlush) {
      res["ForceFlush"] = boost::any(*forceFlush);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("ForceFlush") != m.end() && !m["ForceFlush"].empty()) {
      forceFlush = make_shared<bool>(boost::any_cast<bool>(m["ForceFlush"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
  }


  virtual ~DescribePropertyProcItemRequest() = default;
};
class DescribePropertyProcItemResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribePropertyProcItemResponseBodyPageInfo() {}

  explicit DescribePropertyProcItemResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribePropertyProcItemResponseBodyPageInfo() = default;
};
class DescribePropertyProcItemResponseBodyPropertyItems : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<string> name{};

  DescribePropertyProcItemResponseBodyPropertyItems() {}

  explicit DescribePropertyProcItemResponseBodyPropertyItems(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
  }


  virtual ~DescribePropertyProcItemResponseBodyPropertyItems() = default;
};
class DescribePropertyProcItemResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribePropertyProcItemResponseBodyPageInfo> pageInfo{};
  shared_ptr<vector<DescribePropertyProcItemResponseBodyPropertyItems>> propertyItems{};
  shared_ptr<string> requestId{};

  DescribePropertyProcItemResponseBody() {}

  explicit DescribePropertyProcItemResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (propertyItems) {
      vector<boost::any> temp1;
      for(auto item1:*propertyItems){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["PropertyItems"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribePropertyProcItemResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribePropertyProcItemResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("PropertyItems") != m.end() && !m["PropertyItems"].empty()) {
      if (typeid(vector<boost::any>) == m["PropertyItems"].type()) {
        vector<DescribePropertyProcItemResponseBodyPropertyItems> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["PropertyItems"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribePropertyProcItemResponseBodyPropertyItems model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        propertyItems = make_shared<vector<DescribePropertyProcItemResponseBodyPropertyItems>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribePropertyProcItemResponseBody() = default;
};
class DescribePropertyProcItemResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribePropertyProcItemResponseBody> body{};

  DescribePropertyProcItemResponse() {}

  explicit DescribePropertyProcItemResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribePropertyProcItemResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribePropertyProcItemResponseBody>(model1);
      }
    }
  }


  virtual ~DescribePropertyProcItemResponse() = default;
};
class DescribePropertyScaDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> biz{};
  shared_ptr<string> bizType{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> lang{};
  shared_ptr<long> name{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> pid{};
  shared_ptr<string> port{};
  shared_ptr<long> processStartedEnd{};
  shared_ptr<long> processStartedStart{};
  shared_ptr<string> remark{};
  shared_ptr<string> scaName{};
  shared_ptr<string> scaNamePattern{};
  shared_ptr<string> scaVersion{};
  shared_ptr<string> searchInfo{};
  shared_ptr<string> searchInfoSub{};
  shared_ptr<string> searchItem{};
  shared_ptr<string> searchItemSub{};
  shared_ptr<string> user{};
  shared_ptr<string> uuid{};

  DescribePropertyScaDetailRequest() {}

  explicit DescribePropertyScaDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (biz) {
      res["Biz"] = boost::any(*biz);
    }
    if (bizType) {
      res["BizType"] = boost::any(*bizType);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (pid) {
      res["Pid"] = boost::any(*pid);
    }
    if (port) {
      res["Port"] = boost::any(*port);
    }
    if (processStartedEnd) {
      res["ProcessStartedEnd"] = boost::any(*processStartedEnd);
    }
    if (processStartedStart) {
      res["ProcessStartedStart"] = boost::any(*processStartedStart);
    }
    if (remark) {
      res["Remark"] = boost::any(*remark);
    }
    if (scaName) {
      res["ScaName"] = boost::any(*scaName);
    }
    if (scaNamePattern) {
      res["ScaNamePattern"] = boost::any(*scaNamePattern);
    }
    if (scaVersion) {
      res["ScaVersion"] = boost::any(*scaVersion);
    }
    if (searchInfo) {
      res["SearchInfo"] = boost::any(*searchInfo);
    }
    if (searchInfoSub) {
      res["SearchInfoSub"] = boost::any(*searchInfoSub);
    }
    if (searchItem) {
      res["SearchItem"] = boost::any(*searchItem);
    }
    if (searchItemSub) {
      res["SearchItemSub"] = boost::any(*searchItemSub);
    }
    if (user) {
      res["User"] = boost::any(*user);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Biz") != m.end() && !m["Biz"].empty()) {
      biz = make_shared<string>(boost::any_cast<string>(m["Biz"]));
    }
    if (m.find("BizType") != m.end() && !m["BizType"].empty()) {
      bizType = make_shared<string>(boost::any_cast<string>(m["BizType"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<long>(boost::any_cast<long>(m["Name"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Pid") != m.end() && !m["Pid"].empty()) {
      pid = make_shared<string>(boost::any_cast<string>(m["Pid"]));
    }
    if (m.find("Port") != m.end() && !m["Port"].empty()) {
      port = make_shared<string>(boost::any_cast<string>(m["Port"]));
    }
    if (m.find("ProcessStartedEnd") != m.end() && !m["ProcessStartedEnd"].empty()) {
      processStartedEnd = make_shared<long>(boost::any_cast<long>(m["ProcessStartedEnd"]));
    }
    if (m.find("ProcessStartedStart") != m.end() && !m["ProcessStartedStart"].empty()) {
      processStartedStart = make_shared<long>(boost::any_cast<long>(m["ProcessStartedStart"]));
    }
    if (m.find("Remark") != m.end() && !m["Remark"].empty()) {
      remark = make_shared<string>(boost::any_cast<string>(m["Remark"]));
    }
    if (m.find("ScaName") != m.end() && !m["ScaName"].empty()) {
      scaName = make_shared<string>(boost::any_cast<string>(m["ScaName"]));
    }
    if (m.find("ScaNamePattern") != m.end() && !m["ScaNamePattern"].empty()) {
      scaNamePattern = make_shared<string>(boost::any_cast<string>(m["ScaNamePattern"]));
    }
    if (m.find("ScaVersion") != m.end() && !m["ScaVersion"].empty()) {
      scaVersion = make_shared<string>(boost::any_cast<string>(m["ScaVersion"]));
    }
    if (m.find("SearchInfo") != m.end() && !m["SearchInfo"].empty()) {
      searchInfo = make_shared<string>(boost::any_cast<string>(m["SearchInfo"]));
    }
    if (m.find("SearchInfoSub") != m.end() && !m["SearchInfoSub"].empty()) {
      searchInfoSub = make_shared<string>(boost::any_cast<string>(m["SearchInfoSub"]));
    }
    if (m.find("SearchItem") != m.end() && !m["SearchItem"].empty()) {
      searchItem = make_shared<string>(boost::any_cast<string>(m["SearchItem"]));
    }
    if (m.find("SearchItemSub") != m.end() && !m["SearchItemSub"].empty()) {
      searchItemSub = make_shared<string>(boost::any_cast<string>(m["SearchItemSub"]));
    }
    if (m.find("User") != m.end() && !m["User"].empty()) {
      user = make_shared<string>(boost::any_cast<string>(m["User"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribePropertyScaDetailRequest() = default;
};
class DescribePropertyScaDetailResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribePropertyScaDetailResponseBodyPageInfo() {}

  explicit DescribePropertyScaDetailResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribePropertyScaDetailResponseBodyPageInfo() = default;
};
class DescribePropertyScaDetailResponseBodyPropertys : public Darabonba::Model {
public:
  shared_ptr<string> bizType{};
  shared_ptr<string> bizTypeDispaly{};
  shared_ptr<string> cmdline{};
  shared_ptr<string> configPath{};
  shared_ptr<string> containerName{};
  shared_ptr<string> create{};
  shared_ptr<long> createTimestamp{};
  shared_ptr<string> imageName{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> ip{};
  shared_ptr<string> listenIp{};
  shared_ptr<string> listenProtocol{};
  shared_ptr<string> listenStatus{};
  shared_ptr<string> name{};
  shared_ptr<string> path{};
  shared_ptr<string> pid{};
  shared_ptr<string> port{};
  shared_ptr<string> ppid{};
  shared_ptr<long> processStarted{};
  shared_ptr<string> processUser{};
  shared_ptr<string> proof{};
  shared_ptr<string> type{};
  shared_ptr<string> uuid{};
  shared_ptr<string> version{};
  shared_ptr<string> webPath{};

  DescribePropertyScaDetailResponseBodyPropertys() {}

  explicit DescribePropertyScaDetailResponseBodyPropertys(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (bizType) {
      res["BizType"] = boost::any(*bizType);
    }
    if (bizTypeDispaly) {
      res["BizTypeDispaly"] = boost::any(*bizTypeDispaly);
    }
    if (cmdline) {
      res["Cmdline"] = boost::any(*cmdline);
    }
    if (configPath) {
      res["ConfigPath"] = boost::any(*configPath);
    }
    if (containerName) {
      res["ContainerName"] = boost::any(*containerName);
    }
    if (create) {
      res["Create"] = boost::any(*create);
    }
    if (createTimestamp) {
      res["CreateTimestamp"] = boost::any(*createTimestamp);
    }
    if (imageName) {
      res["ImageName"] = boost::any(*imageName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (ip) {
      res["Ip"] = boost::any(*ip);
    }
    if (listenIp) {
      res["ListenIp"] = boost::any(*listenIp);
    }
    if (listenProtocol) {
      res["ListenProtocol"] = boost::any(*listenProtocol);
    }
    if (listenStatus) {
      res["ListenStatus"] = boost::any(*listenStatus);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (path) {
      res["Path"] = boost::any(*path);
    }
    if (pid) {
      res["Pid"] = boost::any(*pid);
    }
    if (port) {
      res["Port"] = boost::any(*port);
    }
    if (ppid) {
      res["Ppid"] = boost::any(*ppid);
    }
    if (processStarted) {
      res["ProcessStarted"] = boost::any(*processStarted);
    }
    if (processUser) {
      res["ProcessUser"] = boost::any(*processUser);
    }
    if (proof) {
      res["Proof"] = boost::any(*proof);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    if (version) {
      res["Version"] = boost::any(*version);
    }
    if (webPath) {
      res["WebPath"] = boost::any(*webPath);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BizType") != m.end() && !m["BizType"].empty()) {
      bizType = make_shared<string>(boost::any_cast<string>(m["BizType"]));
    }
    if (m.find("BizTypeDispaly") != m.end() && !m["BizTypeDispaly"].empty()) {
      bizTypeDispaly = make_shared<string>(boost::any_cast<string>(m["BizTypeDispaly"]));
    }
    if (m.find("Cmdline") != m.end() && !m["Cmdline"].empty()) {
      cmdline = make_shared<string>(boost::any_cast<string>(m["Cmdline"]));
    }
    if (m.find("ConfigPath") != m.end() && !m["ConfigPath"].empty()) {
      configPath = make_shared<string>(boost::any_cast<string>(m["ConfigPath"]));
    }
    if (m.find("ContainerName") != m.end() && !m["ContainerName"].empty()) {
      containerName = make_shared<string>(boost::any_cast<string>(m["ContainerName"]));
    }
    if (m.find("Create") != m.end() && !m["Create"].empty()) {
      create = make_shared<string>(boost::any_cast<string>(m["Create"]));
    }
    if (m.find("CreateTimestamp") != m.end() && !m["CreateTimestamp"].empty()) {
      createTimestamp = make_shared<long>(boost::any_cast<long>(m["CreateTimestamp"]));
    }
    if (m.find("ImageName") != m.end() && !m["ImageName"].empty()) {
      imageName = make_shared<string>(boost::any_cast<string>(m["ImageName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("Ip") != m.end() && !m["Ip"].empty()) {
      ip = make_shared<string>(boost::any_cast<string>(m["Ip"]));
    }
    if (m.find("ListenIp") != m.end() && !m["ListenIp"].empty()) {
      listenIp = make_shared<string>(boost::any_cast<string>(m["ListenIp"]));
    }
    if (m.find("ListenProtocol") != m.end() && !m["ListenProtocol"].empty()) {
      listenProtocol = make_shared<string>(boost::any_cast<string>(m["ListenProtocol"]));
    }
    if (m.find("ListenStatus") != m.end() && !m["ListenStatus"].empty()) {
      listenStatus = make_shared<string>(boost::any_cast<string>(m["ListenStatus"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Path") != m.end() && !m["Path"].empty()) {
      path = make_shared<string>(boost::any_cast<string>(m["Path"]));
    }
    if (m.find("Pid") != m.end() && !m["Pid"].empty()) {
      pid = make_shared<string>(boost::any_cast<string>(m["Pid"]));
    }
    if (m.find("Port") != m.end() && !m["Port"].empty()) {
      port = make_shared<string>(boost::any_cast<string>(m["Port"]));
    }
    if (m.find("Ppid") != m.end() && !m["Ppid"].empty()) {
      ppid = make_shared<string>(boost::any_cast<string>(m["Ppid"]));
    }
    if (m.find("ProcessStarted") != m.end() && !m["ProcessStarted"].empty()) {
      processStarted = make_shared<long>(boost::any_cast<long>(m["ProcessStarted"]));
    }
    if (m.find("ProcessUser") != m.end() && !m["ProcessUser"].empty()) {
      processUser = make_shared<string>(boost::any_cast<string>(m["ProcessUser"]));
    }
    if (m.find("Proof") != m.end() && !m["Proof"].empty()) {
      proof = make_shared<string>(boost::any_cast<string>(m["Proof"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
    if (m.find("Version") != m.end() && !m["Version"].empty()) {
      version = make_shared<string>(boost::any_cast<string>(m["Version"]));
    }
    if (m.find("WebPath") != m.end() && !m["WebPath"].empty()) {
      webPath = make_shared<string>(boost::any_cast<string>(m["WebPath"]));
    }
  }


  virtual ~DescribePropertyScaDetailResponseBodyPropertys() = default;
};
class DescribePropertyScaDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribePropertyScaDetailResponseBodyPageInfo> pageInfo{};
  shared_ptr<vector<DescribePropertyScaDetailResponseBodyPropertys>> propertys{};
  shared_ptr<string> requestId{};

  DescribePropertyScaDetailResponseBody() {}

  explicit DescribePropertyScaDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (propertys) {
      vector<boost::any> temp1;
      for(auto item1:*propertys){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Propertys"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribePropertyScaDetailResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribePropertyScaDetailResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("Propertys") != m.end() && !m["Propertys"].empty()) {
      if (typeid(vector<boost::any>) == m["Propertys"].type()) {
        vector<DescribePropertyScaDetailResponseBodyPropertys> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Propertys"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribePropertyScaDetailResponseBodyPropertys model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        propertys = make_shared<vector<DescribePropertyScaDetailResponseBodyPropertys>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribePropertyScaDetailResponseBody() = default;
};
class DescribePropertyScaDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribePropertyScaDetailResponseBody> body{};

  DescribePropertyScaDetailResponse() {}

  explicit DescribePropertyScaDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribePropertyScaDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribePropertyScaDetailResponseBody>(model1);
      }
    }
  }


  virtual ~DescribePropertyScaDetailResponse() = default;
};
class DescribePropertySoftwareDetailRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> installTimeEnd{};
  shared_ptr<long> installTimeStart{};
  shared_ptr<string> name{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> path{};
  shared_ptr<string> remark{};
  shared_ptr<string> softwareVersion{};
  shared_ptr<string> uuid{};

  DescribePropertySoftwareDetailRequest() {}

  explicit DescribePropertySoftwareDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (installTimeEnd) {
      res["InstallTimeEnd"] = boost::any(*installTimeEnd);
    }
    if (installTimeStart) {
      res["InstallTimeStart"] = boost::any(*installTimeStart);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (path) {
      res["Path"] = boost::any(*path);
    }
    if (remark) {
      res["Remark"] = boost::any(*remark);
    }
    if (softwareVersion) {
      res["SoftwareVersion"] = boost::any(*softwareVersion);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("InstallTimeEnd") != m.end() && !m["InstallTimeEnd"].empty()) {
      installTimeEnd = make_shared<long>(boost::any_cast<long>(m["InstallTimeEnd"]));
    }
    if (m.find("InstallTimeStart") != m.end() && !m["InstallTimeStart"].empty()) {
      installTimeStart = make_shared<long>(boost::any_cast<long>(m["InstallTimeStart"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Path") != m.end() && !m["Path"].empty()) {
      path = make_shared<string>(boost::any_cast<string>(m["Path"]));
    }
    if (m.find("Remark") != m.end() && !m["Remark"].empty()) {
      remark = make_shared<string>(boost::any_cast<string>(m["Remark"]));
    }
    if (m.find("SoftwareVersion") != m.end() && !m["SoftwareVersion"].empty()) {
      softwareVersion = make_shared<string>(boost::any_cast<string>(m["SoftwareVersion"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribePropertySoftwareDetailRequest() = default;
};
class DescribePropertySoftwareDetailResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribePropertySoftwareDetailResponseBodyPageInfo() {}

  explicit DescribePropertySoftwareDetailResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribePropertySoftwareDetailResponseBodyPageInfo() = default;
};
class DescribePropertySoftwareDetailResponseBodyPropertys : public Darabonba::Model {
public:
  shared_ptr<long> create{};
  shared_ptr<long> createTimestamp{};
  shared_ptr<string> installTime{};
  shared_ptr<long> installTimeDt{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> ip{};
  shared_ptr<string> name{};
  shared_ptr<string> path{};
  shared_ptr<string> uuid{};
  shared_ptr<string> version{};

  DescribePropertySoftwareDetailResponseBodyPropertys() {}

  explicit DescribePropertySoftwareDetailResponseBodyPropertys(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (create) {
      res["Create"] = boost::any(*create);
    }
    if (createTimestamp) {
      res["CreateTimestamp"] = boost::any(*createTimestamp);
    }
    if (installTime) {
      res["InstallTime"] = boost::any(*installTime);
    }
    if (installTimeDt) {
      res["InstallTimeDt"] = boost::any(*installTimeDt);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (ip) {
      res["Ip"] = boost::any(*ip);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (path) {
      res["Path"] = boost::any(*path);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    if (version) {
      res["Version"] = boost::any(*version);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Create") != m.end() && !m["Create"].empty()) {
      create = make_shared<long>(boost::any_cast<long>(m["Create"]));
    }
    if (m.find("CreateTimestamp") != m.end() && !m["CreateTimestamp"].empty()) {
      createTimestamp = make_shared<long>(boost::any_cast<long>(m["CreateTimestamp"]));
    }
    if (m.find("InstallTime") != m.end() && !m["InstallTime"].empty()) {
      installTime = make_shared<string>(boost::any_cast<string>(m["InstallTime"]));
    }
    if (m.find("InstallTimeDt") != m.end() && !m["InstallTimeDt"].empty()) {
      installTimeDt = make_shared<long>(boost::any_cast<long>(m["InstallTimeDt"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("Ip") != m.end() && !m["Ip"].empty()) {
      ip = make_shared<string>(boost::any_cast<string>(m["Ip"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Path") != m.end() && !m["Path"].empty()) {
      path = make_shared<string>(boost::any_cast<string>(m["Path"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
    if (m.find("Version") != m.end() && !m["Version"].empty()) {
      version = make_shared<string>(boost::any_cast<string>(m["Version"]));
    }
  }


  virtual ~DescribePropertySoftwareDetailResponseBodyPropertys() = default;
};
class DescribePropertySoftwareDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribePropertySoftwareDetailResponseBodyPageInfo> pageInfo{};
  shared_ptr<vector<DescribePropertySoftwareDetailResponseBodyPropertys>> propertys{};
  shared_ptr<string> requestId{};

  DescribePropertySoftwareDetailResponseBody() {}

  explicit DescribePropertySoftwareDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (propertys) {
      vector<boost::any> temp1;
      for(auto item1:*propertys){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Propertys"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribePropertySoftwareDetailResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribePropertySoftwareDetailResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("Propertys") != m.end() && !m["Propertys"].empty()) {
      if (typeid(vector<boost::any>) == m["Propertys"].type()) {
        vector<DescribePropertySoftwareDetailResponseBodyPropertys> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Propertys"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribePropertySoftwareDetailResponseBodyPropertys model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        propertys = make_shared<vector<DescribePropertySoftwareDetailResponseBodyPropertys>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribePropertySoftwareDetailResponseBody() = default;
};
class DescribePropertySoftwareDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribePropertySoftwareDetailResponseBody> body{};

  DescribePropertySoftwareDetailResponse() {}

  explicit DescribePropertySoftwareDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribePropertySoftwareDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribePropertySoftwareDetailResponseBody>(model1);
      }
    }
  }


  virtual ~DescribePropertySoftwareDetailResponse() = default;
};
class DescribePropertySoftwareItemRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<bool> forceFlush{};
  shared_ptr<string> name{};
  shared_ptr<long> pageSize{};

  DescribePropertySoftwareItemRequest() {}

  explicit DescribePropertySoftwareItemRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (forceFlush) {
      res["ForceFlush"] = boost::any(*forceFlush);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("ForceFlush") != m.end() && !m["ForceFlush"].empty()) {
      forceFlush = make_shared<bool>(boost::any_cast<bool>(m["ForceFlush"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
  }


  virtual ~DescribePropertySoftwareItemRequest() = default;
};
class DescribePropertySoftwareItemResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribePropertySoftwareItemResponseBodyPageInfo() {}

  explicit DescribePropertySoftwareItemResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribePropertySoftwareItemResponseBodyPageInfo() = default;
};
class DescribePropertySoftwareItemResponseBodyPropertyItems : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<string> name{};

  DescribePropertySoftwareItemResponseBodyPropertyItems() {}

  explicit DescribePropertySoftwareItemResponseBodyPropertyItems(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
  }


  virtual ~DescribePropertySoftwareItemResponseBodyPropertyItems() = default;
};
class DescribePropertySoftwareItemResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribePropertySoftwareItemResponseBodyPageInfo> pageInfo{};
  shared_ptr<vector<DescribePropertySoftwareItemResponseBodyPropertyItems>> propertyItems{};
  shared_ptr<string> requestId{};

  DescribePropertySoftwareItemResponseBody() {}

  explicit DescribePropertySoftwareItemResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (propertyItems) {
      vector<boost::any> temp1;
      for(auto item1:*propertyItems){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["PropertyItems"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribePropertySoftwareItemResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribePropertySoftwareItemResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("PropertyItems") != m.end() && !m["PropertyItems"].empty()) {
      if (typeid(vector<boost::any>) == m["PropertyItems"].type()) {
        vector<DescribePropertySoftwareItemResponseBodyPropertyItems> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["PropertyItems"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribePropertySoftwareItemResponseBodyPropertyItems model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        propertyItems = make_shared<vector<DescribePropertySoftwareItemResponseBodyPropertyItems>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribePropertySoftwareItemResponseBody() = default;
};
class DescribePropertySoftwareItemResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribePropertySoftwareItemResponseBody> body{};

  DescribePropertySoftwareItemResponse() {}

  explicit DescribePropertySoftwareItemResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribePropertySoftwareItemResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribePropertySoftwareItemResponseBody>(model1);
      }
    }
  }


  virtual ~DescribePropertySoftwareItemResponse() = default;
};
class DescribePropertyUsageNewestRequest : public Darabonba::Model {
public:
  shared_ptr<string> type{};

  DescribePropertyUsageNewestRequest() {}

  explicit DescribePropertyUsageNewestRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribePropertyUsageNewestRequest() = default;
};
class DescribePropertyUsageNewestResponseBodyNewestStatisticItems : public Darabonba::Model {
public:
  shared_ptr<long> create{};
  shared_ptr<string> name{};

  DescribePropertyUsageNewestResponseBodyNewestStatisticItems() {}

  explicit DescribePropertyUsageNewestResponseBodyNewestStatisticItems(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (create) {
      res["Create"] = boost::any(*create);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Create") != m.end() && !m["Create"].empty()) {
      create = make_shared<long>(boost::any_cast<long>(m["Create"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
  }


  virtual ~DescribePropertyUsageNewestResponseBodyNewestStatisticItems() = default;
};
class DescribePropertyUsageNewestResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> itemCount{};
  shared_ptr<vector<DescribePropertyUsageNewestResponseBodyNewestStatisticItems>> newestStatisticItems{};
  shared_ptr<string> requestId{};
  shared_ptr<string> type{};

  DescribePropertyUsageNewestResponseBody() {}

  explicit DescribePropertyUsageNewestResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (itemCount) {
      res["ItemCount"] = boost::any(*itemCount);
    }
    if (newestStatisticItems) {
      vector<boost::any> temp1;
      for(auto item1:*newestStatisticItems){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["NewestStatisticItems"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ItemCount") != m.end() && !m["ItemCount"].empty()) {
      itemCount = make_shared<long>(boost::any_cast<long>(m["ItemCount"]));
    }
    if (m.find("NewestStatisticItems") != m.end() && !m["NewestStatisticItems"].empty()) {
      if (typeid(vector<boost::any>) == m["NewestStatisticItems"].type()) {
        vector<DescribePropertyUsageNewestResponseBodyNewestStatisticItems> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["NewestStatisticItems"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribePropertyUsageNewestResponseBodyNewestStatisticItems model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        newestStatisticItems = make_shared<vector<DescribePropertyUsageNewestResponseBodyNewestStatisticItems>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribePropertyUsageNewestResponseBody() = default;
};
class DescribePropertyUsageNewestResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribePropertyUsageNewestResponseBody> body{};

  DescribePropertyUsageNewestResponse() {}

  explicit DescribePropertyUsageNewestResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribePropertyUsageNewestResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribePropertyUsageNewestResponseBody>(model1);
      }
    }
  }


  virtual ~DescribePropertyUsageNewestResponse() = default;
};
class DescribePropertyUserDetailRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> isRoot{};
  shared_ptr<long> lastLoginTimeEnd{};
  shared_ptr<long> lastLoginTimeStart{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> remark{};
  shared_ptr<string> user{};
  shared_ptr<string> uuid{};

  DescribePropertyUserDetailRequest() {}

  explicit DescribePropertyUserDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (isRoot) {
      res["IsRoot"] = boost::any(*isRoot);
    }
    if (lastLoginTimeEnd) {
      res["LastLoginTimeEnd"] = boost::any(*lastLoginTimeEnd);
    }
    if (lastLoginTimeStart) {
      res["LastLoginTimeStart"] = boost::any(*lastLoginTimeStart);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (remark) {
      res["Remark"] = boost::any(*remark);
    }
    if (user) {
      res["User"] = boost::any(*user);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("IsRoot") != m.end() && !m["IsRoot"].empty()) {
      isRoot = make_shared<string>(boost::any_cast<string>(m["IsRoot"]));
    }
    if (m.find("LastLoginTimeEnd") != m.end() && !m["LastLoginTimeEnd"].empty()) {
      lastLoginTimeEnd = make_shared<long>(boost::any_cast<long>(m["LastLoginTimeEnd"]));
    }
    if (m.find("LastLoginTimeStart") != m.end() && !m["LastLoginTimeStart"].empty()) {
      lastLoginTimeStart = make_shared<long>(boost::any_cast<long>(m["LastLoginTimeStart"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Remark") != m.end() && !m["Remark"].empty()) {
      remark = make_shared<string>(boost::any_cast<string>(m["Remark"]));
    }
    if (m.find("User") != m.end() && !m["User"].empty()) {
      user = make_shared<string>(boost::any_cast<string>(m["User"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribePropertyUserDetailRequest() = default;
};
class DescribePropertyUserDetailResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribePropertyUserDetailResponseBodyPageInfo() {}

  explicit DescribePropertyUserDetailResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribePropertyUserDetailResponseBodyPageInfo() = default;
};
class DescribePropertyUserDetailResponseBodyPropertys : public Darabonba::Model {
public:
  shared_ptr<string> accountsExpirationDate{};
  shared_ptr<string> create{};
  shared_ptr<long> createTimestamp{};
  shared_ptr<vector<string>> groupNames{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> ip{};
  shared_ptr<long> isCouldLogin{};
  shared_ptr<long> isPasswdExpired{};
  shared_ptr<long> isPasswdLocked{};
  shared_ptr<string> isRoot{};
  shared_ptr<long> isSudoer{};
  shared_ptr<long> isUserExpired{};
  shared_ptr<string> lastLoginIp{};
  shared_ptr<string> lastLoginTime{};
  shared_ptr<long> lastLoginTimeDt{};
  shared_ptr<long> lastLoginTimestamp{};
  shared_ptr<string> passwordExpirationDate{};
  shared_ptr<string> status{};
  shared_ptr<string> user{};
  shared_ptr<string> uuid{};

  DescribePropertyUserDetailResponseBodyPropertys() {}

  explicit DescribePropertyUserDetailResponseBodyPropertys(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountsExpirationDate) {
      res["AccountsExpirationDate"] = boost::any(*accountsExpirationDate);
    }
    if (create) {
      res["Create"] = boost::any(*create);
    }
    if (createTimestamp) {
      res["CreateTimestamp"] = boost::any(*createTimestamp);
    }
    if (groupNames) {
      res["GroupNames"] = boost::any(*groupNames);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (ip) {
      res["Ip"] = boost::any(*ip);
    }
    if (isCouldLogin) {
      res["IsCouldLogin"] = boost::any(*isCouldLogin);
    }
    if (isPasswdExpired) {
      res["IsPasswdExpired"] = boost::any(*isPasswdExpired);
    }
    if (isPasswdLocked) {
      res["IsPasswdLocked"] = boost::any(*isPasswdLocked);
    }
    if (isRoot) {
      res["IsRoot"] = boost::any(*isRoot);
    }
    if (isSudoer) {
      res["IsSudoer"] = boost::any(*isSudoer);
    }
    if (isUserExpired) {
      res["IsUserExpired"] = boost::any(*isUserExpired);
    }
    if (lastLoginIp) {
      res["LastLoginIp"] = boost::any(*lastLoginIp);
    }
    if (lastLoginTime) {
      res["LastLoginTime"] = boost::any(*lastLoginTime);
    }
    if (lastLoginTimeDt) {
      res["LastLoginTimeDt"] = boost::any(*lastLoginTimeDt);
    }
    if (lastLoginTimestamp) {
      res["LastLoginTimestamp"] = boost::any(*lastLoginTimestamp);
    }
    if (passwordExpirationDate) {
      res["PasswordExpirationDate"] = boost::any(*passwordExpirationDate);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (user) {
      res["User"] = boost::any(*user);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountsExpirationDate") != m.end() && !m["AccountsExpirationDate"].empty()) {
      accountsExpirationDate = make_shared<string>(boost::any_cast<string>(m["AccountsExpirationDate"]));
    }
    if (m.find("Create") != m.end() && !m["Create"].empty()) {
      create = make_shared<string>(boost::any_cast<string>(m["Create"]));
    }
    if (m.find("CreateTimestamp") != m.end() && !m["CreateTimestamp"].empty()) {
      createTimestamp = make_shared<long>(boost::any_cast<long>(m["CreateTimestamp"]));
    }
    if (m.find("GroupNames") != m.end() && !m["GroupNames"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["GroupNames"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupNames"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      groupNames = make_shared<vector<string>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("Ip") != m.end() && !m["Ip"].empty()) {
      ip = make_shared<string>(boost::any_cast<string>(m["Ip"]));
    }
    if (m.find("IsCouldLogin") != m.end() && !m["IsCouldLogin"].empty()) {
      isCouldLogin = make_shared<long>(boost::any_cast<long>(m["IsCouldLogin"]));
    }
    if (m.find("IsPasswdExpired") != m.end() && !m["IsPasswdExpired"].empty()) {
      isPasswdExpired = make_shared<long>(boost::any_cast<long>(m["IsPasswdExpired"]));
    }
    if (m.find("IsPasswdLocked") != m.end() && !m["IsPasswdLocked"].empty()) {
      isPasswdLocked = make_shared<long>(boost::any_cast<long>(m["IsPasswdLocked"]));
    }
    if (m.find("IsRoot") != m.end() && !m["IsRoot"].empty()) {
      isRoot = make_shared<string>(boost::any_cast<string>(m["IsRoot"]));
    }
    if (m.find("IsSudoer") != m.end() && !m["IsSudoer"].empty()) {
      isSudoer = make_shared<long>(boost::any_cast<long>(m["IsSudoer"]));
    }
    if (m.find("IsUserExpired") != m.end() && !m["IsUserExpired"].empty()) {
      isUserExpired = make_shared<long>(boost::any_cast<long>(m["IsUserExpired"]));
    }
    if (m.find("LastLoginIp") != m.end() && !m["LastLoginIp"].empty()) {
      lastLoginIp = make_shared<string>(boost::any_cast<string>(m["LastLoginIp"]));
    }
    if (m.find("LastLoginTime") != m.end() && !m["LastLoginTime"].empty()) {
      lastLoginTime = make_shared<string>(boost::any_cast<string>(m["LastLoginTime"]));
    }
    if (m.find("LastLoginTimeDt") != m.end() && !m["LastLoginTimeDt"].empty()) {
      lastLoginTimeDt = make_shared<long>(boost::any_cast<long>(m["LastLoginTimeDt"]));
    }
    if (m.find("LastLoginTimestamp") != m.end() && !m["LastLoginTimestamp"].empty()) {
      lastLoginTimestamp = make_shared<long>(boost::any_cast<long>(m["LastLoginTimestamp"]));
    }
    if (m.find("PasswordExpirationDate") != m.end() && !m["PasswordExpirationDate"].empty()) {
      passwordExpirationDate = make_shared<string>(boost::any_cast<string>(m["PasswordExpirationDate"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("User") != m.end() && !m["User"].empty()) {
      user = make_shared<string>(boost::any_cast<string>(m["User"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribePropertyUserDetailResponseBodyPropertys() = default;
};
class DescribePropertyUserDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribePropertyUserDetailResponseBodyPageInfo> pageInfo{};
  shared_ptr<vector<DescribePropertyUserDetailResponseBodyPropertys>> propertys{};
  shared_ptr<string> requestId{};

  DescribePropertyUserDetailResponseBody() {}

  explicit DescribePropertyUserDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (propertys) {
      vector<boost::any> temp1;
      for(auto item1:*propertys){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Propertys"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribePropertyUserDetailResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribePropertyUserDetailResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("Propertys") != m.end() && !m["Propertys"].empty()) {
      if (typeid(vector<boost::any>) == m["Propertys"].type()) {
        vector<DescribePropertyUserDetailResponseBodyPropertys> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Propertys"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribePropertyUserDetailResponseBodyPropertys model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        propertys = make_shared<vector<DescribePropertyUserDetailResponseBodyPropertys>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribePropertyUserDetailResponseBody() = default;
};
class DescribePropertyUserDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribePropertyUserDetailResponseBody> body{};

  DescribePropertyUserDetailResponse() {}

  explicit DescribePropertyUserDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribePropertyUserDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribePropertyUserDetailResponseBody>(model1);
      }
    }
  }


  virtual ~DescribePropertyUserDetailResponse() = default;
};
class DescribePropertyUserItemRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<bool> forceFlush{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> user{};

  DescribePropertyUserItemRequest() {}

  explicit DescribePropertyUserItemRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (forceFlush) {
      res["ForceFlush"] = boost::any(*forceFlush);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (user) {
      res["User"] = boost::any(*user);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("ForceFlush") != m.end() && !m["ForceFlush"].empty()) {
      forceFlush = make_shared<bool>(boost::any_cast<bool>(m["ForceFlush"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("User") != m.end() && !m["User"].empty()) {
      user = make_shared<string>(boost::any_cast<string>(m["User"]));
    }
  }


  virtual ~DescribePropertyUserItemRequest() = default;
};
class DescribePropertyUserItemResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribePropertyUserItemResponseBodyPageInfo() {}

  explicit DescribePropertyUserItemResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribePropertyUserItemResponseBodyPageInfo() = default;
};
class DescribePropertyUserItemResponseBodyPropertyItems : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<string> user{};

  DescribePropertyUserItemResponseBodyPropertyItems() {}

  explicit DescribePropertyUserItemResponseBodyPropertyItems(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (user) {
      res["User"] = boost::any(*user);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("User") != m.end() && !m["User"].empty()) {
      user = make_shared<string>(boost::any_cast<string>(m["User"]));
    }
  }


  virtual ~DescribePropertyUserItemResponseBodyPropertyItems() = default;
};
class DescribePropertyUserItemResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribePropertyUserItemResponseBodyPageInfo> pageInfo{};
  shared_ptr<vector<DescribePropertyUserItemResponseBodyPropertyItems>> propertyItems{};
  shared_ptr<string> requestId{};

  DescribePropertyUserItemResponseBody() {}

  explicit DescribePropertyUserItemResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (propertyItems) {
      vector<boost::any> temp1;
      for(auto item1:*propertyItems){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["PropertyItems"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribePropertyUserItemResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribePropertyUserItemResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("PropertyItems") != m.end() && !m["PropertyItems"].empty()) {
      if (typeid(vector<boost::any>) == m["PropertyItems"].type()) {
        vector<DescribePropertyUserItemResponseBodyPropertyItems> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["PropertyItems"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribePropertyUserItemResponseBodyPropertyItems model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        propertyItems = make_shared<vector<DescribePropertyUserItemResponseBodyPropertyItems>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribePropertyUserItemResponseBody() = default;
};
class DescribePropertyUserItemResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribePropertyUserItemResponseBody> body{};

  DescribePropertyUserItemResponse() {}

  explicit DescribePropertyUserItemResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribePropertyUserItemResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribePropertyUserItemResponseBody>(model1);
      }
    }
  }


  virtual ~DescribePropertyUserItemResponse() = default;
};
class DescribeRestoreJobsRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> machineRemark{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> status{};

  DescribeRestoreJobsRequest() {}

  explicit DescribeRestoreJobsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (machineRemark) {
      res["MachineRemark"] = boost::any(*machineRemark);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("MachineRemark") != m.end() && !m["MachineRemark"].empty()) {
      machineRemark = make_shared<string>(boost::any_cast<string>(m["MachineRemark"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
  }


  virtual ~DescribeRestoreJobsRequest() = default;
};
class DescribeRestoreJobsResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeRestoreJobsResponseBodyPageInfo() {}

  explicit DescribeRestoreJobsResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeRestoreJobsResponseBodyPageInfo() = default;
};
class DescribeRestoreJobsResponseBodyRestoreJobs : public Darabonba::Model {
public:
  shared_ptr<long> actualBytes{};
  shared_ptr<long> bytesDone{};
  shared_ptr<long> bytesTotal{};
  shared_ptr<string> clientId{};
  shared_ptr<long> completeTime{};
  shared_ptr<long> createdTime{};
  shared_ptr<long> duration{};
  shared_ptr<long> errorCount{};
  shared_ptr<string> errorFile{};
  shared_ptr<string> errorFileUrl{};
  shared_ptr<string> errorType{};
  shared_ptr<long> eta{};
  shared_ptr<string> excludes{};
  shared_ptr<string> exitCode{};
  shared_ptr<string> gmtCreate{};
  shared_ptr<string> gmtModified{};
  shared_ptr<string> includes{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<long> itemsDone{};
  shared_ptr<long> itemsTotal{};
  shared_ptr<string> message{};
  shared_ptr<long> percentage{};
  shared_ptr<string> requestId{};
  shared_ptr<string> restoreId{};
  shared_ptr<string> restoreName{};
  shared_ptr<string> restoreType{};
  shared_ptr<string> snapshotHash{};
  shared_ptr<string> snapshotId{};
  shared_ptr<string> snapshotVersion{};
  shared_ptr<string> source{};
  shared_ptr<string> sourceClientId{};
  shared_ptr<long> speed{};
  shared_ptr<string> status{};
  shared_ptr<string> target{};
  shared_ptr<long> updatedTime{};
  shared_ptr<string> uuid{};
  shared_ptr<string> vaultId{};

  DescribeRestoreJobsResponseBodyRestoreJobs() {}

  explicit DescribeRestoreJobsResponseBodyRestoreJobs(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (actualBytes) {
      res["ActualBytes"] = boost::any(*actualBytes);
    }
    if (bytesDone) {
      res["BytesDone"] = boost::any(*bytesDone);
    }
    if (bytesTotal) {
      res["BytesTotal"] = boost::any(*bytesTotal);
    }
    if (clientId) {
      res["ClientId"] = boost::any(*clientId);
    }
    if (completeTime) {
      res["CompleteTime"] = boost::any(*completeTime);
    }
    if (createdTime) {
      res["CreatedTime"] = boost::any(*createdTime);
    }
    if (duration) {
      res["Duration"] = boost::any(*duration);
    }
    if (errorCount) {
      res["ErrorCount"] = boost::any(*errorCount);
    }
    if (errorFile) {
      res["ErrorFile"] = boost::any(*errorFile);
    }
    if (errorFileUrl) {
      res["ErrorFileUrl"] = boost::any(*errorFileUrl);
    }
    if (errorType) {
      res["ErrorType"] = boost::any(*errorType);
    }
    if (eta) {
      res["Eta"] = boost::any(*eta);
    }
    if (excludes) {
      res["Excludes"] = boost::any(*excludes);
    }
    if (exitCode) {
      res["ExitCode"] = boost::any(*exitCode);
    }
    if (gmtCreate) {
      res["GmtCreate"] = boost::any(*gmtCreate);
    }
    if (gmtModified) {
      res["GmtModified"] = boost::any(*gmtModified);
    }
    if (includes) {
      res["Includes"] = boost::any(*includes);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (itemsDone) {
      res["ItemsDone"] = boost::any(*itemsDone);
    }
    if (itemsTotal) {
      res["ItemsTotal"] = boost::any(*itemsTotal);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (percentage) {
      res["Percentage"] = boost::any(*percentage);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (restoreId) {
      res["RestoreId"] = boost::any(*restoreId);
    }
    if (restoreName) {
      res["RestoreName"] = boost::any(*restoreName);
    }
    if (restoreType) {
      res["RestoreType"] = boost::any(*restoreType);
    }
    if (snapshotHash) {
      res["SnapshotHash"] = boost::any(*snapshotHash);
    }
    if (snapshotId) {
      res["SnapshotId"] = boost::any(*snapshotId);
    }
    if (snapshotVersion) {
      res["SnapshotVersion"] = boost::any(*snapshotVersion);
    }
    if (source) {
      res["Source"] = boost::any(*source);
    }
    if (sourceClientId) {
      res["SourceClientId"] = boost::any(*sourceClientId);
    }
    if (speed) {
      res["Speed"] = boost::any(*speed);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (target) {
      res["Target"] = boost::any(*target);
    }
    if (updatedTime) {
      res["UpdatedTime"] = boost::any(*updatedTime);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    if (vaultId) {
      res["VaultId"] = boost::any(*vaultId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ActualBytes") != m.end() && !m["ActualBytes"].empty()) {
      actualBytes = make_shared<long>(boost::any_cast<long>(m["ActualBytes"]));
    }
    if (m.find("BytesDone") != m.end() && !m["BytesDone"].empty()) {
      bytesDone = make_shared<long>(boost::any_cast<long>(m["BytesDone"]));
    }
    if (m.find("BytesTotal") != m.end() && !m["BytesTotal"].empty()) {
      bytesTotal = make_shared<long>(boost::any_cast<long>(m["BytesTotal"]));
    }
    if (m.find("ClientId") != m.end() && !m["ClientId"].empty()) {
      clientId = make_shared<string>(boost::any_cast<string>(m["ClientId"]));
    }
    if (m.find("CompleteTime") != m.end() && !m["CompleteTime"].empty()) {
      completeTime = make_shared<long>(boost::any_cast<long>(m["CompleteTime"]));
    }
    if (m.find("CreatedTime") != m.end() && !m["CreatedTime"].empty()) {
      createdTime = make_shared<long>(boost::any_cast<long>(m["CreatedTime"]));
    }
    if (m.find("Duration") != m.end() && !m["Duration"].empty()) {
      duration = make_shared<long>(boost::any_cast<long>(m["Duration"]));
    }
    if (m.find("ErrorCount") != m.end() && !m["ErrorCount"].empty()) {
      errorCount = make_shared<long>(boost::any_cast<long>(m["ErrorCount"]));
    }
    if (m.find("ErrorFile") != m.end() && !m["ErrorFile"].empty()) {
      errorFile = make_shared<string>(boost::any_cast<string>(m["ErrorFile"]));
    }
    if (m.find("ErrorFileUrl") != m.end() && !m["ErrorFileUrl"].empty()) {
      errorFileUrl = make_shared<string>(boost::any_cast<string>(m["ErrorFileUrl"]));
    }
    if (m.find("ErrorType") != m.end() && !m["ErrorType"].empty()) {
      errorType = make_shared<string>(boost::any_cast<string>(m["ErrorType"]));
    }
    if (m.find("Eta") != m.end() && !m["Eta"].empty()) {
      eta = make_shared<long>(boost::any_cast<long>(m["Eta"]));
    }
    if (m.find("Excludes") != m.end() && !m["Excludes"].empty()) {
      excludes = make_shared<string>(boost::any_cast<string>(m["Excludes"]));
    }
    if (m.find("ExitCode") != m.end() && !m["ExitCode"].empty()) {
      exitCode = make_shared<string>(boost::any_cast<string>(m["ExitCode"]));
    }
    if (m.find("GmtCreate") != m.end() && !m["GmtCreate"].empty()) {
      gmtCreate = make_shared<string>(boost::any_cast<string>(m["GmtCreate"]));
    }
    if (m.find("GmtModified") != m.end() && !m["GmtModified"].empty()) {
      gmtModified = make_shared<string>(boost::any_cast<string>(m["GmtModified"]));
    }
    if (m.find("Includes") != m.end() && !m["Includes"].empty()) {
      includes = make_shared<string>(boost::any_cast<string>(m["Includes"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("ItemsDone") != m.end() && !m["ItemsDone"].empty()) {
      itemsDone = make_shared<long>(boost::any_cast<long>(m["ItemsDone"]));
    }
    if (m.find("ItemsTotal") != m.end() && !m["ItemsTotal"].empty()) {
      itemsTotal = make_shared<long>(boost::any_cast<long>(m["ItemsTotal"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("Percentage") != m.end() && !m["Percentage"].empty()) {
      percentage = make_shared<long>(boost::any_cast<long>(m["Percentage"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("RestoreId") != m.end() && !m["RestoreId"].empty()) {
      restoreId = make_shared<string>(boost::any_cast<string>(m["RestoreId"]));
    }
    if (m.find("RestoreName") != m.end() && !m["RestoreName"].empty()) {
      restoreName = make_shared<string>(boost::any_cast<string>(m["RestoreName"]));
    }
    if (m.find("RestoreType") != m.end() && !m["RestoreType"].empty()) {
      restoreType = make_shared<string>(boost::any_cast<string>(m["RestoreType"]));
    }
    if (m.find("SnapshotHash") != m.end() && !m["SnapshotHash"].empty()) {
      snapshotHash = make_shared<string>(boost::any_cast<string>(m["SnapshotHash"]));
    }
    if (m.find("SnapshotId") != m.end() && !m["SnapshotId"].empty()) {
      snapshotId = make_shared<string>(boost::any_cast<string>(m["SnapshotId"]));
    }
    if (m.find("SnapshotVersion") != m.end() && !m["SnapshotVersion"].empty()) {
      snapshotVersion = make_shared<string>(boost::any_cast<string>(m["SnapshotVersion"]));
    }
    if (m.find("Source") != m.end() && !m["Source"].empty()) {
      source = make_shared<string>(boost::any_cast<string>(m["Source"]));
    }
    if (m.find("SourceClientId") != m.end() && !m["SourceClientId"].empty()) {
      sourceClientId = make_shared<string>(boost::any_cast<string>(m["SourceClientId"]));
    }
    if (m.find("Speed") != m.end() && !m["Speed"].empty()) {
      speed = make_shared<long>(boost::any_cast<long>(m["Speed"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("Target") != m.end() && !m["Target"].empty()) {
      target = make_shared<string>(boost::any_cast<string>(m["Target"]));
    }
    if (m.find("UpdatedTime") != m.end() && !m["UpdatedTime"].empty()) {
      updatedTime = make_shared<long>(boost::any_cast<long>(m["UpdatedTime"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
    if (m.find("VaultId") != m.end() && !m["VaultId"].empty()) {
      vaultId = make_shared<string>(boost::any_cast<string>(m["VaultId"]));
    }
  }


  virtual ~DescribeRestoreJobsResponseBodyRestoreJobs() = default;
};
class DescribeRestoreJobsResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeRestoreJobsResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeRestoreJobsResponseBodyRestoreJobs>> restoreJobs{};

  DescribeRestoreJobsResponseBody() {}

  explicit DescribeRestoreJobsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (restoreJobs) {
      vector<boost::any> temp1;
      for(auto item1:*restoreJobs){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["RestoreJobs"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeRestoreJobsResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeRestoreJobsResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("RestoreJobs") != m.end() && !m["RestoreJobs"].empty()) {
      if (typeid(vector<boost::any>) == m["RestoreJobs"].type()) {
        vector<DescribeRestoreJobsResponseBodyRestoreJobs> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["RestoreJobs"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeRestoreJobsResponseBodyRestoreJobs model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        restoreJobs = make_shared<vector<DescribeRestoreJobsResponseBodyRestoreJobs>>(expect1);
      }
    }
  }


  virtual ~DescribeRestoreJobsResponseBody() = default;
};
class DescribeRestoreJobsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeRestoreJobsResponseBody> body{};

  DescribeRestoreJobsResponse() {}

  explicit DescribeRestoreJobsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeRestoreJobsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeRestoreJobsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeRestoreJobsResponse() = default;
};
class DescribeRiskCheckItemResultRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> itemId{};
  shared_ptr<string> lang{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};

  DescribeRiskCheckItemResultRequest() {}

  explicit DescribeRiskCheckItemResultRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (itemId) {
      res["ItemId"] = boost::any(*itemId);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("ItemId") != m.end() && !m["ItemId"].empty()) {
      itemId = make_shared<long>(boost::any_cast<long>(m["ItemId"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeRiskCheckItemResultRequest() = default;
};
class DescribeRiskCheckItemResultResponseBodyPageContentResource : public Darabonba::Model {
public:
  shared_ptr<string> contentResource{};
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageCount{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeRiskCheckItemResultResponseBodyPageContentResource() {}

  explicit DescribeRiskCheckItemResultResponseBodyPageContentResource(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (contentResource) {
      res["ContentResource"] = boost::any(*contentResource);
    }
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageCount) {
      res["PageCount"] = boost::any(*pageCount);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ContentResource") != m.end() && !m["ContentResource"].empty()) {
      contentResource = make_shared<string>(boost::any_cast<string>(m["ContentResource"]));
    }
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageCount") != m.end() && !m["PageCount"].empty()) {
      pageCount = make_shared<long>(boost::any_cast<long>(m["PageCount"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeRiskCheckItemResultResponseBodyPageContentResource() = default;
};
class DescribeRiskCheckItemResultResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeRiskCheckItemResultResponseBodyPageContentResource> pageContentResource{};
  shared_ptr<string> requestId{};

  DescribeRiskCheckItemResultResponseBody() {}

  explicit DescribeRiskCheckItemResultResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageContentResource) {
      res["PageContentResource"] = pageContentResource ? boost::any(pageContentResource->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageContentResource") != m.end() && !m["PageContentResource"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageContentResource"].type()) {
        DescribeRiskCheckItemResultResponseBodyPageContentResource model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageContentResource"]));
        pageContentResource = make_shared<DescribeRiskCheckItemResultResponseBodyPageContentResource>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeRiskCheckItemResultResponseBody() = default;
};
class DescribeRiskCheckItemResultResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeRiskCheckItemResultResponseBody> body{};

  DescribeRiskCheckItemResultResponse() {}

  explicit DescribeRiskCheckItemResultResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeRiskCheckItemResultResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeRiskCheckItemResultResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeRiskCheckItemResultResponse() = default;
};
class DescribeRiskCheckResultRequest : public Darabonba::Model {
public:
  shared_ptr<string> assetType{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> groupId{};
  shared_ptr<vector<string>> itemIds{};
  shared_ptr<string> lang{};
  shared_ptr<string> name{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> queryFlag{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> riskLevel{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> status{};

  DescribeRiskCheckResultRequest() {}

  explicit DescribeRiskCheckResultRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (assetType) {
      res["AssetType"] = boost::any(*assetType);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (itemIds) {
      res["ItemIds"] = boost::any(*itemIds);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (queryFlag) {
      res["QueryFlag"] = boost::any(*queryFlag);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (riskLevel) {
      res["RiskLevel"] = boost::any(*riskLevel);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AssetType") != m.end() && !m["AssetType"].empty()) {
      assetType = make_shared<string>(boost::any_cast<string>(m["AssetType"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("ItemIds") != m.end() && !m["ItemIds"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["ItemIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ItemIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      itemIds = make_shared<vector<string>>(toVec1);
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("QueryFlag") != m.end() && !m["QueryFlag"].empty()) {
      queryFlag = make_shared<string>(boost::any_cast<string>(m["QueryFlag"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("RiskLevel") != m.end() && !m["RiskLevel"].empty()) {
      riskLevel = make_shared<string>(boost::any_cast<string>(m["RiskLevel"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
  }


  virtual ~DescribeRiskCheckResultRequest() = default;
};
class DescribeRiskCheckResultResponseBodyListRiskItemResources : public Darabonba::Model {
public:
  shared_ptr<string> contentResource{};
  shared_ptr<string> resourceName{};

  DescribeRiskCheckResultResponseBodyListRiskItemResources() {}

  explicit DescribeRiskCheckResultResponseBodyListRiskItemResources(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (contentResource) {
      res["ContentResource"] = boost::any(*contentResource);
    }
    if (resourceName) {
      res["ResourceName"] = boost::any(*resourceName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ContentResource") != m.end() && !m["ContentResource"].empty()) {
      contentResource = make_shared<string>(boost::any_cast<string>(m["ContentResource"]));
    }
    if (m.find("ResourceName") != m.end() && !m["ResourceName"].empty()) {
      resourceName = make_shared<string>(boost::any_cast<string>(m["ResourceName"]));
    }
  }


  virtual ~DescribeRiskCheckResultResponseBodyListRiskItemResources() = default;
};
class DescribeRiskCheckResultResponseBodyList : public Darabonba::Model {
public:
  shared_ptr<long> affectedCount{};
  shared_ptr<long> checkTime{};
  shared_ptr<long> itemId{};
  shared_ptr<long> remainingTime{};
  shared_ptr<string> repairStatus{};
  shared_ptr<string> riskAssertType{};
  shared_ptr<vector<DescribeRiskCheckResultResponseBodyListRiskItemResources>> riskItemResources{};
  shared_ptr<string> riskLevel{};
  shared_ptr<long> sort{};
  shared_ptr<string> startStatus{};
  shared_ptr<string> status{};
  shared_ptr<long> taskId{};
  shared_ptr<string> title{};
  shared_ptr<string> type{};

  DescribeRiskCheckResultResponseBodyList() {}

  explicit DescribeRiskCheckResultResponseBodyList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (affectedCount) {
      res["AffectedCount"] = boost::any(*affectedCount);
    }
    if (checkTime) {
      res["CheckTime"] = boost::any(*checkTime);
    }
    if (itemId) {
      res["ItemId"] = boost::any(*itemId);
    }
    if (remainingTime) {
      res["RemainingTime"] = boost::any(*remainingTime);
    }
    if (repairStatus) {
      res["RepairStatus"] = boost::any(*repairStatus);
    }
    if (riskAssertType) {
      res["RiskAssertType"] = boost::any(*riskAssertType);
    }
    if (riskItemResources) {
      vector<boost::any> temp1;
      for(auto item1:*riskItemResources){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["RiskItemResources"] = boost::any(temp1);
    }
    if (riskLevel) {
      res["RiskLevel"] = boost::any(*riskLevel);
    }
    if (sort) {
      res["Sort"] = boost::any(*sort);
    }
    if (startStatus) {
      res["StartStatus"] = boost::any(*startStatus);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    if (title) {
      res["Title"] = boost::any(*title);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AffectedCount") != m.end() && !m["AffectedCount"].empty()) {
      affectedCount = make_shared<long>(boost::any_cast<long>(m["AffectedCount"]));
    }
    if (m.find("CheckTime") != m.end() && !m["CheckTime"].empty()) {
      checkTime = make_shared<long>(boost::any_cast<long>(m["CheckTime"]));
    }
    if (m.find("ItemId") != m.end() && !m["ItemId"].empty()) {
      itemId = make_shared<long>(boost::any_cast<long>(m["ItemId"]));
    }
    if (m.find("RemainingTime") != m.end() && !m["RemainingTime"].empty()) {
      remainingTime = make_shared<long>(boost::any_cast<long>(m["RemainingTime"]));
    }
    if (m.find("RepairStatus") != m.end() && !m["RepairStatus"].empty()) {
      repairStatus = make_shared<string>(boost::any_cast<string>(m["RepairStatus"]));
    }
    if (m.find("RiskAssertType") != m.end() && !m["RiskAssertType"].empty()) {
      riskAssertType = make_shared<string>(boost::any_cast<string>(m["RiskAssertType"]));
    }
    if (m.find("RiskItemResources") != m.end() && !m["RiskItemResources"].empty()) {
      if (typeid(vector<boost::any>) == m["RiskItemResources"].type()) {
        vector<DescribeRiskCheckResultResponseBodyListRiskItemResources> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["RiskItemResources"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeRiskCheckResultResponseBodyListRiskItemResources model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        riskItemResources = make_shared<vector<DescribeRiskCheckResultResponseBodyListRiskItemResources>>(expect1);
      }
    }
    if (m.find("RiskLevel") != m.end() && !m["RiskLevel"].empty()) {
      riskLevel = make_shared<string>(boost::any_cast<string>(m["RiskLevel"]));
    }
    if (m.find("Sort") != m.end() && !m["Sort"].empty()) {
      sort = make_shared<long>(boost::any_cast<long>(m["Sort"]));
    }
    if (m.find("StartStatus") != m.end() && !m["StartStatus"].empty()) {
      startStatus = make_shared<string>(boost::any_cast<string>(m["StartStatus"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
    if (m.find("Title") != m.end() && !m["Title"].empty()) {
      title = make_shared<string>(boost::any_cast<string>(m["Title"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribeRiskCheckResultResponseBodyList() = default;
};
class DescribeRiskCheckResultResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<vector<DescribeRiskCheckResultResponseBodyList>> list{};
  shared_ptr<long> pageCount{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};

  DescribeRiskCheckResultResponseBody() {}

  explicit DescribeRiskCheckResultResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (list) {
      vector<boost::any> temp1;
      for(auto item1:*list){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["List"] = boost::any(temp1);
    }
    if (pageCount) {
      res["PageCount"] = boost::any(*pageCount);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("List") != m.end() && !m["List"].empty()) {
      if (typeid(vector<boost::any>) == m["List"].type()) {
        vector<DescribeRiskCheckResultResponseBodyList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["List"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeRiskCheckResultResponseBodyList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        list = make_shared<vector<DescribeRiskCheckResultResponseBodyList>>(expect1);
      }
    }
    if (m.find("PageCount") != m.end() && !m["PageCount"].empty()) {
      pageCount = make_shared<long>(boost::any_cast<long>(m["PageCount"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeRiskCheckResultResponseBody() = default;
};
class DescribeRiskCheckResultResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeRiskCheckResultResponseBody> body{};

  DescribeRiskCheckResultResponse() {}

  explicit DescribeRiskCheckResultResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeRiskCheckResultResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeRiskCheckResultResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeRiskCheckResultResponse() = default;
};
class DescribeRiskCheckSummaryRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<string> resourceDirectoryAccountId{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};

  DescribeRiskCheckSummaryRequest() {}

  explicit DescribeRiskCheckSummaryRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (resourceDirectoryAccountId) {
      res["ResourceDirectoryAccountId"] = boost::any(*resourceDirectoryAccountId);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("ResourceDirectoryAccountId") != m.end() && !m["ResourceDirectoryAccountId"].empty()) {
      resourceDirectoryAccountId = make_shared<string>(boost::any_cast<string>(m["ResourceDirectoryAccountId"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeRiskCheckSummaryRequest() = default;
};
class DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<string> status{};

  DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus() {}

  explicit DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
  }


  virtual ~DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus() = default;
};
class DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus>> countByStatus{};
  shared_ptr<long> id{};
  shared_ptr<long> remainingTime{};
  shared_ptr<long> sort{};
  shared_ptr<string> status{};
  shared_ptr<string> title{};

  DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups() {}

  explicit DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (countByStatus) {
      vector<boost::any> temp1;
      for(auto item1:*countByStatus){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["CountByStatus"] = boost::any(temp1);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (remainingTime) {
      res["RemainingTime"] = boost::any(*remainingTime);
    }
    if (sort) {
      res["Sort"] = boost::any(*sort);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (title) {
      res["Title"] = boost::any(*title);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CountByStatus") != m.end() && !m["CountByStatus"].empty()) {
      if (typeid(vector<boost::any>) == m["CountByStatus"].type()) {
        vector<DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["CountByStatus"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        countByStatus = make_shared<vector<DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus>>(expect1);
      }
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("RemainingTime") != m.end() && !m["RemainingTime"].empty()) {
      remainingTime = make_shared<long>(boost::any_cast<long>(m["RemainingTime"]));
    }
    if (m.find("Sort") != m.end() && !m["Sort"].empty()) {
      sort = make_shared<long>(boost::any_cast<long>(m["Sort"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("Title") != m.end() && !m["Title"].empty()) {
      title = make_shared<string>(boost::any_cast<string>(m["Title"]));
    }
  }


  virtual ~DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups() = default;
};
class DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<string> key{};

  DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount() {}

  explicit DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (key) {
      res["Key"] = boost::any(*key);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("Key") != m.end() && !m["Key"].empty()) {
      key = make_shared<string>(boost::any_cast<string>(m["Key"]));
    }
  }


  virtual ~DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount() = default;
};
class DescribeRiskCheckSummaryResponseBodyRiskCheckSummary : public Darabonba::Model {
public:
  shared_ptr<long> affectedAssetCount{};
  shared_ptr<long> disabledRiskCount{};
  shared_ptr<long> enabledRiskCount{};
  shared_ptr<vector<DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups>> groups{};
  shared_ptr<long> itemCount{};
  shared_ptr<long> previousCount{};
  shared_ptr<long> previousTime{};
  shared_ptr<long> riskCount{};
  shared_ptr<vector<DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount>> riskLevelCount{};
  shared_ptr<double> riskRate{};

  DescribeRiskCheckSummaryResponseBodyRiskCheckSummary() {}

  explicit DescribeRiskCheckSummaryResponseBodyRiskCheckSummary(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (affectedAssetCount) {
      res["AffectedAssetCount"] = boost::any(*affectedAssetCount);
    }
    if (disabledRiskCount) {
      res["DisabledRiskCount"] = boost::any(*disabledRiskCount);
    }
    if (enabledRiskCount) {
      res["EnabledRiskCount"] = boost::any(*enabledRiskCount);
    }
    if (groups) {
      vector<boost::any> temp1;
      for(auto item1:*groups){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Groups"] = boost::any(temp1);
    }
    if (itemCount) {
      res["ItemCount"] = boost::any(*itemCount);
    }
    if (previousCount) {
      res["PreviousCount"] = boost::any(*previousCount);
    }
    if (previousTime) {
      res["PreviousTime"] = boost::any(*previousTime);
    }
    if (riskCount) {
      res["RiskCount"] = boost::any(*riskCount);
    }
    if (riskLevelCount) {
      vector<boost::any> temp1;
      for(auto item1:*riskLevelCount){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["RiskLevelCount"] = boost::any(temp1);
    }
    if (riskRate) {
      res["RiskRate"] = boost::any(*riskRate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AffectedAssetCount") != m.end() && !m["AffectedAssetCount"].empty()) {
      affectedAssetCount = make_shared<long>(boost::any_cast<long>(m["AffectedAssetCount"]));
    }
    if (m.find("DisabledRiskCount") != m.end() && !m["DisabledRiskCount"].empty()) {
      disabledRiskCount = make_shared<long>(boost::any_cast<long>(m["DisabledRiskCount"]));
    }
    if (m.find("EnabledRiskCount") != m.end() && !m["EnabledRiskCount"].empty()) {
      enabledRiskCount = make_shared<long>(boost::any_cast<long>(m["EnabledRiskCount"]));
    }
    if (m.find("Groups") != m.end() && !m["Groups"].empty()) {
      if (typeid(vector<boost::any>) == m["Groups"].type()) {
        vector<DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Groups"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        groups = make_shared<vector<DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups>>(expect1);
      }
    }
    if (m.find("ItemCount") != m.end() && !m["ItemCount"].empty()) {
      itemCount = make_shared<long>(boost::any_cast<long>(m["ItemCount"]));
    }
    if (m.find("PreviousCount") != m.end() && !m["PreviousCount"].empty()) {
      previousCount = make_shared<long>(boost::any_cast<long>(m["PreviousCount"]));
    }
    if (m.find("PreviousTime") != m.end() && !m["PreviousTime"].empty()) {
      previousTime = make_shared<long>(boost::any_cast<long>(m["PreviousTime"]));
    }
    if (m.find("RiskCount") != m.end() && !m["RiskCount"].empty()) {
      riskCount = make_shared<long>(boost::any_cast<long>(m["RiskCount"]));
    }
    if (m.find("RiskLevelCount") != m.end() && !m["RiskLevelCount"].empty()) {
      if (typeid(vector<boost::any>) == m["RiskLevelCount"].type()) {
        vector<DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["RiskLevelCount"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        riskLevelCount = make_shared<vector<DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount>>(expect1);
      }
    }
    if (m.find("RiskRate") != m.end() && !m["RiskRate"].empty()) {
      riskRate = make_shared<double>(boost::any_cast<double>(m["RiskRate"]));
    }
  }


  virtual ~DescribeRiskCheckSummaryResponseBodyRiskCheckSummary() = default;
};
class DescribeRiskCheckSummaryResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<DescribeRiskCheckSummaryResponseBodyRiskCheckSummary> riskCheckSummary{};

  DescribeRiskCheckSummaryResponseBody() {}

  explicit DescribeRiskCheckSummaryResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (riskCheckSummary) {
      res["RiskCheckSummary"] = riskCheckSummary ? boost::any(riskCheckSummary->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("RiskCheckSummary") != m.end() && !m["RiskCheckSummary"].empty()) {
      if (typeid(map<string, boost::any>) == m["RiskCheckSummary"].type()) {
        DescribeRiskCheckSummaryResponseBodyRiskCheckSummary model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["RiskCheckSummary"]));
        riskCheckSummary = make_shared<DescribeRiskCheckSummaryResponseBodyRiskCheckSummary>(model1);
      }
    }
  }


  virtual ~DescribeRiskCheckSummaryResponseBody() = default;
};
class DescribeRiskCheckSummaryResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeRiskCheckSummaryResponseBody> body{};

  DescribeRiskCheckSummaryResponse() {}

  explicit DescribeRiskCheckSummaryResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeRiskCheckSummaryResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeRiskCheckSummaryResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeRiskCheckSummaryResponse() = default;
};
class DescribeRiskItemTypeRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};

  DescribeRiskItemTypeRequest() {}

  explicit DescribeRiskItemTypeRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeRiskItemTypeRequest() = default;
};
class DescribeRiskItemTypeResponseBodyList : public Darabonba::Model {
public:
  shared_ptr<long> id{};
  shared_ptr<string> title{};

  DescribeRiskItemTypeResponseBodyList() {}

  explicit DescribeRiskItemTypeResponseBodyList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (title) {
      res["Title"] = boost::any(*title);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("Title") != m.end() && !m["Title"].empty()) {
      title = make_shared<string>(boost::any_cast<string>(m["Title"]));
    }
  }


  virtual ~DescribeRiskItemTypeResponseBodyList() = default;
};
class DescribeRiskItemTypeResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeRiskItemTypeResponseBodyList>> list{};
  shared_ptr<string> requestId{};

  DescribeRiskItemTypeResponseBody() {}

  explicit DescribeRiskItemTypeResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (list) {
      vector<boost::any> temp1;
      for(auto item1:*list){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["List"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("List") != m.end() && !m["List"].empty()) {
      if (typeid(vector<boost::any>) == m["List"].type()) {
        vector<DescribeRiskItemTypeResponseBodyList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["List"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeRiskItemTypeResponseBodyList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        list = make_shared<vector<DescribeRiskItemTypeResponseBodyList>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeRiskItemTypeResponseBody() = default;
};
class DescribeRiskItemTypeResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeRiskItemTypeResponseBody> body{};

  DescribeRiskItemTypeResponse() {}

  explicit DescribeRiskItemTypeResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeRiskItemTypeResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeRiskItemTypeResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeRiskItemTypeResponse() = default;
};
class DescribeRiskListCheckResultRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<string>> instanceIds{};
  shared_ptr<string> lang{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};

  DescribeRiskListCheckResultRequest() {}

  explicit DescribeRiskListCheckResultRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (instanceIds) {
      res["InstanceIds"] = boost::any(*instanceIds);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("InstanceIds") != m.end() && !m["InstanceIds"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["InstanceIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["InstanceIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      instanceIds = make_shared<vector<string>>(toVec1);
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeRiskListCheckResultRequest() = default;
};
class DescribeRiskListCheckResultResponseBodyList : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> riskCount{};

  DescribeRiskListCheckResultResponseBodyList() {}

  explicit DescribeRiskListCheckResultResponseBodyList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (riskCount) {
      res["riskCount"] = boost::any(*riskCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("riskCount") != m.end() && !m["riskCount"].empty()) {
      riskCount = make_shared<long>(boost::any_cast<long>(m["riskCount"]));
    }
  }


  virtual ~DescribeRiskListCheckResultResponseBodyList() = default;
};
class DescribeRiskListCheckResultResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeRiskListCheckResultResponseBodyList>> list{};
  shared_ptr<string> requestId{};

  DescribeRiskListCheckResultResponseBody() {}

  explicit DescribeRiskListCheckResultResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (list) {
      vector<boost::any> temp1;
      for(auto item1:*list){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["List"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("List") != m.end() && !m["List"].empty()) {
      if (typeid(vector<boost::any>) == m["List"].type()) {
        vector<DescribeRiskListCheckResultResponseBodyList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["List"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeRiskListCheckResultResponseBodyList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        list = make_shared<vector<DescribeRiskListCheckResultResponseBodyList>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeRiskListCheckResultResponseBody() = default;
};
class DescribeRiskListCheckResultResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeRiskListCheckResultResponseBody> body{};

  DescribeRiskListCheckResultResponse() {}

  explicit DescribeRiskListCheckResultResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeRiskListCheckResultResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeRiskListCheckResultResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeRiskListCheckResultResponse() = default;
};
class DescribeScanTaskProgressRequest : public Darabonba::Model {
public:
  shared_ptr<long> taskId{};

  DescribeScanTaskProgressRequest() {}

  explicit DescribeScanTaskProgressRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~DescribeScanTaskProgressRequest() = default;
};
class DescribeScanTaskProgressResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<string> scanTaskProgress{};
  shared_ptr<string> targetInfo{};

  DescribeScanTaskProgressResponseBody() {}

  explicit DescribeScanTaskProgressResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (scanTaskProgress) {
      res["ScanTaskProgress"] = boost::any(*scanTaskProgress);
    }
    if (targetInfo) {
      res["TargetInfo"] = boost::any(*targetInfo);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("ScanTaskProgress") != m.end() && !m["ScanTaskProgress"].empty()) {
      scanTaskProgress = make_shared<string>(boost::any_cast<string>(m["ScanTaskProgress"]));
    }
    if (m.find("TargetInfo") != m.end() && !m["TargetInfo"].empty()) {
      targetInfo = make_shared<string>(boost::any_cast<string>(m["TargetInfo"]));
    }
  }


  virtual ~DescribeScanTaskProgressResponseBody() = default;
};
class DescribeScanTaskProgressResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeScanTaskProgressResponseBody> body{};

  DescribeScanTaskProgressResponse() {}

  explicit DescribeScanTaskProgressResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeScanTaskProgressResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeScanTaskProgressResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeScanTaskProgressResponse() = default;
};
class DescribeSearchConditionRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> type{};

  DescribeSearchConditionRequest() {}

  explicit DescribeSearchConditionRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribeSearchConditionRequest() = default;
};
class DescribeSearchConditionResponseBodyConditionList : public Darabonba::Model {
public:
  shared_ptr<string> conditionType{};
  shared_ptr<string> filterConditions{};
  shared_ptr<string> name{};
  shared_ptr<string> nameKey{};

  DescribeSearchConditionResponseBodyConditionList() {}

  explicit DescribeSearchConditionResponseBodyConditionList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (conditionType) {
      res["ConditionType"] = boost::any(*conditionType);
    }
    if (filterConditions) {
      res["FilterConditions"] = boost::any(*filterConditions);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (nameKey) {
      res["NameKey"] = boost::any(*nameKey);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ConditionType") != m.end() && !m["ConditionType"].empty()) {
      conditionType = make_shared<string>(boost::any_cast<string>(m["ConditionType"]));
    }
    if (m.find("FilterConditions") != m.end() && !m["FilterConditions"].empty()) {
      filterConditions = make_shared<string>(boost::any_cast<string>(m["FilterConditions"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("NameKey") != m.end() && !m["NameKey"].empty()) {
      nameKey = make_shared<string>(boost::any_cast<string>(m["NameKey"]));
    }
  }


  virtual ~DescribeSearchConditionResponseBodyConditionList() = default;
};
class DescribeSearchConditionResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeSearchConditionResponseBodyConditionList>> conditionList{};
  shared_ptr<string> requestId{};

  DescribeSearchConditionResponseBody() {}

  explicit DescribeSearchConditionResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (conditionList) {
      vector<boost::any> temp1;
      for(auto item1:*conditionList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["ConditionList"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ConditionList") != m.end() && !m["ConditionList"].empty()) {
      if (typeid(vector<boost::any>) == m["ConditionList"].type()) {
        vector<DescribeSearchConditionResponseBodyConditionList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["ConditionList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSearchConditionResponseBodyConditionList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        conditionList = make_shared<vector<DescribeSearchConditionResponseBodyConditionList>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeSearchConditionResponseBody() = default;
};
class DescribeSearchConditionResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSearchConditionResponseBody> body{};

  DescribeSearchConditionResponse() {}

  explicit DescribeSearchConditionResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSearchConditionResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSearchConditionResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSearchConditionResponse() = default;
};
class DescribeSecureSuggestionRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};

  DescribeSecureSuggestionRequest() {}

  explicit DescribeSecureSuggestionRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeSecureSuggestionRequest() = default;
};
class DescribeSecureSuggestionResponseBodySuggestionsDetail : public Darabonba::Model {
public:
  shared_ptr<string> description{};
  shared_ptr<string> subType{};
  shared_ptr<string> title{};

  DescribeSecureSuggestionResponseBodySuggestionsDetail() {}

  explicit DescribeSecureSuggestionResponseBodySuggestionsDetail(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (subType) {
      res["SubType"] = boost::any(*subType);
    }
    if (title) {
      res["Title"] = boost::any(*title);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("SubType") != m.end() && !m["SubType"].empty()) {
      subType = make_shared<string>(boost::any_cast<string>(m["SubType"]));
    }
    if (m.find("Title") != m.end() && !m["Title"].empty()) {
      title = make_shared<string>(boost::any_cast<string>(m["Title"]));
    }
  }


  virtual ~DescribeSecureSuggestionResponseBodySuggestionsDetail() = default;
};
class DescribeSecureSuggestionResponseBodySuggestions : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeSecureSuggestionResponseBodySuggestionsDetail>> detail{};
  shared_ptr<long> points{};
  shared_ptr<string> suggestType{};

  DescribeSecureSuggestionResponseBodySuggestions() {}

  explicit DescribeSecureSuggestionResponseBodySuggestions(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (detail) {
      vector<boost::any> temp1;
      for(auto item1:*detail){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Detail"] = boost::any(temp1);
    }
    if (points) {
      res["Points"] = boost::any(*points);
    }
    if (suggestType) {
      res["SuggestType"] = boost::any(*suggestType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Detail") != m.end() && !m["Detail"].empty()) {
      if (typeid(vector<boost::any>) == m["Detail"].type()) {
        vector<DescribeSecureSuggestionResponseBodySuggestionsDetail> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Detail"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSecureSuggestionResponseBodySuggestionsDetail model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        detail = make_shared<vector<DescribeSecureSuggestionResponseBodySuggestionsDetail>>(expect1);
      }
    }
    if (m.find("Points") != m.end() && !m["Points"].empty()) {
      points = make_shared<long>(boost::any_cast<long>(m["Points"]));
    }
    if (m.find("SuggestType") != m.end() && !m["SuggestType"].empty()) {
      suggestType = make_shared<string>(boost::any_cast<string>(m["SuggestType"]));
    }
  }


  virtual ~DescribeSecureSuggestionResponseBodySuggestions() = default;
};
class DescribeSecureSuggestionResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeSecureSuggestionResponseBodySuggestions>> suggestions{};
  shared_ptr<long> totalCount{};

  DescribeSecureSuggestionResponseBody() {}

  explicit DescribeSecureSuggestionResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (suggestions) {
      vector<boost::any> temp1;
      for(auto item1:*suggestions){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Suggestions"] = boost::any(temp1);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Suggestions") != m.end() && !m["Suggestions"].empty()) {
      if (typeid(vector<boost::any>) == m["Suggestions"].type()) {
        vector<DescribeSecureSuggestionResponseBodySuggestions> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Suggestions"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSecureSuggestionResponseBodySuggestions model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        suggestions = make_shared<vector<DescribeSecureSuggestionResponseBodySuggestions>>(expect1);
      }
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeSecureSuggestionResponseBody() = default;
};
class DescribeSecureSuggestionResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSecureSuggestionResponseBody> body{};

  DescribeSecureSuggestionResponse() {}

  explicit DescribeSecureSuggestionResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSecureSuggestionResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSecureSuggestionResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSecureSuggestionResponse() = default;
};
class DescribeSecurityCheckScheduleConfigRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};

  DescribeSecurityCheckScheduleConfigRequest() {}

  explicit DescribeSecurityCheckScheduleConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeSecurityCheckScheduleConfigRequest() = default;
};
class DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig : public Darabonba::Model {
public:
  shared_ptr<string> daysOfWeek{};
  shared_ptr<long> endTime{};
  shared_ptr<long> startTime{};

  DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig() {}

  explicit DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (daysOfWeek) {
      res["DaysOfWeek"] = boost::any(*daysOfWeek);
    }
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DaysOfWeek") != m.end() && !m["DaysOfWeek"].empty()) {
      daysOfWeek = make_shared<string>(boost::any_cast<string>(m["DaysOfWeek"]));
    }
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<long>(boost::any_cast<long>(m["EndTime"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<long>(boost::any_cast<long>(m["StartTime"]));
    }
  }


  virtual ~DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig() = default;
};
class DescribeSecurityCheckScheduleConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig> riskCheckJobConfig{};

  DescribeSecurityCheckScheduleConfigResponseBody() {}

  explicit DescribeSecurityCheckScheduleConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (riskCheckJobConfig) {
      res["RiskCheckJobConfig"] = riskCheckJobConfig ? boost::any(riskCheckJobConfig->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("RiskCheckJobConfig") != m.end() && !m["RiskCheckJobConfig"].empty()) {
      if (typeid(map<string, boost::any>) == m["RiskCheckJobConfig"].type()) {
        DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["RiskCheckJobConfig"]));
        riskCheckJobConfig = make_shared<DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig>(model1);
      }
    }
  }


  virtual ~DescribeSecurityCheckScheduleConfigResponseBody() = default;
};
class DescribeSecurityCheckScheduleConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSecurityCheckScheduleConfigResponseBody> body{};

  DescribeSecurityCheckScheduleConfigResponse() {}

  explicit DescribeSecurityCheckScheduleConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSecurityCheckScheduleConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSecurityCheckScheduleConfigResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSecurityCheckScheduleConfigResponse() = default;
};
class DescribeSecurityEventOperationStatusRequest : public Darabonba::Model {
public:
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<vector<string>> securityEventIds{};
  shared_ptr<string> sourceIp{};
  shared_ptr<long> taskId{};

  DescribeSecurityEventOperationStatusRequest() {}

  explicit DescribeSecurityEventOperationStatusRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (securityEventIds) {
      res["SecurityEventIds"] = boost::any(*securityEventIds);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SecurityEventIds") != m.end() && !m["SecurityEventIds"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["SecurityEventIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["SecurityEventIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      securityEventIds = make_shared<vector<string>>(toVec1);
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~DescribeSecurityEventOperationStatusRequest() = default;
};
class DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses : public Darabonba::Model {
public:
  shared_ptr<string> errorCode{};
  shared_ptr<string> securityEventId{};
  shared_ptr<string> status{};

  DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses() {}

  explicit DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (errorCode) {
      res["ErrorCode"] = boost::any(*errorCode);
    }
    if (securityEventId) {
      res["SecurityEventId"] = boost::any(*securityEventId);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ErrorCode") != m.end() && !m["ErrorCode"].empty()) {
      errorCode = make_shared<string>(boost::any_cast<string>(m["ErrorCode"]));
    }
    if (m.find("SecurityEventId") != m.end() && !m["SecurityEventId"].empty()) {
      securityEventId = make_shared<string>(boost::any_cast<string>(m["SecurityEventId"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
  }


  virtual ~DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses() = default;
};
class DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses>> securityEventOperationStatuses{};
  shared_ptr<string> taskStatus{};

  DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse() {}

  explicit DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (securityEventOperationStatuses) {
      vector<boost::any> temp1;
      for(auto item1:*securityEventOperationStatuses){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["SecurityEventOperationStatuses"] = boost::any(temp1);
    }
    if (taskStatus) {
      res["TaskStatus"] = boost::any(*taskStatus);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("SecurityEventOperationStatuses") != m.end() && !m["SecurityEventOperationStatuses"].empty()) {
      if (typeid(vector<boost::any>) == m["SecurityEventOperationStatuses"].type()) {
        vector<DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["SecurityEventOperationStatuses"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        securityEventOperationStatuses = make_shared<vector<DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses>>(expect1);
      }
    }
    if (m.find("TaskStatus") != m.end() && !m["TaskStatus"].empty()) {
      taskStatus = make_shared<string>(boost::any_cast<string>(m["TaskStatus"]));
    }
  }


  virtual ~DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse() = default;
};
class DescribeSecurityEventOperationStatusResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse> securityEventOperationStatusResponse{};

  DescribeSecurityEventOperationStatusResponseBody() {}

  explicit DescribeSecurityEventOperationStatusResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (securityEventOperationStatusResponse) {
      res["SecurityEventOperationStatusResponse"] = securityEventOperationStatusResponse ? boost::any(securityEventOperationStatusResponse->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("SecurityEventOperationStatusResponse") != m.end() && !m["SecurityEventOperationStatusResponse"].empty()) {
      if (typeid(map<string, boost::any>) == m["SecurityEventOperationStatusResponse"].type()) {
        DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["SecurityEventOperationStatusResponse"]));
        securityEventOperationStatusResponse = make_shared<DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse>(model1);
      }
    }
  }


  virtual ~DescribeSecurityEventOperationStatusResponseBody() = default;
};
class DescribeSecurityEventOperationStatusResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSecurityEventOperationStatusResponseBody> body{};

  DescribeSecurityEventOperationStatusResponse() {}

  explicit DescribeSecurityEventOperationStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSecurityEventOperationStatusResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSecurityEventOperationStatusResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSecurityEventOperationStatusResponse() = default;
};
class DescribeSecurityEventOperationsRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> securityEventId{};
  shared_ptr<string> sourceIp{};

  DescribeSecurityEventOperationsRequest() {}

  explicit DescribeSecurityEventOperationsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (securityEventId) {
      res["SecurityEventId"] = boost::any(*securityEventId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SecurityEventId") != m.end() && !m["SecurityEventId"].empty()) {
      securityEventId = make_shared<long>(boost::any_cast<long>(m["SecurityEventId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeSecurityEventOperationsRequest() = default;
};
class DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField : public Darabonba::Model {
public:
  shared_ptr<string> filedAliasName{};
  shared_ptr<string> filedName{};
  shared_ptr<string> markMisType{};
  shared_ptr<string> markMisValue{};
  shared_ptr<vector<string>> supportedMisType{};

  DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField() {}

  explicit DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (filedAliasName) {
      res["FiledAliasName"] = boost::any(*filedAliasName);
    }
    if (filedName) {
      res["FiledName"] = boost::any(*filedName);
    }
    if (markMisType) {
      res["MarkMisType"] = boost::any(*markMisType);
    }
    if (markMisValue) {
      res["MarkMisValue"] = boost::any(*markMisValue);
    }
    if (supportedMisType) {
      res["SupportedMisType"] = boost::any(*supportedMisType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("FiledAliasName") != m.end() && !m["FiledAliasName"].empty()) {
      filedAliasName = make_shared<string>(boost::any_cast<string>(m["FiledAliasName"]));
    }
    if (m.find("FiledName") != m.end() && !m["FiledName"].empty()) {
      filedName = make_shared<string>(boost::any_cast<string>(m["FiledName"]));
    }
    if (m.find("MarkMisType") != m.end() && !m["MarkMisType"].empty()) {
      markMisType = make_shared<string>(boost::any_cast<string>(m["MarkMisType"]));
    }
    if (m.find("MarkMisValue") != m.end() && !m["MarkMisValue"].empty()) {
      markMisValue = make_shared<string>(boost::any_cast<string>(m["MarkMisValue"]));
    }
    if (m.find("SupportedMisType") != m.end() && !m["SupportedMisType"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["SupportedMisType"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["SupportedMisType"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      supportedMisType = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField() = default;
};
class DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource : public Darabonba::Model {
public:
  shared_ptr<string> filedAliasName{};
  shared_ptr<string> filedName{};
  shared_ptr<string> markMisValue{};
  shared_ptr<vector<string>> supportedMisType{};

  DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource() {}

  explicit DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (filedAliasName) {
      res["FiledAliasName"] = boost::any(*filedAliasName);
    }
    if (filedName) {
      res["FiledName"] = boost::any(*filedName);
    }
    if (markMisValue) {
      res["MarkMisValue"] = boost::any(*markMisValue);
    }
    if (supportedMisType) {
      res["SupportedMisType"] = boost::any(*supportedMisType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("FiledAliasName") != m.end() && !m["FiledAliasName"].empty()) {
      filedAliasName = make_shared<string>(boost::any_cast<string>(m["FiledAliasName"]));
    }
    if (m.find("FiledName") != m.end() && !m["FiledName"].empty()) {
      filedName = make_shared<string>(boost::any_cast<string>(m["FiledName"]));
    }
    if (m.find("MarkMisValue") != m.end() && !m["MarkMisValue"].empty()) {
      markMisValue = make_shared<string>(boost::any_cast<string>(m["MarkMisValue"]));
    }
    if (m.find("SupportedMisType") != m.end() && !m["SupportedMisType"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["SupportedMisType"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["SupportedMisType"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      supportedMisType = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource() = default;
};
class DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField>> markField{};
  shared_ptr<vector<DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource>> markFieldsSource{};
  shared_ptr<string> operationCode{};
  shared_ptr<string> operationParams{};
  shared_ptr<bool> userCanOperate{};

  DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse() {}

  explicit DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (markField) {
      vector<boost::any> temp1;
      for(auto item1:*markField){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["MarkField"] = boost::any(temp1);
    }
    if (markFieldsSource) {
      vector<boost::any> temp1;
      for(auto item1:*markFieldsSource){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["MarkFieldsSource"] = boost::any(temp1);
    }
    if (operationCode) {
      res["OperationCode"] = boost::any(*operationCode);
    }
    if (operationParams) {
      res["OperationParams"] = boost::any(*operationParams);
    }
    if (userCanOperate) {
      res["UserCanOperate"] = boost::any(*userCanOperate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("MarkField") != m.end() && !m["MarkField"].empty()) {
      if (typeid(vector<boost::any>) == m["MarkField"].type()) {
        vector<DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["MarkField"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        markField = make_shared<vector<DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField>>(expect1);
      }
    }
    if (m.find("MarkFieldsSource") != m.end() && !m["MarkFieldsSource"].empty()) {
      if (typeid(vector<boost::any>) == m["MarkFieldsSource"].type()) {
        vector<DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["MarkFieldsSource"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        markFieldsSource = make_shared<vector<DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource>>(expect1);
      }
    }
    if (m.find("OperationCode") != m.end() && !m["OperationCode"].empty()) {
      operationCode = make_shared<string>(boost::any_cast<string>(m["OperationCode"]));
    }
    if (m.find("OperationParams") != m.end() && !m["OperationParams"].empty()) {
      operationParams = make_shared<string>(boost::any_cast<string>(m["OperationParams"]));
    }
    if (m.find("UserCanOperate") != m.end() && !m["UserCanOperate"].empty()) {
      userCanOperate = make_shared<bool>(boost::any_cast<bool>(m["UserCanOperate"]));
    }
  }


  virtual ~DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse() = default;
};
class DescribeSecurityEventOperationsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse>> securityEventOperationsResponse{};

  DescribeSecurityEventOperationsResponseBody() {}

  explicit DescribeSecurityEventOperationsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (securityEventOperationsResponse) {
      vector<boost::any> temp1;
      for(auto item1:*securityEventOperationsResponse){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["SecurityEventOperationsResponse"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("SecurityEventOperationsResponse") != m.end() && !m["SecurityEventOperationsResponse"].empty()) {
      if (typeid(vector<boost::any>) == m["SecurityEventOperationsResponse"].type()) {
        vector<DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["SecurityEventOperationsResponse"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        securityEventOperationsResponse = make_shared<vector<DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse>>(expect1);
      }
    }
  }


  virtual ~DescribeSecurityEventOperationsResponseBody() = default;
};
class DescribeSecurityEventOperationsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSecurityEventOperationsResponseBody> body{};

  DescribeSecurityEventOperationsResponse() {}

  explicit DescribeSecurityEventOperationsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSecurityEventOperationsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSecurityEventOperationsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSecurityEventOperationsResponse() = default;
};
class DescribeSecurityStatInfoRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<string> resourceDirectoryAccountId{};
  shared_ptr<string> sourceIp{};

  DescribeSecurityStatInfoRequest() {}

  explicit DescribeSecurityStatInfoRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (resourceDirectoryAccountId) {
      res["ResourceDirectoryAccountId"] = boost::any(*resourceDirectoryAccountId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("ResourceDirectoryAccountId") != m.end() && !m["ResourceDirectoryAccountId"].empty()) {
      resourceDirectoryAccountId = make_shared<string>(boost::any_cast<string>(m["ResourceDirectoryAccountId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeSecurityStatInfoRequest() = default;
};
class DescribeSecurityStatInfoResponseBodyAttackEvent : public Darabonba::Model {
public:
  shared_ptr<vector<string>> dateArray{};
  shared_ptr<long> totalCount{};
  shared_ptr<vector<string>> valueArray{};

  DescribeSecurityStatInfoResponseBodyAttackEvent() {}

  explicit DescribeSecurityStatInfoResponseBodyAttackEvent(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (dateArray) {
      res["DateArray"] = boost::any(*dateArray);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    if (valueArray) {
      res["ValueArray"] = boost::any(*valueArray);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DateArray") != m.end() && !m["DateArray"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["DateArray"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DateArray"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      dateArray = make_shared<vector<string>>(toVec1);
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
    if (m.find("ValueArray") != m.end() && !m["ValueArray"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["ValueArray"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ValueArray"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      valueArray = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~DescribeSecurityStatInfoResponseBodyAttackEvent() = default;
};
class DescribeSecurityStatInfoResponseBodyHealthCheck : public Darabonba::Model {
public:
  shared_ptr<vector<string>> dateArray{};
  shared_ptr<long> highCount{};
  shared_ptr<vector<string>> highList{};
  shared_ptr<vector<string>> levelsOn{};
  shared_ptr<long> lowCount{};
  shared_ptr<vector<string>> lowList{};
  shared_ptr<long> mediumCount{};
  shared_ptr<vector<string>> mediumList{};
  shared_ptr<vector<string>> timeArray{};
  shared_ptr<long> totalCount{};
  shared_ptr<vector<string>> valueArray{};

  DescribeSecurityStatInfoResponseBodyHealthCheck() {}

  explicit DescribeSecurityStatInfoResponseBodyHealthCheck(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (dateArray) {
      res["DateArray"] = boost::any(*dateArray);
    }
    if (highCount) {
      res["HighCount"] = boost::any(*highCount);
    }
    if (highList) {
      res["HighList"] = boost::any(*highList);
    }
    if (levelsOn) {
      res["LevelsOn"] = boost::any(*levelsOn);
    }
    if (lowCount) {
      res["LowCount"] = boost::any(*lowCount);
    }
    if (lowList) {
      res["LowList"] = boost::any(*lowList);
    }
    if (mediumCount) {
      res["MediumCount"] = boost::any(*mediumCount);
    }
    if (mediumList) {
      res["MediumList"] = boost::any(*mediumList);
    }
    if (timeArray) {
      res["TimeArray"] = boost::any(*timeArray);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    if (valueArray) {
      res["ValueArray"] = boost::any(*valueArray);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DateArray") != m.end() && !m["DateArray"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["DateArray"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DateArray"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      dateArray = make_shared<vector<string>>(toVec1);
    }
    if (m.find("HighCount") != m.end() && !m["HighCount"].empty()) {
      highCount = make_shared<long>(boost::any_cast<long>(m["HighCount"]));
    }
    if (m.find("HighList") != m.end() && !m["HighList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["HighList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["HighList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      highList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("LevelsOn") != m.end() && !m["LevelsOn"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["LevelsOn"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["LevelsOn"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      levelsOn = make_shared<vector<string>>(toVec1);
    }
    if (m.find("LowCount") != m.end() && !m["LowCount"].empty()) {
      lowCount = make_shared<long>(boost::any_cast<long>(m["LowCount"]));
    }
    if (m.find("LowList") != m.end() && !m["LowList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["LowList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["LowList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      lowList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("MediumCount") != m.end() && !m["MediumCount"].empty()) {
      mediumCount = make_shared<long>(boost::any_cast<long>(m["MediumCount"]));
    }
    if (m.find("MediumList") != m.end() && !m["MediumList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["MediumList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["MediumList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      mediumList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("TimeArray") != m.end() && !m["TimeArray"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["TimeArray"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["TimeArray"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      timeArray = make_shared<vector<string>>(toVec1);
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
    if (m.find("ValueArray") != m.end() && !m["ValueArray"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["ValueArray"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ValueArray"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      valueArray = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~DescribeSecurityStatInfoResponseBodyHealthCheck() = default;
};
class DescribeSecurityStatInfoResponseBodySecurityEvent : public Darabonba::Model {
public:
  shared_ptr<vector<string>> dateArray{};
  shared_ptr<vector<string>> levelsOn{};
  shared_ptr<long> remindCount{};
  shared_ptr<vector<string>> remindList{};
  shared_ptr<long> seriousCount{};
  shared_ptr<vector<string>> seriousList{};
  shared_ptr<long> suspiciousCount{};
  shared_ptr<vector<string>> suspiciousList{};
  shared_ptr<vector<string>> timeArray{};
  shared_ptr<long> totalCount{};
  shared_ptr<vector<string>> valueArray{};

  DescribeSecurityStatInfoResponseBodySecurityEvent() {}

  explicit DescribeSecurityStatInfoResponseBodySecurityEvent(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (dateArray) {
      res["DateArray"] = boost::any(*dateArray);
    }
    if (levelsOn) {
      res["LevelsOn"] = boost::any(*levelsOn);
    }
    if (remindCount) {
      res["RemindCount"] = boost::any(*remindCount);
    }
    if (remindList) {
      res["RemindList"] = boost::any(*remindList);
    }
    if (seriousCount) {
      res["SeriousCount"] = boost::any(*seriousCount);
    }
    if (seriousList) {
      res["SeriousList"] = boost::any(*seriousList);
    }
    if (suspiciousCount) {
      res["SuspiciousCount"] = boost::any(*suspiciousCount);
    }
    if (suspiciousList) {
      res["SuspiciousList"] = boost::any(*suspiciousList);
    }
    if (timeArray) {
      res["TimeArray"] = boost::any(*timeArray);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    if (valueArray) {
      res["ValueArray"] = boost::any(*valueArray);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DateArray") != m.end() && !m["DateArray"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["DateArray"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DateArray"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      dateArray = make_shared<vector<string>>(toVec1);
    }
    if (m.find("LevelsOn") != m.end() && !m["LevelsOn"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["LevelsOn"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["LevelsOn"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      levelsOn = make_shared<vector<string>>(toVec1);
    }
    if (m.find("RemindCount") != m.end() && !m["RemindCount"].empty()) {
      remindCount = make_shared<long>(boost::any_cast<long>(m["RemindCount"]));
    }
    if (m.find("RemindList") != m.end() && !m["RemindList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["RemindList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["RemindList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      remindList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("SeriousCount") != m.end() && !m["SeriousCount"].empty()) {
      seriousCount = make_shared<long>(boost::any_cast<long>(m["SeriousCount"]));
    }
    if (m.find("SeriousList") != m.end() && !m["SeriousList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["SeriousList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["SeriousList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      seriousList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("SuspiciousCount") != m.end() && !m["SuspiciousCount"].empty()) {
      suspiciousCount = make_shared<long>(boost::any_cast<long>(m["SuspiciousCount"]));
    }
    if (m.find("SuspiciousList") != m.end() && !m["SuspiciousList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["SuspiciousList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["SuspiciousList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      suspiciousList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("TimeArray") != m.end() && !m["TimeArray"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["TimeArray"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["TimeArray"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      timeArray = make_shared<vector<string>>(toVec1);
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
    if (m.find("ValueArray") != m.end() && !m["ValueArray"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["ValueArray"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ValueArray"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      valueArray = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~DescribeSecurityStatInfoResponseBodySecurityEvent() = default;
};
class DescribeSecurityStatInfoResponseBodyVulnerability : public Darabonba::Model {
public:
  shared_ptr<long> asapCount{};
  shared_ptr<vector<string>> asapList{};
  shared_ptr<vector<string>> dateArray{};
  shared_ptr<long> laterCount{};
  shared_ptr<vector<string>> laterList{};
  shared_ptr<vector<string>> levelsOn{};
  shared_ptr<long> nntfCount{};
  shared_ptr<vector<string>> nntfList{};
  shared_ptr<vector<string>> timeArray{};
  shared_ptr<long> totalCount{};
  shared_ptr<vector<string>> valueArray{};

  DescribeSecurityStatInfoResponseBodyVulnerability() {}

  explicit DescribeSecurityStatInfoResponseBodyVulnerability(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (asapCount) {
      res["AsapCount"] = boost::any(*asapCount);
    }
    if (asapList) {
      res["AsapList"] = boost::any(*asapList);
    }
    if (dateArray) {
      res["DateArray"] = boost::any(*dateArray);
    }
    if (laterCount) {
      res["LaterCount"] = boost::any(*laterCount);
    }
    if (laterList) {
      res["LaterList"] = boost::any(*laterList);
    }
    if (levelsOn) {
      res["LevelsOn"] = boost::any(*levelsOn);
    }
    if (nntfCount) {
      res["NntfCount"] = boost::any(*nntfCount);
    }
    if (nntfList) {
      res["NntfList"] = boost::any(*nntfList);
    }
    if (timeArray) {
      res["TimeArray"] = boost::any(*timeArray);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    if (valueArray) {
      res["ValueArray"] = boost::any(*valueArray);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AsapCount") != m.end() && !m["AsapCount"].empty()) {
      asapCount = make_shared<long>(boost::any_cast<long>(m["AsapCount"]));
    }
    if (m.find("AsapList") != m.end() && !m["AsapList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["AsapList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AsapList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      asapList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("DateArray") != m.end() && !m["DateArray"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["DateArray"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DateArray"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      dateArray = make_shared<vector<string>>(toVec1);
    }
    if (m.find("LaterCount") != m.end() && !m["LaterCount"].empty()) {
      laterCount = make_shared<long>(boost::any_cast<long>(m["LaterCount"]));
    }
    if (m.find("LaterList") != m.end() && !m["LaterList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["LaterList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["LaterList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      laterList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("LevelsOn") != m.end() && !m["LevelsOn"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["LevelsOn"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["LevelsOn"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      levelsOn = make_shared<vector<string>>(toVec1);
    }
    if (m.find("NntfCount") != m.end() && !m["NntfCount"].empty()) {
      nntfCount = make_shared<long>(boost::any_cast<long>(m["NntfCount"]));
    }
    if (m.find("NntfList") != m.end() && !m["NntfList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["NntfList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["NntfList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      nntfList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("TimeArray") != m.end() && !m["TimeArray"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["TimeArray"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["TimeArray"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      timeArray = make_shared<vector<string>>(toVec1);
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
    if (m.find("ValueArray") != m.end() && !m["ValueArray"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["ValueArray"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ValueArray"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      valueArray = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~DescribeSecurityStatInfoResponseBodyVulnerability() = default;
};
class DescribeSecurityStatInfoResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeSecurityStatInfoResponseBodyAttackEvent> attackEvent{};
  shared_ptr<DescribeSecurityStatInfoResponseBodyHealthCheck> healthCheck{};
  shared_ptr<string> requestId{};
  shared_ptr<DescribeSecurityStatInfoResponseBodySecurityEvent> securityEvent{};
  shared_ptr<bool> success{};
  shared_ptr<DescribeSecurityStatInfoResponseBodyVulnerability> vulnerability{};

  DescribeSecurityStatInfoResponseBody() {}

  explicit DescribeSecurityStatInfoResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (attackEvent) {
      res["AttackEvent"] = attackEvent ? boost::any(attackEvent->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (healthCheck) {
      res["HealthCheck"] = healthCheck ? boost::any(healthCheck->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (securityEvent) {
      res["SecurityEvent"] = securityEvent ? boost::any(securityEvent->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    if (vulnerability) {
      res["Vulnerability"] = vulnerability ? boost::any(vulnerability->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AttackEvent") != m.end() && !m["AttackEvent"].empty()) {
      if (typeid(map<string, boost::any>) == m["AttackEvent"].type()) {
        DescribeSecurityStatInfoResponseBodyAttackEvent model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["AttackEvent"]));
        attackEvent = make_shared<DescribeSecurityStatInfoResponseBodyAttackEvent>(model1);
      }
    }
    if (m.find("HealthCheck") != m.end() && !m["HealthCheck"].empty()) {
      if (typeid(map<string, boost::any>) == m["HealthCheck"].type()) {
        DescribeSecurityStatInfoResponseBodyHealthCheck model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["HealthCheck"]));
        healthCheck = make_shared<DescribeSecurityStatInfoResponseBodyHealthCheck>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("SecurityEvent") != m.end() && !m["SecurityEvent"].empty()) {
      if (typeid(map<string, boost::any>) == m["SecurityEvent"].type()) {
        DescribeSecurityStatInfoResponseBodySecurityEvent model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["SecurityEvent"]));
        securityEvent = make_shared<DescribeSecurityStatInfoResponseBodySecurityEvent>(model1);
      }
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
    if (m.find("Vulnerability") != m.end() && !m["Vulnerability"].empty()) {
      if (typeid(map<string, boost::any>) == m["Vulnerability"].type()) {
        DescribeSecurityStatInfoResponseBodyVulnerability model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Vulnerability"]));
        vulnerability = make_shared<DescribeSecurityStatInfoResponseBodyVulnerability>(model1);
      }
    }
  }


  virtual ~DescribeSecurityStatInfoResponseBody() = default;
};
class DescribeSecurityStatInfoResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSecurityStatInfoResponseBody> body{};

  DescribeSecurityStatInfoResponse() {}

  explicit DescribeSecurityStatInfoResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSecurityStatInfoResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSecurityStatInfoResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSecurityStatInfoResponse() = default;
};
class DescribeServiceLinkedRoleStatusResponseBodyRoleStatus : public Darabonba::Model {
public:
  shared_ptr<bool> status{};

  DescribeServiceLinkedRoleStatusResponseBodyRoleStatus() {}

  explicit DescribeServiceLinkedRoleStatusResponseBodyRoleStatus(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<bool>(boost::any_cast<bool>(m["Status"]));
    }
  }


  virtual ~DescribeServiceLinkedRoleStatusResponseBodyRoleStatus() = default;
};
class DescribeServiceLinkedRoleStatusResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<DescribeServiceLinkedRoleStatusResponseBodyRoleStatus> roleStatus{};

  DescribeServiceLinkedRoleStatusResponseBody() {}

  explicit DescribeServiceLinkedRoleStatusResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (roleStatus) {
      res["RoleStatus"] = roleStatus ? boost::any(roleStatus->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("RoleStatus") != m.end() && !m["RoleStatus"].empty()) {
      if (typeid(map<string, boost::any>) == m["RoleStatus"].type()) {
        DescribeServiceLinkedRoleStatusResponseBodyRoleStatus model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["RoleStatus"]));
        roleStatus = make_shared<DescribeServiceLinkedRoleStatusResponseBodyRoleStatus>(model1);
      }
    }
  }


  virtual ~DescribeServiceLinkedRoleStatusResponseBody() = default;
};
class DescribeServiceLinkedRoleStatusResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeServiceLinkedRoleStatusResponseBody> body{};

  DescribeServiceLinkedRoleStatusResponse() {}

  explicit DescribeServiceLinkedRoleStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeServiceLinkedRoleStatusResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeServiceLinkedRoleStatusResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeServiceLinkedRoleStatusResponse() = default;
};
class DescribeSimilarEventScenariosRequest : public Darabonba::Model {
public:
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> securityEventId{};
  shared_ptr<string> sourceIp{};

  DescribeSimilarEventScenariosRequest() {}

  explicit DescribeSimilarEventScenariosRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (securityEventId) {
      res["SecurityEventId"] = boost::any(*securityEventId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SecurityEventId") != m.end() && !m["SecurityEventId"].empty()) {
      securityEventId = make_shared<long>(boost::any_cast<long>(m["SecurityEventId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeSimilarEventScenariosRequest() = default;
};
class DescribeSimilarEventScenariosResponseBodyScenarios : public Darabonba::Model {
public:
  shared_ptr<string> code{};

  DescribeSimilarEventScenariosResponseBodyScenarios() {}

  explicit DescribeSimilarEventScenariosResponseBodyScenarios(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
  }


  virtual ~DescribeSimilarEventScenariosResponseBodyScenarios() = default;
};
class DescribeSimilarEventScenariosResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeSimilarEventScenariosResponseBodyScenarios>> scenarios{};

  DescribeSimilarEventScenariosResponseBody() {}

  explicit DescribeSimilarEventScenariosResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (scenarios) {
      vector<boost::any> temp1;
      for(auto item1:*scenarios){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Scenarios"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Scenarios") != m.end() && !m["Scenarios"].empty()) {
      if (typeid(vector<boost::any>) == m["Scenarios"].type()) {
        vector<DescribeSimilarEventScenariosResponseBodyScenarios> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Scenarios"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSimilarEventScenariosResponseBodyScenarios model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        scenarios = make_shared<vector<DescribeSimilarEventScenariosResponseBodyScenarios>>(expect1);
      }
    }
  }


  virtual ~DescribeSimilarEventScenariosResponseBody() = default;
};
class DescribeSimilarEventScenariosResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSimilarEventScenariosResponseBody> body{};

  DescribeSimilarEventScenariosResponse() {}

  explicit DescribeSimilarEventScenariosResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSimilarEventScenariosResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSimilarEventScenariosResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSimilarEventScenariosResponse() = default;
};
class DescribeSimilarSecurityEventsRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> lang{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<long> taskId{};

  DescribeSimilarSecurityEventsRequest() {}

  explicit DescribeSimilarSecurityEventsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~DescribeSimilarSecurityEventsRequest() = default;
};
class DescribeSimilarSecurityEventsResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeSimilarSecurityEventsResponseBodyPageInfo() {}

  explicit DescribeSimilarSecurityEventsResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeSimilarSecurityEventsResponseBodyPageInfo() = default;
};
class DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse : public Darabonba::Model {
public:
  shared_ptr<string> eventName{};
  shared_ptr<string> eventType{};
  shared_ptr<long> lastTime{};
  shared_ptr<long> occurrenceTime{};
  shared_ptr<long> securityEventId{};
  shared_ptr<string> uuid{};

  DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse() {}

  explicit DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (eventName) {
      res["EventName"] = boost::any(*eventName);
    }
    if (eventType) {
      res["EventType"] = boost::any(*eventType);
    }
    if (lastTime) {
      res["LastTime"] = boost::any(*lastTime);
    }
    if (occurrenceTime) {
      res["OccurrenceTime"] = boost::any(*occurrenceTime);
    }
    if (securityEventId) {
      res["SecurityEventId"] = boost::any(*securityEventId);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("EventName") != m.end() && !m["EventName"].empty()) {
      eventName = make_shared<string>(boost::any_cast<string>(m["EventName"]));
    }
    if (m.find("EventType") != m.end() && !m["EventType"].empty()) {
      eventType = make_shared<string>(boost::any_cast<string>(m["EventType"]));
    }
    if (m.find("LastTime") != m.end() && !m["LastTime"].empty()) {
      lastTime = make_shared<long>(boost::any_cast<long>(m["LastTime"]));
    }
    if (m.find("OccurrenceTime") != m.end() && !m["OccurrenceTime"].empty()) {
      occurrenceTime = make_shared<long>(boost::any_cast<long>(m["OccurrenceTime"]));
    }
    if (m.find("SecurityEventId") != m.end() && !m["SecurityEventId"].empty()) {
      securityEventId = make_shared<long>(boost::any_cast<long>(m["SecurityEventId"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse() = default;
};
class DescribeSimilarSecurityEventsResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeSimilarSecurityEventsResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse>> securityEventsResponse{};

  DescribeSimilarSecurityEventsResponseBody() {}

  explicit DescribeSimilarSecurityEventsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (securityEventsResponse) {
      vector<boost::any> temp1;
      for(auto item1:*securityEventsResponse){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["SecurityEventsResponse"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeSimilarSecurityEventsResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeSimilarSecurityEventsResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("SecurityEventsResponse") != m.end() && !m["SecurityEventsResponse"].empty()) {
      if (typeid(vector<boost::any>) == m["SecurityEventsResponse"].type()) {
        vector<DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["SecurityEventsResponse"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        securityEventsResponse = make_shared<vector<DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse>>(expect1);
      }
    }
  }


  virtual ~DescribeSimilarSecurityEventsResponseBody() = default;
};
class DescribeSimilarSecurityEventsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSimilarSecurityEventsResponseBody> body{};

  DescribeSimilarSecurityEventsResponse() {}

  explicit DescribeSimilarSecurityEventsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSimilarSecurityEventsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSimilarSecurityEventsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSimilarSecurityEventsResponse() = default;
};
class DescribeStrategyRequest : public Darabonba::Model {
public:
  shared_ptr<string> customType{};
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> strategyIds{};

  DescribeStrategyRequest() {}

  explicit DescribeStrategyRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (customType) {
      res["CustomType"] = boost::any(*customType);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (strategyIds) {
      res["StrategyIds"] = boost::any(*strategyIds);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CustomType") != m.end() && !m["CustomType"].empty()) {
      customType = make_shared<string>(boost::any_cast<string>(m["CustomType"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("StrategyIds") != m.end() && !m["StrategyIds"].empty()) {
      strategyIds = make_shared<string>(boost::any_cast<string>(m["StrategyIds"]));
    }
  }


  virtual ~DescribeStrategyRequest() = default;
};
class DescribeStrategyResponseBodyStrategiesConfigTargets : public Darabonba::Model {
public:
  shared_ptr<string> flag{};
  shared_ptr<string> target{};
  shared_ptr<string> targetType{};

  DescribeStrategyResponseBodyStrategiesConfigTargets() {}

  explicit DescribeStrategyResponseBodyStrategiesConfigTargets(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (flag) {
      res["Flag"] = boost::any(*flag);
    }
    if (target) {
      res["Target"] = boost::any(*target);
    }
    if (targetType) {
      res["TargetType"] = boost::any(*targetType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Flag") != m.end() && !m["Flag"].empty()) {
      flag = make_shared<string>(boost::any_cast<string>(m["Flag"]));
    }
    if (m.find("Target") != m.end() && !m["Target"].empty()) {
      target = make_shared<string>(boost::any_cast<string>(m["Target"]));
    }
    if (m.find("TargetType") != m.end() && !m["TargetType"].empty()) {
      targetType = make_shared<string>(boost::any_cast<string>(m["TargetType"]));
    }
  }


  virtual ~DescribeStrategyResponseBodyStrategiesConfigTargets() = default;
};
class DescribeStrategyResponseBodyStrategies : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeStrategyResponseBodyStrategiesConfigTargets>> configTargets{};
  shared_ptr<string> customType{};
  shared_ptr<long> cycleDays{};
  shared_ptr<long> cycleStartTime{};
  shared_ptr<long> ecsCount{};
  shared_ptr<long> execStatus{};
  shared_ptr<long> id{};
  shared_ptr<string> name{};
  shared_ptr<long> passRate{};
  shared_ptr<long> processRate{};
  shared_ptr<long> riskCount{};
  shared_ptr<long> type{};

  DescribeStrategyResponseBodyStrategies() {}

  explicit DescribeStrategyResponseBodyStrategies(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (configTargets) {
      vector<boost::any> temp1;
      for(auto item1:*configTargets){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["ConfigTargets"] = boost::any(temp1);
    }
    if (customType) {
      res["CustomType"] = boost::any(*customType);
    }
    if (cycleDays) {
      res["CycleDays"] = boost::any(*cycleDays);
    }
    if (cycleStartTime) {
      res["CycleStartTime"] = boost::any(*cycleStartTime);
    }
    if (ecsCount) {
      res["EcsCount"] = boost::any(*ecsCount);
    }
    if (execStatus) {
      res["ExecStatus"] = boost::any(*execStatus);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (passRate) {
      res["PassRate"] = boost::any(*passRate);
    }
    if (processRate) {
      res["ProcessRate"] = boost::any(*processRate);
    }
    if (riskCount) {
      res["RiskCount"] = boost::any(*riskCount);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ConfigTargets") != m.end() && !m["ConfigTargets"].empty()) {
      if (typeid(vector<boost::any>) == m["ConfigTargets"].type()) {
        vector<DescribeStrategyResponseBodyStrategiesConfigTargets> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["ConfigTargets"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeStrategyResponseBodyStrategiesConfigTargets model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        configTargets = make_shared<vector<DescribeStrategyResponseBodyStrategiesConfigTargets>>(expect1);
      }
    }
    if (m.find("CustomType") != m.end() && !m["CustomType"].empty()) {
      customType = make_shared<string>(boost::any_cast<string>(m["CustomType"]));
    }
    if (m.find("CycleDays") != m.end() && !m["CycleDays"].empty()) {
      cycleDays = make_shared<long>(boost::any_cast<long>(m["CycleDays"]));
    }
    if (m.find("CycleStartTime") != m.end() && !m["CycleStartTime"].empty()) {
      cycleStartTime = make_shared<long>(boost::any_cast<long>(m["CycleStartTime"]));
    }
    if (m.find("EcsCount") != m.end() && !m["EcsCount"].empty()) {
      ecsCount = make_shared<long>(boost::any_cast<long>(m["EcsCount"]));
    }
    if (m.find("ExecStatus") != m.end() && !m["ExecStatus"].empty()) {
      execStatus = make_shared<long>(boost::any_cast<long>(m["ExecStatus"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("PassRate") != m.end() && !m["PassRate"].empty()) {
      passRate = make_shared<long>(boost::any_cast<long>(m["PassRate"]));
    }
    if (m.find("ProcessRate") != m.end() && !m["ProcessRate"].empty()) {
      processRate = make_shared<long>(boost::any_cast<long>(m["ProcessRate"]));
    }
    if (m.find("RiskCount") != m.end() && !m["RiskCount"].empty()) {
      riskCount = make_shared<long>(boost::any_cast<long>(m["RiskCount"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<long>(boost::any_cast<long>(m["Type"]));
    }
  }


  virtual ~DescribeStrategyResponseBodyStrategies() = default;
};
class DescribeStrategyResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeStrategyResponseBodyStrategies>> strategies{};

  DescribeStrategyResponseBody() {}

  explicit DescribeStrategyResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (strategies) {
      vector<boost::any> temp1;
      for(auto item1:*strategies){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Strategies"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Strategies") != m.end() && !m["Strategies"].empty()) {
      if (typeid(vector<boost::any>) == m["Strategies"].type()) {
        vector<DescribeStrategyResponseBodyStrategies> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Strategies"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeStrategyResponseBodyStrategies model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        strategies = make_shared<vector<DescribeStrategyResponseBodyStrategies>>(expect1);
      }
    }
  }


  virtual ~DescribeStrategyResponseBody() = default;
};
class DescribeStrategyResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeStrategyResponseBody> body{};

  DescribeStrategyResponse() {}

  explicit DescribeStrategyResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeStrategyResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeStrategyResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeStrategyResponse() = default;
};
class DescribeStrategyExecDetailRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> sourceIp{};
  shared_ptr<long> strategyId{};

  DescribeStrategyExecDetailRequest() {}

  explicit DescribeStrategyExecDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (strategyId) {
      res["StrategyId"] = boost::any(*strategyId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("StrategyId") != m.end() && !m["StrategyId"].empty()) {
      strategyId = make_shared<long>(boost::any_cast<long>(m["StrategyId"]));
    }
  }


  virtual ~DescribeStrategyExecDetailRequest() = default;
};
class DescribeStrategyExecDetailResponseBodyFailedEcsList : public Darabonba::Model {
public:
  shared_ptr<string> IP{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> reason{};

  DescribeStrategyExecDetailResponseBodyFailedEcsList() {}

  explicit DescribeStrategyExecDetailResponseBodyFailedEcsList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (IP) {
      res["IP"] = boost::any(*IP);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (reason) {
      res["Reason"] = boost::any(*reason);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("IP") != m.end() && !m["IP"].empty()) {
      IP = make_shared<string>(boost::any_cast<string>(m["IP"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("Reason") != m.end() && !m["Reason"].empty()) {
      reason = make_shared<string>(boost::any_cast<string>(m["Reason"]));
    }
  }


  virtual ~DescribeStrategyExecDetailResponseBodyFailedEcsList() = default;
};
class DescribeStrategyExecDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> endTime{};
  shared_ptr<long> failCount{};
  shared_ptr<vector<DescribeStrategyExecDetailResponseBodyFailedEcsList>> failedEcsList{};
  shared_ptr<long> inProcessCount{};
  shared_ptr<string> percent{};
  shared_ptr<string> requestId{};
  shared_ptr<string> source{};
  shared_ptr<string> startTime{};
  shared_ptr<long> successCount{};

  DescribeStrategyExecDetailResponseBody() {}

  explicit DescribeStrategyExecDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (failCount) {
      res["FailCount"] = boost::any(*failCount);
    }
    if (failedEcsList) {
      vector<boost::any> temp1;
      for(auto item1:*failedEcsList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["FailedEcsList"] = boost::any(temp1);
    }
    if (inProcessCount) {
      res["InProcessCount"] = boost::any(*inProcessCount);
    }
    if (percent) {
      res["Percent"] = boost::any(*percent);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (source) {
      res["Source"] = boost::any(*source);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    if (successCount) {
      res["SuccessCount"] = boost::any(*successCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<string>(boost::any_cast<string>(m["EndTime"]));
    }
    if (m.find("FailCount") != m.end() && !m["FailCount"].empty()) {
      failCount = make_shared<long>(boost::any_cast<long>(m["FailCount"]));
    }
    if (m.find("FailedEcsList") != m.end() && !m["FailedEcsList"].empty()) {
      if (typeid(vector<boost::any>) == m["FailedEcsList"].type()) {
        vector<DescribeStrategyExecDetailResponseBodyFailedEcsList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["FailedEcsList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeStrategyExecDetailResponseBodyFailedEcsList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        failedEcsList = make_shared<vector<DescribeStrategyExecDetailResponseBodyFailedEcsList>>(expect1);
      }
    }
    if (m.find("InProcessCount") != m.end() && !m["InProcessCount"].empty()) {
      inProcessCount = make_shared<long>(boost::any_cast<long>(m["InProcessCount"]));
    }
    if (m.find("Percent") != m.end() && !m["Percent"].empty()) {
      percent = make_shared<string>(boost::any_cast<string>(m["Percent"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Source") != m.end() && !m["Source"].empty()) {
      source = make_shared<string>(boost::any_cast<string>(m["Source"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<string>(boost::any_cast<string>(m["StartTime"]));
    }
    if (m.find("SuccessCount") != m.end() && !m["SuccessCount"].empty()) {
      successCount = make_shared<long>(boost::any_cast<long>(m["SuccessCount"]));
    }
  }


  virtual ~DescribeStrategyExecDetailResponseBody() = default;
};
class DescribeStrategyExecDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeStrategyExecDetailResponseBody> body{};

  DescribeStrategyExecDetailResponse() {}

  explicit DescribeStrategyExecDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeStrategyExecDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeStrategyExecDetailResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeStrategyExecDetailResponse() = default;
};
class DescribeStrategyTargetRequest : public Darabonba::Model {
public:
  shared_ptr<string> config{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> type{};

  DescribeStrategyTargetRequest() {}

  explicit DescribeStrategyTargetRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (config) {
      res["Config"] = boost::any(*config);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Config") != m.end() && !m["Config"].empty()) {
      config = make_shared<string>(boost::any_cast<string>(m["Config"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribeStrategyTargetRequest() = default;
};
class DescribeStrategyTargetResponseBodyStrategyTargets : public Darabonba::Model {
public:
  shared_ptr<long> bindUuidCount{};
  shared_ptr<string> flag{};
  shared_ptr<string> target{};
  shared_ptr<string> targetType{};

  DescribeStrategyTargetResponseBodyStrategyTargets() {}

  explicit DescribeStrategyTargetResponseBodyStrategyTargets(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (bindUuidCount) {
      res["BindUuidCount"] = boost::any(*bindUuidCount);
    }
    if (flag) {
      res["Flag"] = boost::any(*flag);
    }
    if (target) {
      res["Target"] = boost::any(*target);
    }
    if (targetType) {
      res["TargetType"] = boost::any(*targetType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BindUuidCount") != m.end() && !m["BindUuidCount"].empty()) {
      bindUuidCount = make_shared<long>(boost::any_cast<long>(m["BindUuidCount"]));
    }
    if (m.find("Flag") != m.end() && !m["Flag"].empty()) {
      flag = make_shared<string>(boost::any_cast<string>(m["Flag"]));
    }
    if (m.find("Target") != m.end() && !m["Target"].empty()) {
      target = make_shared<string>(boost::any_cast<string>(m["Target"]));
    }
    if (m.find("TargetType") != m.end() && !m["TargetType"].empty()) {
      targetType = make_shared<string>(boost::any_cast<string>(m["TargetType"]));
    }
  }


  virtual ~DescribeStrategyTargetResponseBodyStrategyTargets() = default;
};
class DescribeStrategyTargetResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeStrategyTargetResponseBodyStrategyTargets>> strategyTargets{};

  DescribeStrategyTargetResponseBody() {}

  explicit DescribeStrategyTargetResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (strategyTargets) {
      vector<boost::any> temp1;
      for(auto item1:*strategyTargets){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["StrategyTargets"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("StrategyTargets") != m.end() && !m["StrategyTargets"].empty()) {
      if (typeid(vector<boost::any>) == m["StrategyTargets"].type()) {
        vector<DescribeStrategyTargetResponseBodyStrategyTargets> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["StrategyTargets"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeStrategyTargetResponseBodyStrategyTargets model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        strategyTargets = make_shared<vector<DescribeStrategyTargetResponseBodyStrategyTargets>>(expect1);
      }
    }
  }


  virtual ~DescribeStrategyTargetResponseBody() = default;
};
class DescribeStrategyTargetResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeStrategyTargetResponseBody> body{};

  DescribeStrategyTargetResponse() {}

  explicit DescribeStrategyTargetResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeStrategyTargetResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeStrategyTargetResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeStrategyTargetResponse() = default;
};
class DescribeSummaryInfoRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<string> resourceDirectoryAccountId{};
  shared_ptr<string> sourceIp{};

  DescribeSummaryInfoRequest() {}

  explicit DescribeSummaryInfoRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (resourceDirectoryAccountId) {
      res["ResourceDirectoryAccountId"] = boost::any(*resourceDirectoryAccountId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("ResourceDirectoryAccountId") != m.end() && !m["ResourceDirectoryAccountId"].empty()) {
      resourceDirectoryAccountId = make_shared<string>(boost::any_cast<string>(m["ResourceDirectoryAccountId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeSummaryInfoRequest() = default;
};
class DescribeSummaryInfoResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> aegisClientOfflineCount{};
  shared_ptr<long> aegisClientOnlineCount{};
  shared_ptr<string> requestId{};
  shared_ptr<long> securityScore{};
  shared_ptr<bool> success{};

  DescribeSummaryInfoResponseBody() {}

  explicit DescribeSummaryInfoResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aegisClientOfflineCount) {
      res["AegisClientOfflineCount"] = boost::any(*aegisClientOfflineCount);
    }
    if (aegisClientOnlineCount) {
      res["AegisClientOnlineCount"] = boost::any(*aegisClientOnlineCount);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (securityScore) {
      res["SecurityScore"] = boost::any(*securityScore);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AegisClientOfflineCount") != m.end() && !m["AegisClientOfflineCount"].empty()) {
      aegisClientOfflineCount = make_shared<long>(boost::any_cast<long>(m["AegisClientOfflineCount"]));
    }
    if (m.find("AegisClientOnlineCount") != m.end() && !m["AegisClientOnlineCount"].empty()) {
      aegisClientOnlineCount = make_shared<long>(boost::any_cast<long>(m["AegisClientOnlineCount"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("SecurityScore") != m.end() && !m["SecurityScore"].empty()) {
      securityScore = make_shared<long>(boost::any_cast<long>(m["SecurityScore"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~DescribeSummaryInfoResponseBody() = default;
};
class DescribeSummaryInfoResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSummaryInfoResponseBody> body{};

  DescribeSummaryInfoResponse() {}

  explicit DescribeSummaryInfoResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSummaryInfoResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSummaryInfoResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSummaryInfoResponse() = default;
};
class DescribeSupportRegionResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<vector<string>> supportRegion{};

  DescribeSupportRegionResponseBody() {}

  explicit DescribeSupportRegionResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (supportRegion) {
      res["SupportRegion"] = boost::any(*supportRegion);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("SupportRegion") != m.end() && !m["SupportRegion"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["SupportRegion"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["SupportRegion"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      supportRegion = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~DescribeSupportRegionResponseBody() = default;
};
class DescribeSupportRegionResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSupportRegionResponseBody> body{};

  DescribeSupportRegionResponse() {}

  explicit DescribeSupportRegionResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSupportRegionResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSupportRegionResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSupportRegionResponse() = default;
};
class DescribeSuspEventDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> from{};
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};
  shared_ptr<long> suspiciousEventId{};

  DescribeSuspEventDetailRequest() {}

  explicit DescribeSuspEventDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (from) {
      res["From"] = boost::any(*from);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (suspiciousEventId) {
      res["SuspiciousEventId"] = boost::any(*suspiciousEventId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("From") != m.end() && !m["From"].empty()) {
      from = make_shared<string>(boost::any_cast<string>(m["From"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("SuspiciousEventId") != m.end() && !m["SuspiciousEventId"].empty()) {
      suspiciousEventId = make_shared<long>(boost::any_cast<long>(m["SuspiciousEventId"]));
    }
  }


  virtual ~DescribeSuspEventDetailRequest() = default;
};
class DescribeSuspEventDetailResponseBodyDetails : public Darabonba::Model {
public:
  shared_ptr<string> nameDisplay{};
  shared_ptr<string> type{};
  shared_ptr<string> value{};

  DescribeSuspEventDetailResponseBodyDetails() {}

  explicit DescribeSuspEventDetailResponseBodyDetails(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (nameDisplay) {
      res["NameDisplay"] = boost::any(*nameDisplay);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (value) {
      res["Value"] = boost::any(*value);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("NameDisplay") != m.end() && !m["NameDisplay"].empty()) {
      nameDisplay = make_shared<string>(boost::any_cast<string>(m["NameDisplay"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Value") != m.end() && !m["Value"].empty()) {
      value = make_shared<string>(boost::any_cast<string>(m["Value"]));
    }
  }


  virtual ~DescribeSuspEventDetailResponseBodyDetails() = default;
};
class DescribeSuspEventDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<bool> canBeDealOnLine{};
  shared_ptr<string> dataSource{};
  shared_ptr<vector<DescribeSuspEventDetailResponseBodyDetails>> details{};
  shared_ptr<string> eventDesc{};
  shared_ptr<string> eventName{};
  shared_ptr<string> eventStatus{};
  shared_ptr<string> eventTypeDesc{};
  shared_ptr<long> id{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> lastTime{};
  shared_ptr<string> level{};
  shared_ptr<string> operateErrorCode{};
  shared_ptr<string> operateMsg{};
  shared_ptr<string> requestId{};
  shared_ptr<string> saleVersion{};
  shared_ptr<string> uuid{};

  DescribeSuspEventDetailResponseBody() {}

  explicit DescribeSuspEventDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (canBeDealOnLine) {
      res["CanBeDealOnLine"] = boost::any(*canBeDealOnLine);
    }
    if (dataSource) {
      res["DataSource"] = boost::any(*dataSource);
    }
    if (details) {
      vector<boost::any> temp1;
      for(auto item1:*details){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Details"] = boost::any(temp1);
    }
    if (eventDesc) {
      res["EventDesc"] = boost::any(*eventDesc);
    }
    if (eventName) {
      res["EventName"] = boost::any(*eventName);
    }
    if (eventStatus) {
      res["EventStatus"] = boost::any(*eventStatus);
    }
    if (eventTypeDesc) {
      res["EventTypeDesc"] = boost::any(*eventTypeDesc);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (lastTime) {
      res["LastTime"] = boost::any(*lastTime);
    }
    if (level) {
      res["Level"] = boost::any(*level);
    }
    if (operateErrorCode) {
      res["OperateErrorCode"] = boost::any(*operateErrorCode);
    }
    if (operateMsg) {
      res["OperateMsg"] = boost::any(*operateMsg);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (saleVersion) {
      res["SaleVersion"] = boost::any(*saleVersion);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CanBeDealOnLine") != m.end() && !m["CanBeDealOnLine"].empty()) {
      canBeDealOnLine = make_shared<bool>(boost::any_cast<bool>(m["CanBeDealOnLine"]));
    }
    if (m.find("DataSource") != m.end() && !m["DataSource"].empty()) {
      dataSource = make_shared<string>(boost::any_cast<string>(m["DataSource"]));
    }
    if (m.find("Details") != m.end() && !m["Details"].empty()) {
      if (typeid(vector<boost::any>) == m["Details"].type()) {
        vector<DescribeSuspEventDetailResponseBodyDetails> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Details"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSuspEventDetailResponseBodyDetails model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        details = make_shared<vector<DescribeSuspEventDetailResponseBodyDetails>>(expect1);
      }
    }
    if (m.find("EventDesc") != m.end() && !m["EventDesc"].empty()) {
      eventDesc = make_shared<string>(boost::any_cast<string>(m["EventDesc"]));
    }
    if (m.find("EventName") != m.end() && !m["EventName"].empty()) {
      eventName = make_shared<string>(boost::any_cast<string>(m["EventName"]));
    }
    if (m.find("EventStatus") != m.end() && !m["EventStatus"].empty()) {
      eventStatus = make_shared<string>(boost::any_cast<string>(m["EventStatus"]));
    }
    if (m.find("EventTypeDesc") != m.end() && !m["EventTypeDesc"].empty()) {
      eventTypeDesc = make_shared<string>(boost::any_cast<string>(m["EventTypeDesc"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("LastTime") != m.end() && !m["LastTime"].empty()) {
      lastTime = make_shared<string>(boost::any_cast<string>(m["LastTime"]));
    }
    if (m.find("Level") != m.end() && !m["Level"].empty()) {
      level = make_shared<string>(boost::any_cast<string>(m["Level"]));
    }
    if (m.find("OperateErrorCode") != m.end() && !m["OperateErrorCode"].empty()) {
      operateErrorCode = make_shared<string>(boost::any_cast<string>(m["OperateErrorCode"]));
    }
    if (m.find("OperateMsg") != m.end() && !m["OperateMsg"].empty()) {
      operateMsg = make_shared<string>(boost::any_cast<string>(m["OperateMsg"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("SaleVersion") != m.end() && !m["SaleVersion"].empty()) {
      saleVersion = make_shared<string>(boost::any_cast<string>(m["SaleVersion"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeSuspEventDetailResponseBody() = default;
};
class DescribeSuspEventDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSuspEventDetailResponseBody> body{};

  DescribeSuspEventDetailResponse() {}

  explicit DescribeSuspEventDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSuspEventDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSuspEventDetailResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSuspEventDetailResponse() = default;
};
class DescribeSuspEventQuaraFilesRequest : public Darabonba::Model {
public:
  shared_ptr<string> currentPage{};
  shared_ptr<string> from{};
  shared_ptr<string> groupId{};
  shared_ptr<long> groupingId{};
  shared_ptr<string> pageSize{};
  shared_ptr<string> quaraTag{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> status{};

  DescribeSuspEventQuaraFilesRequest() {}

  explicit DescribeSuspEventQuaraFilesRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (from) {
      res["From"] = boost::any(*from);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (groupingId) {
      res["GroupingId"] = boost::any(*groupingId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (quaraTag) {
      res["QuaraTag"] = boost::any(*quaraTag);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<string>(boost::any_cast<string>(m["CurrentPage"]));
    }
    if (m.find("From") != m.end() && !m["From"].empty()) {
      from = make_shared<string>(boost::any_cast<string>(m["From"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<string>(boost::any_cast<string>(m["GroupId"]));
    }
    if (m.find("GroupingId") != m.end() && !m["GroupingId"].empty()) {
      groupingId = make_shared<long>(boost::any_cast<long>(m["GroupingId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<string>(boost::any_cast<string>(m["PageSize"]));
    }
    if (m.find("QuaraTag") != m.end() && !m["QuaraTag"].empty()) {
      quaraTag = make_shared<string>(boost::any_cast<string>(m["QuaraTag"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
  }


  virtual ~DescribeSuspEventQuaraFilesRequest() = default;
};
class DescribeSuspEventQuaraFilesResponseBodyQuaraFiles : public Darabonba::Model {
public:
  shared_ptr<string> eventName{};
  shared_ptr<string> eventType{};
  shared_ptr<long> id{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> ip{};
  shared_ptr<string> link{};
  shared_ptr<string> md5{};
  shared_ptr<string> modifyTime{};
  shared_ptr<string> path{};
  shared_ptr<string> status{};
  shared_ptr<string> tag{};
  shared_ptr<string> uuid{};

  DescribeSuspEventQuaraFilesResponseBodyQuaraFiles() {}

  explicit DescribeSuspEventQuaraFilesResponseBodyQuaraFiles(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (eventName) {
      res["EventName"] = boost::any(*eventName);
    }
    if (eventType) {
      res["EventType"] = boost::any(*eventType);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (ip) {
      res["Ip"] = boost::any(*ip);
    }
    if (link) {
      res["Link"] = boost::any(*link);
    }
    if (md5) {
      res["Md5"] = boost::any(*md5);
    }
    if (modifyTime) {
      res["ModifyTime"] = boost::any(*modifyTime);
    }
    if (path) {
      res["Path"] = boost::any(*path);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (tag) {
      res["Tag"] = boost::any(*tag);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("EventName") != m.end() && !m["EventName"].empty()) {
      eventName = make_shared<string>(boost::any_cast<string>(m["EventName"]));
    }
    if (m.find("EventType") != m.end() && !m["EventType"].empty()) {
      eventType = make_shared<string>(boost::any_cast<string>(m["EventType"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("Ip") != m.end() && !m["Ip"].empty()) {
      ip = make_shared<string>(boost::any_cast<string>(m["Ip"]));
    }
    if (m.find("Link") != m.end() && !m["Link"].empty()) {
      link = make_shared<string>(boost::any_cast<string>(m["Link"]));
    }
    if (m.find("Md5") != m.end() && !m["Md5"].empty()) {
      md5 = make_shared<string>(boost::any_cast<string>(m["Md5"]));
    }
    if (m.find("ModifyTime") != m.end() && !m["ModifyTime"].empty()) {
      modifyTime = make_shared<string>(boost::any_cast<string>(m["ModifyTime"]));
    }
    if (m.find("Path") != m.end() && !m["Path"].empty()) {
      path = make_shared<string>(boost::any_cast<string>(m["Path"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("Tag") != m.end() && !m["Tag"].empty()) {
      tag = make_shared<string>(boost::any_cast<string>(m["Tag"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeSuspEventQuaraFilesResponseBodyQuaraFiles() = default;
};
class DescribeSuspEventQuaraFilesResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<vector<DescribeSuspEventQuaraFilesResponseBodyQuaraFiles>> quaraFiles{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};

  DescribeSuspEventQuaraFilesResponseBody() {}

  explicit DescribeSuspEventQuaraFilesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (quaraFiles) {
      vector<boost::any> temp1;
      for(auto item1:*quaraFiles){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["QuaraFiles"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("QuaraFiles") != m.end() && !m["QuaraFiles"].empty()) {
      if (typeid(vector<boost::any>) == m["QuaraFiles"].type()) {
        vector<DescribeSuspEventQuaraFilesResponseBodyQuaraFiles> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["QuaraFiles"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSuspEventQuaraFilesResponseBodyQuaraFiles model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        quaraFiles = make_shared<vector<DescribeSuspEventQuaraFilesResponseBodyQuaraFiles>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeSuspEventQuaraFilesResponseBody() = default;
};
class DescribeSuspEventQuaraFilesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSuspEventQuaraFilesResponseBody> body{};

  DescribeSuspEventQuaraFilesResponse() {}

  explicit DescribeSuspEventQuaraFilesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSuspEventQuaraFilesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSuspEventQuaraFilesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSuspEventQuaraFilesResponse() = default;
};
class DescribeSuspEventsRequest : public Darabonba::Model {
public:
  shared_ptr<string> alarmUniqueInfo{};
  shared_ptr<string> clusterId{};
  shared_ptr<string> containerFieldName{};
  shared_ptr<string> containerFieldValue{};
  shared_ptr<string> currentPage{};
  shared_ptr<string> dealed{};
  shared_ptr<string> eventNames{};
  shared_ptr<string> from{};
  shared_ptr<long> groupId{};
  shared_ptr<string> lang{};
  shared_ptr<string> levels{};
  shared_ptr<string> name{};
  shared_ptr<vector<string>> operateErrorCodeList{};
  shared_ptr<string> pageSize{};
  shared_ptr<string> parentEventTypes{};
  shared_ptr<string> remark{};
  shared_ptr<string> source{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> status{};
  shared_ptr<string> tacticId{};
  shared_ptr<string> targetType{};
  shared_ptr<string> uniqueInfo{};
  shared_ptr<string> uuids{};

  DescribeSuspEventsRequest() {}

  explicit DescribeSuspEventsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (alarmUniqueInfo) {
      res["AlarmUniqueInfo"] = boost::any(*alarmUniqueInfo);
    }
    if (clusterId) {
      res["ClusterId"] = boost::any(*clusterId);
    }
    if (containerFieldName) {
      res["ContainerFieldName"] = boost::any(*containerFieldName);
    }
    if (containerFieldValue) {
      res["ContainerFieldValue"] = boost::any(*containerFieldValue);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (dealed) {
      res["Dealed"] = boost::any(*dealed);
    }
    if (eventNames) {
      res["EventNames"] = boost::any(*eventNames);
    }
    if (from) {
      res["From"] = boost::any(*from);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (levels) {
      res["Levels"] = boost::any(*levels);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (operateErrorCodeList) {
      res["OperateErrorCodeList"] = boost::any(*operateErrorCodeList);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (parentEventTypes) {
      res["ParentEventTypes"] = boost::any(*parentEventTypes);
    }
    if (remark) {
      res["Remark"] = boost::any(*remark);
    }
    if (source) {
      res["Source"] = boost::any(*source);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (tacticId) {
      res["TacticId"] = boost::any(*tacticId);
    }
    if (targetType) {
      res["TargetType"] = boost::any(*targetType);
    }
    if (uniqueInfo) {
      res["UniqueInfo"] = boost::any(*uniqueInfo);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AlarmUniqueInfo") != m.end() && !m["AlarmUniqueInfo"].empty()) {
      alarmUniqueInfo = make_shared<string>(boost::any_cast<string>(m["AlarmUniqueInfo"]));
    }
    if (m.find("ClusterId") != m.end() && !m["ClusterId"].empty()) {
      clusterId = make_shared<string>(boost::any_cast<string>(m["ClusterId"]));
    }
    if (m.find("ContainerFieldName") != m.end() && !m["ContainerFieldName"].empty()) {
      containerFieldName = make_shared<string>(boost::any_cast<string>(m["ContainerFieldName"]));
    }
    if (m.find("ContainerFieldValue") != m.end() && !m["ContainerFieldValue"].empty()) {
      containerFieldValue = make_shared<string>(boost::any_cast<string>(m["ContainerFieldValue"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<string>(boost::any_cast<string>(m["CurrentPage"]));
    }
    if (m.find("Dealed") != m.end() && !m["Dealed"].empty()) {
      dealed = make_shared<string>(boost::any_cast<string>(m["Dealed"]));
    }
    if (m.find("EventNames") != m.end() && !m["EventNames"].empty()) {
      eventNames = make_shared<string>(boost::any_cast<string>(m["EventNames"]));
    }
    if (m.find("From") != m.end() && !m["From"].empty()) {
      from = make_shared<string>(boost::any_cast<string>(m["From"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("Levels") != m.end() && !m["Levels"].empty()) {
      levels = make_shared<string>(boost::any_cast<string>(m["Levels"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("OperateErrorCodeList") != m.end() && !m["OperateErrorCodeList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["OperateErrorCodeList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["OperateErrorCodeList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      operateErrorCodeList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<string>(boost::any_cast<string>(m["PageSize"]));
    }
    if (m.find("ParentEventTypes") != m.end() && !m["ParentEventTypes"].empty()) {
      parentEventTypes = make_shared<string>(boost::any_cast<string>(m["ParentEventTypes"]));
    }
    if (m.find("Remark") != m.end() && !m["Remark"].empty()) {
      remark = make_shared<string>(boost::any_cast<string>(m["Remark"]));
    }
    if (m.find("Source") != m.end() && !m["Source"].empty()) {
      source = make_shared<string>(boost::any_cast<string>(m["Source"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("TacticId") != m.end() && !m["TacticId"].empty()) {
      tacticId = make_shared<string>(boost::any_cast<string>(m["TacticId"]));
    }
    if (m.find("TargetType") != m.end() && !m["TargetType"].empty()) {
      targetType = make_shared<string>(boost::any_cast<string>(m["TargetType"]));
    }
    if (m.find("UniqueInfo") != m.end() && !m["UniqueInfo"].empty()) {
      uniqueInfo = make_shared<string>(boost::any_cast<string>(m["UniqueInfo"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~DescribeSuspEventsRequest() = default;
};
class DescribeSuspEventsResponseBodySuspEventsDetails : public Darabonba::Model {
public:
  shared_ptr<string> nameDisplay{};
  shared_ptr<string> type{};
  shared_ptr<string> value{};
  shared_ptr<string> valueDisplay{};

  DescribeSuspEventsResponseBodySuspEventsDetails() {}

  explicit DescribeSuspEventsResponseBodySuspEventsDetails(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (nameDisplay) {
      res["NameDisplay"] = boost::any(*nameDisplay);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (value) {
      res["Value"] = boost::any(*value);
    }
    if (valueDisplay) {
      res["ValueDisplay"] = boost::any(*valueDisplay);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("NameDisplay") != m.end() && !m["NameDisplay"].empty()) {
      nameDisplay = make_shared<string>(boost::any_cast<string>(m["NameDisplay"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Value") != m.end() && !m["Value"].empty()) {
      value = make_shared<string>(boost::any_cast<string>(m["Value"]));
    }
    if (m.find("ValueDisplay") != m.end() && !m["ValueDisplay"].empty()) {
      valueDisplay = make_shared<string>(boost::any_cast<string>(m["ValueDisplay"]));
    }
  }


  virtual ~DescribeSuspEventsResponseBodySuspEventsDetails() = default;
};
class DescribeSuspEventsResponseBodySuspEventsEventNotes : public Darabonba::Model {
public:
  shared_ptr<string> note{};
  shared_ptr<long> noteId{};
  shared_ptr<string> noteTime{};

  DescribeSuspEventsResponseBodySuspEventsEventNotes() {}

  explicit DescribeSuspEventsResponseBodySuspEventsEventNotes(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (note) {
      res["Note"] = boost::any(*note);
    }
    if (noteId) {
      res["NoteId"] = boost::any(*noteId);
    }
    if (noteTime) {
      res["NoteTime"] = boost::any(*noteTime);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Note") != m.end() && !m["Note"].empty()) {
      note = make_shared<string>(boost::any_cast<string>(m["Note"]));
    }
    if (m.find("NoteId") != m.end() && !m["NoteId"].empty()) {
      noteId = make_shared<long>(boost::any_cast<long>(m["NoteId"]));
    }
    if (m.find("NoteTime") != m.end() && !m["NoteTime"].empty()) {
      noteTime = make_shared<string>(boost::any_cast<string>(m["NoteTime"]));
    }
  }


  virtual ~DescribeSuspEventsResponseBodySuspEventsEventNotes() = default;
};
class DescribeSuspEventsResponseBodySuspEventsTacticItems : public Darabonba::Model {
public:
  shared_ptr<string> tacticDisplayName{};
  shared_ptr<string> tacticId{};

  DescribeSuspEventsResponseBodySuspEventsTacticItems() {}

  explicit DescribeSuspEventsResponseBodySuspEventsTacticItems(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (tacticDisplayName) {
      res["TacticDisplayName"] = boost::any(*tacticDisplayName);
    }
    if (tacticId) {
      res["TacticId"] = boost::any(*tacticId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("TacticDisplayName") != m.end() && !m["TacticDisplayName"].empty()) {
      tacticDisplayName = make_shared<string>(boost::any_cast<string>(m["TacticDisplayName"]));
    }
    if (m.find("TacticId") != m.end() && !m["TacticId"].empty()) {
      tacticId = make_shared<string>(boost::any_cast<string>(m["TacticId"]));
    }
  }


  virtual ~DescribeSuspEventsResponseBodySuspEventsTacticItems() = default;
};
class DescribeSuspEventsResponseBodySuspEvents : public Darabonba::Model {
public:
  shared_ptr<bool> advanced{};
  shared_ptr<string> alarmEventName{};
  shared_ptr<string> alarmEventNameDisplay{};
  shared_ptr<string> alarmEventType{};
  shared_ptr<string> alarmEventTypeDisplay{};
  shared_ptr<string> alarmUniqueInfo{};
  shared_ptr<string> appName{};
  shared_ptr<bool> autoBreaking{};
  shared_ptr<bool> canBeDealOnLine{};
  shared_ptr<bool> canCancelFault{};
  shared_ptr<bool> containHwMode{};
  shared_ptr<string> containerId{};
  shared_ptr<string> containerImageId{};
  shared_ptr<string> containerImageName{};
  shared_ptr<string> dataSource{};
  shared_ptr<string> desc{};
  shared_ptr<vector<DescribeSuspEventsResponseBodySuspEventsDetails>> details{};
  shared_ptr<vector<DescribeSuspEventsResponseBodySuspEventsEventNotes>> eventNotes{};
  shared_ptr<long> eventStatus{};
  shared_ptr<string> eventSubType{};
  shared_ptr<bool> hasTraceInfo{};
  shared_ptr<long> id{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> k8sClusterId{};
  shared_ptr<string> k8sClusterName{};
  shared_ptr<string> k8sNamespace{};
  shared_ptr<string> k8sNodeId{};
  shared_ptr<string> k8sNodeName{};
  shared_ptr<string> k8sPodName{};
  shared_ptr<string> lastTime{};
  shared_ptr<long> lastTimeStamp{};
  shared_ptr<string> level{};
  shared_ptr<string> markMisRules{};
  shared_ptr<string> name{};
  shared_ptr<string> occurrenceTime{};
  shared_ptr<long> occurrenceTimeStamp{};
  shared_ptr<string> operateErrorCode{};
  shared_ptr<string> operateMsg{};
  shared_ptr<long> operateTime{};
  shared_ptr<string> saleVersion{};
  shared_ptr<string> securityEventIds{};
  shared_ptr<string> stages{};
  shared_ptr<vector<DescribeSuspEventsResponseBodySuspEventsTacticItems>> tacticItems{};
  shared_ptr<string> uniqueInfo{};
  shared_ptr<string> uuid{};

  DescribeSuspEventsResponseBodySuspEvents() {}

  explicit DescribeSuspEventsResponseBodySuspEvents(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (advanced) {
      res["Advanced"] = boost::any(*advanced);
    }
    if (alarmEventName) {
      res["AlarmEventName"] = boost::any(*alarmEventName);
    }
    if (alarmEventNameDisplay) {
      res["AlarmEventNameDisplay"] = boost::any(*alarmEventNameDisplay);
    }
    if (alarmEventType) {
      res["AlarmEventType"] = boost::any(*alarmEventType);
    }
    if (alarmEventTypeDisplay) {
      res["AlarmEventTypeDisplay"] = boost::any(*alarmEventTypeDisplay);
    }
    if (alarmUniqueInfo) {
      res["AlarmUniqueInfo"] = boost::any(*alarmUniqueInfo);
    }
    if (appName) {
      res["AppName"] = boost::any(*appName);
    }
    if (autoBreaking) {
      res["AutoBreaking"] = boost::any(*autoBreaking);
    }
    if (canBeDealOnLine) {
      res["CanBeDealOnLine"] = boost::any(*canBeDealOnLine);
    }
    if (canCancelFault) {
      res["CanCancelFault"] = boost::any(*canCancelFault);
    }
    if (containHwMode) {
      res["ContainHwMode"] = boost::any(*containHwMode);
    }
    if (containerId) {
      res["ContainerId"] = boost::any(*containerId);
    }
    if (containerImageId) {
      res["ContainerImageId"] = boost::any(*containerImageId);
    }
    if (containerImageName) {
      res["ContainerImageName"] = boost::any(*containerImageName);
    }
    if (dataSource) {
      res["DataSource"] = boost::any(*dataSource);
    }
    if (desc) {
      res["Desc"] = boost::any(*desc);
    }
    if (details) {
      vector<boost::any> temp1;
      for(auto item1:*details){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Details"] = boost::any(temp1);
    }
    if (eventNotes) {
      vector<boost::any> temp1;
      for(auto item1:*eventNotes){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["EventNotes"] = boost::any(temp1);
    }
    if (eventStatus) {
      res["EventStatus"] = boost::any(*eventStatus);
    }
    if (eventSubType) {
      res["EventSubType"] = boost::any(*eventSubType);
    }
    if (hasTraceInfo) {
      res["HasTraceInfo"] = boost::any(*hasTraceInfo);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (k8sClusterId) {
      res["K8sClusterId"] = boost::any(*k8sClusterId);
    }
    if (k8sClusterName) {
      res["K8sClusterName"] = boost::any(*k8sClusterName);
    }
    if (k8sNamespace) {
      res["K8sNamespace"] = boost::any(*k8sNamespace);
    }
    if (k8sNodeId) {
      res["K8sNodeId"] = boost::any(*k8sNodeId);
    }
    if (k8sNodeName) {
      res["K8sNodeName"] = boost::any(*k8sNodeName);
    }
    if (k8sPodName) {
      res["K8sPodName"] = boost::any(*k8sPodName);
    }
    if (lastTime) {
      res["LastTime"] = boost::any(*lastTime);
    }
    if (lastTimeStamp) {
      res["LastTimeStamp"] = boost::any(*lastTimeStamp);
    }
    if (level) {
      res["Level"] = boost::any(*level);
    }
    if (markMisRules) {
      res["MarkMisRules"] = boost::any(*markMisRules);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (occurrenceTime) {
      res["OccurrenceTime"] = boost::any(*occurrenceTime);
    }
    if (occurrenceTimeStamp) {
      res["OccurrenceTimeStamp"] = boost::any(*occurrenceTimeStamp);
    }
    if (operateErrorCode) {
      res["OperateErrorCode"] = boost::any(*operateErrorCode);
    }
    if (operateMsg) {
      res["OperateMsg"] = boost::any(*operateMsg);
    }
    if (operateTime) {
      res["OperateTime"] = boost::any(*operateTime);
    }
    if (saleVersion) {
      res["SaleVersion"] = boost::any(*saleVersion);
    }
    if (securityEventIds) {
      res["SecurityEventIds"] = boost::any(*securityEventIds);
    }
    if (stages) {
      res["Stages"] = boost::any(*stages);
    }
    if (tacticItems) {
      vector<boost::any> temp1;
      for(auto item1:*tacticItems){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["TacticItems"] = boost::any(temp1);
    }
    if (uniqueInfo) {
      res["UniqueInfo"] = boost::any(*uniqueInfo);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Advanced") != m.end() && !m["Advanced"].empty()) {
      advanced = make_shared<bool>(boost::any_cast<bool>(m["Advanced"]));
    }
    if (m.find("AlarmEventName") != m.end() && !m["AlarmEventName"].empty()) {
      alarmEventName = make_shared<string>(boost::any_cast<string>(m["AlarmEventName"]));
    }
    if (m.find("AlarmEventNameDisplay") != m.end() && !m["AlarmEventNameDisplay"].empty()) {
      alarmEventNameDisplay = make_shared<string>(boost::any_cast<string>(m["AlarmEventNameDisplay"]));
    }
    if (m.find("AlarmEventType") != m.end() && !m["AlarmEventType"].empty()) {
      alarmEventType = make_shared<string>(boost::any_cast<string>(m["AlarmEventType"]));
    }
    if (m.find("AlarmEventTypeDisplay") != m.end() && !m["AlarmEventTypeDisplay"].empty()) {
      alarmEventTypeDisplay = make_shared<string>(boost::any_cast<string>(m["AlarmEventTypeDisplay"]));
    }
    if (m.find("AlarmUniqueInfo") != m.end() && !m["AlarmUniqueInfo"].empty()) {
      alarmUniqueInfo = make_shared<string>(boost::any_cast<string>(m["AlarmUniqueInfo"]));
    }
    if (m.find("AppName") != m.end() && !m["AppName"].empty()) {
      appName = make_shared<string>(boost::any_cast<string>(m["AppName"]));
    }
    if (m.find("AutoBreaking") != m.end() && !m["AutoBreaking"].empty()) {
      autoBreaking = make_shared<bool>(boost::any_cast<bool>(m["AutoBreaking"]));
    }
    if (m.find("CanBeDealOnLine") != m.end() && !m["CanBeDealOnLine"].empty()) {
      canBeDealOnLine = make_shared<bool>(boost::any_cast<bool>(m["CanBeDealOnLine"]));
    }
    if (m.find("CanCancelFault") != m.end() && !m["CanCancelFault"].empty()) {
      canCancelFault = make_shared<bool>(boost::any_cast<bool>(m["CanCancelFault"]));
    }
    if (m.find("ContainHwMode") != m.end() && !m["ContainHwMode"].empty()) {
      containHwMode = make_shared<bool>(boost::any_cast<bool>(m["ContainHwMode"]));
    }
    if (m.find("ContainerId") != m.end() && !m["ContainerId"].empty()) {
      containerId = make_shared<string>(boost::any_cast<string>(m["ContainerId"]));
    }
    if (m.find("ContainerImageId") != m.end() && !m["ContainerImageId"].empty()) {
      containerImageId = make_shared<string>(boost::any_cast<string>(m["ContainerImageId"]));
    }
    if (m.find("ContainerImageName") != m.end() && !m["ContainerImageName"].empty()) {
      containerImageName = make_shared<string>(boost::any_cast<string>(m["ContainerImageName"]));
    }
    if (m.find("DataSource") != m.end() && !m["DataSource"].empty()) {
      dataSource = make_shared<string>(boost::any_cast<string>(m["DataSource"]));
    }
    if (m.find("Desc") != m.end() && !m["Desc"].empty()) {
      desc = make_shared<string>(boost::any_cast<string>(m["Desc"]));
    }
    if (m.find("Details") != m.end() && !m["Details"].empty()) {
      if (typeid(vector<boost::any>) == m["Details"].type()) {
        vector<DescribeSuspEventsResponseBodySuspEventsDetails> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Details"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSuspEventsResponseBodySuspEventsDetails model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        details = make_shared<vector<DescribeSuspEventsResponseBodySuspEventsDetails>>(expect1);
      }
    }
    if (m.find("EventNotes") != m.end() && !m["EventNotes"].empty()) {
      if (typeid(vector<boost::any>) == m["EventNotes"].type()) {
        vector<DescribeSuspEventsResponseBodySuspEventsEventNotes> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["EventNotes"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSuspEventsResponseBodySuspEventsEventNotes model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        eventNotes = make_shared<vector<DescribeSuspEventsResponseBodySuspEventsEventNotes>>(expect1);
      }
    }
    if (m.find("EventStatus") != m.end() && !m["EventStatus"].empty()) {
      eventStatus = make_shared<long>(boost::any_cast<long>(m["EventStatus"]));
    }
    if (m.find("EventSubType") != m.end() && !m["EventSubType"].empty()) {
      eventSubType = make_shared<string>(boost::any_cast<string>(m["EventSubType"]));
    }
    if (m.find("HasTraceInfo") != m.end() && !m["HasTraceInfo"].empty()) {
      hasTraceInfo = make_shared<bool>(boost::any_cast<bool>(m["HasTraceInfo"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("K8sClusterId") != m.end() && !m["K8sClusterId"].empty()) {
      k8sClusterId = make_shared<string>(boost::any_cast<string>(m["K8sClusterId"]));
    }
    if (m.find("K8sClusterName") != m.end() && !m["K8sClusterName"].empty()) {
      k8sClusterName = make_shared<string>(boost::any_cast<string>(m["K8sClusterName"]));
    }
    if (m.find("K8sNamespace") != m.end() && !m["K8sNamespace"].empty()) {
      k8sNamespace = make_shared<string>(boost::any_cast<string>(m["K8sNamespace"]));
    }
    if (m.find("K8sNodeId") != m.end() && !m["K8sNodeId"].empty()) {
      k8sNodeId = make_shared<string>(boost::any_cast<string>(m["K8sNodeId"]));
    }
    if (m.find("K8sNodeName") != m.end() && !m["K8sNodeName"].empty()) {
      k8sNodeName = make_shared<string>(boost::any_cast<string>(m["K8sNodeName"]));
    }
    if (m.find("K8sPodName") != m.end() && !m["K8sPodName"].empty()) {
      k8sPodName = make_shared<string>(boost::any_cast<string>(m["K8sPodName"]));
    }
    if (m.find("LastTime") != m.end() && !m["LastTime"].empty()) {
      lastTime = make_shared<string>(boost::any_cast<string>(m["LastTime"]));
    }
    if (m.find("LastTimeStamp") != m.end() && !m["LastTimeStamp"].empty()) {
      lastTimeStamp = make_shared<long>(boost::any_cast<long>(m["LastTimeStamp"]));
    }
    if (m.find("Level") != m.end() && !m["Level"].empty()) {
      level = make_shared<string>(boost::any_cast<string>(m["Level"]));
    }
    if (m.find("MarkMisRules") != m.end() && !m["MarkMisRules"].empty()) {
      markMisRules = make_shared<string>(boost::any_cast<string>(m["MarkMisRules"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("OccurrenceTime") != m.end() && !m["OccurrenceTime"].empty()) {
      occurrenceTime = make_shared<string>(boost::any_cast<string>(m["OccurrenceTime"]));
    }
    if (m.find("OccurrenceTimeStamp") != m.end() && !m["OccurrenceTimeStamp"].empty()) {
      occurrenceTimeStamp = make_shared<long>(boost::any_cast<long>(m["OccurrenceTimeStamp"]));
    }
    if (m.find("OperateErrorCode") != m.end() && !m["OperateErrorCode"].empty()) {
      operateErrorCode = make_shared<string>(boost::any_cast<string>(m["OperateErrorCode"]));
    }
    if (m.find("OperateMsg") != m.end() && !m["OperateMsg"].empty()) {
      operateMsg = make_shared<string>(boost::any_cast<string>(m["OperateMsg"]));
    }
    if (m.find("OperateTime") != m.end() && !m["OperateTime"].empty()) {
      operateTime = make_shared<long>(boost::any_cast<long>(m["OperateTime"]));
    }
    if (m.find("SaleVersion") != m.end() && !m["SaleVersion"].empty()) {
      saleVersion = make_shared<string>(boost::any_cast<string>(m["SaleVersion"]));
    }
    if (m.find("SecurityEventIds") != m.end() && !m["SecurityEventIds"].empty()) {
      securityEventIds = make_shared<string>(boost::any_cast<string>(m["SecurityEventIds"]));
    }
    if (m.find("Stages") != m.end() && !m["Stages"].empty()) {
      stages = make_shared<string>(boost::any_cast<string>(m["Stages"]));
    }
    if (m.find("TacticItems") != m.end() && !m["TacticItems"].empty()) {
      if (typeid(vector<boost::any>) == m["TacticItems"].type()) {
        vector<DescribeSuspEventsResponseBodySuspEventsTacticItems> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["TacticItems"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSuspEventsResponseBodySuspEventsTacticItems model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        tacticItems = make_shared<vector<DescribeSuspEventsResponseBodySuspEventsTacticItems>>(expect1);
      }
    }
    if (m.find("UniqueInfo") != m.end() && !m["UniqueInfo"].empty()) {
      uniqueInfo = make_shared<string>(boost::any_cast<string>(m["UniqueInfo"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeSuspEventsResponseBodySuspEvents() = default;
};
class DescribeSuspEventsResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeSuspEventsResponseBodySuspEvents>> suspEvents{};
  shared_ptr<long> totalCount{};

  DescribeSuspEventsResponseBody() {}

  explicit DescribeSuspEventsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (suspEvents) {
      vector<boost::any> temp1;
      for(auto item1:*suspEvents){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["SuspEvents"] = boost::any(temp1);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("SuspEvents") != m.end() && !m["SuspEvents"].empty()) {
      if (typeid(vector<boost::any>) == m["SuspEvents"].type()) {
        vector<DescribeSuspEventsResponseBodySuspEvents> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["SuspEvents"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeSuspEventsResponseBodySuspEvents model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        suspEvents = make_shared<vector<DescribeSuspEventsResponseBodySuspEvents>>(expect1);
      }
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeSuspEventsResponseBody() = default;
};
class DescribeSuspEventsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSuspEventsResponseBody> body{};

  DescribeSuspEventsResponse() {}

  explicit DescribeSuspEventsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSuspEventsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSuspEventsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSuspEventsResponse() = default;
};
class DescribeSuspiciousUUIDConfigRequest : public Darabonba::Model {
public:
  shared_ptr<string> type{};

  DescribeSuspiciousUUIDConfigRequest() {}

  explicit DescribeSuspiciousUUIDConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribeSuspiciousUUIDConfigRequest() = default;
};
class DescribeSuspiciousUUIDConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<string> requestId{};
  shared_ptr<vector<string>> UUIDList{};

  DescribeSuspiciousUUIDConfigResponseBody() {}

  explicit DescribeSuspiciousUUIDConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (UUIDList) {
      res["UUIDList"] = boost::any(*UUIDList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("UUIDList") != m.end() && !m["UUIDList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["UUIDList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["UUIDList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      UUIDList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~DescribeSuspiciousUUIDConfigResponseBody() = default;
};
class DescribeSuspiciousUUIDConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeSuspiciousUUIDConfigResponseBody> body{};

  DescribeSuspiciousUUIDConfigResponse() {}

  explicit DescribeSuspiciousUUIDConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeSuspiciousUUIDConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeSuspiciousUUIDConfigResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeSuspiciousUUIDConfigResponse() = default;
};
class DescribeUserBackupMachinesResponseBodyMachines : public Darabonba::Model {
public:
  shared_ptr<long> id{};
  shared_ptr<string> policyName{};
  shared_ptr<string> uuid{};

  DescribeUserBackupMachinesResponseBodyMachines() {}

  explicit DescribeUserBackupMachinesResponseBodyMachines(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (policyName) {
      res["PolicyName"] = boost::any(*policyName);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("PolicyName") != m.end() && !m["PolicyName"].empty()) {
      policyName = make_shared<string>(boost::any_cast<string>(m["PolicyName"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeUserBackupMachinesResponseBodyMachines() = default;
};
class DescribeUserBackupMachinesResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeUserBackupMachinesResponseBodyMachines>> machines{};
  shared_ptr<string> requestId{};

  DescribeUserBackupMachinesResponseBody() {}

  explicit DescribeUserBackupMachinesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (machines) {
      vector<boost::any> temp1;
      for(auto item1:*machines){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Machines"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Machines") != m.end() && !m["Machines"].empty()) {
      if (typeid(vector<boost::any>) == m["Machines"].type()) {
        vector<DescribeUserBackupMachinesResponseBodyMachines> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Machines"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeUserBackupMachinesResponseBodyMachines model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        machines = make_shared<vector<DescribeUserBackupMachinesResponseBodyMachines>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeUserBackupMachinesResponseBody() = default;
};
class DescribeUserBackupMachinesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeUserBackupMachinesResponseBody> body{};

  DescribeUserBackupMachinesResponse() {}

  explicit DescribeUserBackupMachinesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeUserBackupMachinesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeUserBackupMachinesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeUserBackupMachinesResponse() = default;
};
class DescribeUserBaselineAuthorizationRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};

  DescribeUserBaselineAuthorizationRequest() {}

  explicit DescribeUserBaselineAuthorizationRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeUserBaselineAuthorizationRequest() = default;
};
class DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization : public Darabonba::Model {
public:
  shared_ptr<long> status{};

  DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization() {}

  explicit DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
  }


  virtual ~DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization() = default;
};
class DescribeUserBaselineAuthorizationResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization> userBaselineAuthorization{};

  DescribeUserBaselineAuthorizationResponseBody() {}

  explicit DescribeUserBaselineAuthorizationResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (userBaselineAuthorization) {
      res["UserBaselineAuthorization"] = userBaselineAuthorization ? boost::any(userBaselineAuthorization->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("UserBaselineAuthorization") != m.end() && !m["UserBaselineAuthorization"].empty()) {
      if (typeid(map<string, boost::any>) == m["UserBaselineAuthorization"].type()) {
        DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["UserBaselineAuthorization"]));
        userBaselineAuthorization = make_shared<DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization>(model1);
      }
    }
  }


  virtual ~DescribeUserBaselineAuthorizationResponseBody() = default;
};
class DescribeUserBaselineAuthorizationResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeUserBaselineAuthorizationResponseBody> body{};

  DescribeUserBaselineAuthorizationResponse() {}

  explicit DescribeUserBaselineAuthorizationResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeUserBaselineAuthorizationResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeUserBaselineAuthorizationResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeUserBaselineAuthorizationResponse() = default;
};
class DescribeUserLayoutAuthorizationRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};

  DescribeUserLayoutAuthorizationRequest() {}

  explicit DescribeUserLayoutAuthorizationRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeUserLayoutAuthorizationRequest() = default;
};
class DescribeUserLayoutAuthorizationResponseBody : public Darabonba::Model {
public:
  shared_ptr<bool> authorized{};
  shared_ptr<string> requestId{};

  DescribeUserLayoutAuthorizationResponseBody() {}

  explicit DescribeUserLayoutAuthorizationResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (authorized) {
      res["Authorized"] = boost::any(*authorized);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Authorized") != m.end() && !m["Authorized"].empty()) {
      authorized = make_shared<bool>(boost::any_cast<bool>(m["Authorized"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeUserLayoutAuthorizationResponseBody() = default;
};
class DescribeUserLayoutAuthorizationResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeUserLayoutAuthorizationResponseBody> body{};

  DescribeUserLayoutAuthorizationResponse() {}

  explicit DescribeUserLayoutAuthorizationResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeUserLayoutAuthorizationResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeUserLayoutAuthorizationResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeUserLayoutAuthorizationResponse() = default;
};
class DescribeVersionConfigRequest : public Darabonba::Model {
public:
  shared_ptr<string> resourceDirectoryAccountId{};
  shared_ptr<string> sourceIp{};

  DescribeVersionConfigRequest() {}

  explicit DescribeVersionConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (resourceDirectoryAccountId) {
      res["ResourceDirectoryAccountId"] = boost::any(*resourceDirectoryAccountId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ResourceDirectoryAccountId") != m.end() && !m["ResourceDirectoryAccountId"].empty()) {
      resourceDirectoryAccountId = make_shared<string>(boost::any_cast<string>(m["ResourceDirectoryAccountId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~DescribeVersionConfigRequest() = default;
};
class DescribeVersionConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> allowPartialBuy{};
  shared_ptr<long> appWhiteList{};
  shared_ptr<long> appWhiteListAuthCount{};
  shared_ptr<long> assetLevel{};
  shared_ptr<long> highestVersion{};
  shared_ptr<long> honeypotCapacity{};
  shared_ptr<long> imageScanCapacity{};
  shared_ptr<string> instanceId{};
  shared_ptr<bool> isOverBalance{};
  shared_ptr<long> isTrialVersion{};
  shared_ptr<long> lastTrailEndTime{};
  shared_ptr<long> MVAuthCount{};
  shared_ptr<long> MVUnusedAuthCount{};
  shared_ptr<long> releaseTime{};
  shared_ptr<string> requestId{};
  shared_ptr<long> sasLog{};
  shared_ptr<long> sasScreen{};
  shared_ptr<long> slsCapacity{};
  shared_ptr<long> userDefinedAlarms{};
  shared_ptr<long> version{};
  shared_ptr<long> vmCores{};
  shared_ptr<long> webLock{};
  shared_ptr<long> webLockAuthCount{};

  DescribeVersionConfigResponseBody() {}

  explicit DescribeVersionConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (allowPartialBuy) {
      res["AllowPartialBuy"] = boost::any(*allowPartialBuy);
    }
    if (appWhiteList) {
      res["AppWhiteList"] = boost::any(*appWhiteList);
    }
    if (appWhiteListAuthCount) {
      res["AppWhiteListAuthCount"] = boost::any(*appWhiteListAuthCount);
    }
    if (assetLevel) {
      res["AssetLevel"] = boost::any(*assetLevel);
    }
    if (highestVersion) {
      res["HighestVersion"] = boost::any(*highestVersion);
    }
    if (honeypotCapacity) {
      res["HoneypotCapacity"] = boost::any(*honeypotCapacity);
    }
    if (imageScanCapacity) {
      res["ImageScanCapacity"] = boost::any(*imageScanCapacity);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (isOverBalance) {
      res["IsOverBalance"] = boost::any(*isOverBalance);
    }
    if (isTrialVersion) {
      res["IsTrialVersion"] = boost::any(*isTrialVersion);
    }
    if (lastTrailEndTime) {
      res["LastTrailEndTime"] = boost::any(*lastTrailEndTime);
    }
    if (MVAuthCount) {
      res["MVAuthCount"] = boost::any(*MVAuthCount);
    }
    if (MVUnusedAuthCount) {
      res["MVUnusedAuthCount"] = boost::any(*MVUnusedAuthCount);
    }
    if (releaseTime) {
      res["ReleaseTime"] = boost::any(*releaseTime);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (sasLog) {
      res["SasLog"] = boost::any(*sasLog);
    }
    if (sasScreen) {
      res["SasScreen"] = boost::any(*sasScreen);
    }
    if (slsCapacity) {
      res["SlsCapacity"] = boost::any(*slsCapacity);
    }
    if (userDefinedAlarms) {
      res["UserDefinedAlarms"] = boost::any(*userDefinedAlarms);
    }
    if (version) {
      res["Version"] = boost::any(*version);
    }
    if (vmCores) {
      res["VmCores"] = boost::any(*vmCores);
    }
    if (webLock) {
      res["WebLock"] = boost::any(*webLock);
    }
    if (webLockAuthCount) {
      res["WebLockAuthCount"] = boost::any(*webLockAuthCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AllowPartialBuy") != m.end() && !m["AllowPartialBuy"].empty()) {
      allowPartialBuy = make_shared<long>(boost::any_cast<long>(m["AllowPartialBuy"]));
    }
    if (m.find("AppWhiteList") != m.end() && !m["AppWhiteList"].empty()) {
      appWhiteList = make_shared<long>(boost::any_cast<long>(m["AppWhiteList"]));
    }
    if (m.find("AppWhiteListAuthCount") != m.end() && !m["AppWhiteListAuthCount"].empty()) {
      appWhiteListAuthCount = make_shared<long>(boost::any_cast<long>(m["AppWhiteListAuthCount"]));
    }
    if (m.find("AssetLevel") != m.end() && !m["AssetLevel"].empty()) {
      assetLevel = make_shared<long>(boost::any_cast<long>(m["AssetLevel"]));
    }
    if (m.find("HighestVersion") != m.end() && !m["HighestVersion"].empty()) {
      highestVersion = make_shared<long>(boost::any_cast<long>(m["HighestVersion"]));
    }
    if (m.find("HoneypotCapacity") != m.end() && !m["HoneypotCapacity"].empty()) {
      honeypotCapacity = make_shared<long>(boost::any_cast<long>(m["HoneypotCapacity"]));
    }
    if (m.find("ImageScanCapacity") != m.end() && !m["ImageScanCapacity"].empty()) {
      imageScanCapacity = make_shared<long>(boost::any_cast<long>(m["ImageScanCapacity"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("IsOverBalance") != m.end() && !m["IsOverBalance"].empty()) {
      isOverBalance = make_shared<bool>(boost::any_cast<bool>(m["IsOverBalance"]));
    }
    if (m.find("IsTrialVersion") != m.end() && !m["IsTrialVersion"].empty()) {
      isTrialVersion = make_shared<long>(boost::any_cast<long>(m["IsTrialVersion"]));
    }
    if (m.find("LastTrailEndTime") != m.end() && !m["LastTrailEndTime"].empty()) {
      lastTrailEndTime = make_shared<long>(boost::any_cast<long>(m["LastTrailEndTime"]));
    }
    if (m.find("MVAuthCount") != m.end() && !m["MVAuthCount"].empty()) {
      MVAuthCount = make_shared<long>(boost::any_cast<long>(m["MVAuthCount"]));
    }
    if (m.find("MVUnusedAuthCount") != m.end() && !m["MVUnusedAuthCount"].empty()) {
      MVUnusedAuthCount = make_shared<long>(boost::any_cast<long>(m["MVUnusedAuthCount"]));
    }
    if (m.find("ReleaseTime") != m.end() && !m["ReleaseTime"].empty()) {
      releaseTime = make_shared<long>(boost::any_cast<long>(m["ReleaseTime"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("SasLog") != m.end() && !m["SasLog"].empty()) {
      sasLog = make_shared<long>(boost::any_cast<long>(m["SasLog"]));
    }
    if (m.find("SasScreen") != m.end() && !m["SasScreen"].empty()) {
      sasScreen = make_shared<long>(boost::any_cast<long>(m["SasScreen"]));
    }
    if (m.find("SlsCapacity") != m.end() && !m["SlsCapacity"].empty()) {
      slsCapacity = make_shared<long>(boost::any_cast<long>(m["SlsCapacity"]));
    }
    if (m.find("UserDefinedAlarms") != m.end() && !m["UserDefinedAlarms"].empty()) {
      userDefinedAlarms = make_shared<long>(boost::any_cast<long>(m["UserDefinedAlarms"]));
    }
    if (m.find("Version") != m.end() && !m["Version"].empty()) {
      version = make_shared<long>(boost::any_cast<long>(m["Version"]));
    }
    if (m.find("VmCores") != m.end() && !m["VmCores"].empty()) {
      vmCores = make_shared<long>(boost::any_cast<long>(m["VmCores"]));
    }
    if (m.find("WebLock") != m.end() && !m["WebLock"].empty()) {
      webLock = make_shared<long>(boost::any_cast<long>(m["WebLock"]));
    }
    if (m.find("WebLockAuthCount") != m.end() && !m["WebLockAuthCount"].empty()) {
      webLockAuthCount = make_shared<long>(boost::any_cast<long>(m["WebLockAuthCount"]));
    }
  }


  virtual ~DescribeVersionConfigResponseBody() = default;
};
class DescribeVersionConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeVersionConfigResponseBody> body{};

  DescribeVersionConfigResponse() {}

  explicit DescribeVersionConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeVersionConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeVersionConfigResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeVersionConfigResponse() = default;
};
class DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList : public Darabonba::Model {
public:
  shared_ptr<string> name{};
  shared_ptr<string> type{};
  shared_ptr<string> values{};

  DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList() {}

  explicit DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (values) {
      res["Values"] = boost::any(*values);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Values") != m.end() && !m["Values"].empty()) {
      values = make_shared<string>(boost::any_cast<string>(m["Values"]));
    }
  }


  virtual ~DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList() = default;
};
class DescribeVpcHoneyPotCriteriaResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList>> criteriaList{};
  shared_ptr<string> requestId{};

  DescribeVpcHoneyPotCriteriaResponseBody() {}

  explicit DescribeVpcHoneyPotCriteriaResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (criteriaList) {
      vector<boost::any> temp1;
      for(auto item1:*criteriaList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["CriteriaList"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CriteriaList") != m.end() && !m["CriteriaList"].empty()) {
      if (typeid(vector<boost::any>) == m["CriteriaList"].type()) {
        vector<DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["CriteriaList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        criteriaList = make_shared<vector<DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeVpcHoneyPotCriteriaResponseBody() = default;
};
class DescribeVpcHoneyPotCriteriaResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeVpcHoneyPotCriteriaResponseBody> body{};

  DescribeVpcHoneyPotCriteriaResponse() {}

  explicit DescribeVpcHoneyPotCriteriaResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeVpcHoneyPotCriteriaResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeVpcHoneyPotCriteriaResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeVpcHoneyPotCriteriaResponse() = default;
};
class DescribeVpcHoneyPotListRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<bool> honeyPotExistence{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> vpcId{};
  shared_ptr<string> vpcName{};
  shared_ptr<string> vpcRegionId{};

  DescribeVpcHoneyPotListRequest() {}

  explicit DescribeVpcHoneyPotListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (honeyPotExistence) {
      res["HoneyPotExistence"] = boost::any(*honeyPotExistence);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (vpcId) {
      res["VpcId"] = boost::any(*vpcId);
    }
    if (vpcName) {
      res["VpcName"] = boost::any(*vpcName);
    }
    if (vpcRegionId) {
      res["VpcRegionId"] = boost::any(*vpcRegionId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("HoneyPotExistence") != m.end() && !m["HoneyPotExistence"].empty()) {
      honeyPotExistence = make_shared<bool>(boost::any_cast<bool>(m["HoneyPotExistence"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("VpcId") != m.end() && !m["VpcId"].empty()) {
      vpcId = make_shared<string>(boost::any_cast<string>(m["VpcId"]));
    }
    if (m.find("VpcName") != m.end() && !m["VpcName"].empty()) {
      vpcName = make_shared<string>(boost::any_cast<string>(m["VpcName"]));
    }
    if (m.find("VpcRegionId") != m.end() && !m["VpcRegionId"].empty()) {
      vpcRegionId = make_shared<string>(boost::any_cast<string>(m["VpcRegionId"]));
    }
  }


  virtual ~DescribeVpcHoneyPotListRequest() = default;
};
class DescribeVpcHoneyPotListResponseBodyPageInfo : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  DescribeVpcHoneyPotListResponseBodyPageInfo() {}

  explicit DescribeVpcHoneyPotListResponseBodyPageInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeVpcHoneyPotListResponseBodyPageInfo() = default;
};
class DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList : public Darabonba::Model {
public:
  shared_ptr<string> vpcSwitchId{};
  shared_ptr<string> vpcSwitchName{};
  shared_ptr<string> zoneId{};

  DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList() {}

  explicit DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (vpcSwitchId) {
      res["VpcSwitchId"] = boost::any(*vpcSwitchId);
    }
    if (vpcSwitchName) {
      res["VpcSwitchName"] = boost::any(*vpcSwitchName);
    }
    if (zoneId) {
      res["ZoneId"] = boost::any(*zoneId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("VpcSwitchId") != m.end() && !m["VpcSwitchId"].empty()) {
      vpcSwitchId = make_shared<string>(boost::any_cast<string>(m["VpcSwitchId"]));
    }
    if (m.find("VpcSwitchName") != m.end() && !m["VpcSwitchName"].empty()) {
      vpcSwitchName = make_shared<string>(boost::any_cast<string>(m["VpcSwitchName"]));
    }
    if (m.find("ZoneId") != m.end() && !m["ZoneId"].empty()) {
      zoneId = make_shared<string>(boost::any_cast<string>(m["ZoneId"]));
    }
  }


  virtual ~DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList() = default;
};
class DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList : public Darabonba::Model {
public:
  shared_ptr<string> cidrBlock{};
  shared_ptr<long> createTime{};
  shared_ptr<string> honeyPotEcsInstanceStatus{};
  shared_ptr<string> honeyPotEniInstanceId{};
  shared_ptr<bool> honeyPotExistence{};
  shared_ptr<string> honeyPotInstanceStatus{};
  shared_ptr<string> honeyPotVpcSwitchId{};
  shared_ptr<string> vpcId{};
  shared_ptr<string> vpcName{};
  shared_ptr<string> vpcRegionId{};
  shared_ptr<string> vpcStatus{};
  shared_ptr<vector<DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList>> vpcSwitchIdList{};

  DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList() {}

  explicit DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (cidrBlock) {
      res["CidrBlock"] = boost::any(*cidrBlock);
    }
    if (createTime) {
      res["CreateTime"] = boost::any(*createTime);
    }
    if (honeyPotEcsInstanceStatus) {
      res["HoneyPotEcsInstanceStatus"] = boost::any(*honeyPotEcsInstanceStatus);
    }
    if (honeyPotEniInstanceId) {
      res["HoneyPotEniInstanceId"] = boost::any(*honeyPotEniInstanceId);
    }
    if (honeyPotExistence) {
      res["HoneyPotExistence"] = boost::any(*honeyPotExistence);
    }
    if (honeyPotInstanceStatus) {
      res["HoneyPotInstanceStatus"] = boost::any(*honeyPotInstanceStatus);
    }
    if (honeyPotVpcSwitchId) {
      res["HoneyPotVpcSwitchId"] = boost::any(*honeyPotVpcSwitchId);
    }
    if (vpcId) {
      res["VpcId"] = boost::any(*vpcId);
    }
    if (vpcName) {
      res["VpcName"] = boost::any(*vpcName);
    }
    if (vpcRegionId) {
      res["VpcRegionId"] = boost::any(*vpcRegionId);
    }
    if (vpcStatus) {
      res["VpcStatus"] = boost::any(*vpcStatus);
    }
    if (vpcSwitchIdList) {
      vector<boost::any> temp1;
      for(auto item1:*vpcSwitchIdList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["VpcSwitchIdList"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CidrBlock") != m.end() && !m["CidrBlock"].empty()) {
      cidrBlock = make_shared<string>(boost::any_cast<string>(m["CidrBlock"]));
    }
    if (m.find("CreateTime") != m.end() && !m["CreateTime"].empty()) {
      createTime = make_shared<long>(boost::any_cast<long>(m["CreateTime"]));
    }
    if (m.find("HoneyPotEcsInstanceStatus") != m.end() && !m["HoneyPotEcsInstanceStatus"].empty()) {
      honeyPotEcsInstanceStatus = make_shared<string>(boost::any_cast<string>(m["HoneyPotEcsInstanceStatus"]));
    }
    if (m.find("HoneyPotEniInstanceId") != m.end() && !m["HoneyPotEniInstanceId"].empty()) {
      honeyPotEniInstanceId = make_shared<string>(boost::any_cast<string>(m["HoneyPotEniInstanceId"]));
    }
    if (m.find("HoneyPotExistence") != m.end() && !m["HoneyPotExistence"].empty()) {
      honeyPotExistence = make_shared<bool>(boost::any_cast<bool>(m["HoneyPotExistence"]));
    }
    if (m.find("HoneyPotInstanceStatus") != m.end() && !m["HoneyPotInstanceStatus"].empty()) {
      honeyPotInstanceStatus = make_shared<string>(boost::any_cast<string>(m["HoneyPotInstanceStatus"]));
    }
    if (m.find("HoneyPotVpcSwitchId") != m.end() && !m["HoneyPotVpcSwitchId"].empty()) {
      honeyPotVpcSwitchId = make_shared<string>(boost::any_cast<string>(m["HoneyPotVpcSwitchId"]));
    }
    if (m.find("VpcId") != m.end() && !m["VpcId"].empty()) {
      vpcId = make_shared<string>(boost::any_cast<string>(m["VpcId"]));
    }
    if (m.find("VpcName") != m.end() && !m["VpcName"].empty()) {
      vpcName = make_shared<string>(boost::any_cast<string>(m["VpcName"]));
    }
    if (m.find("VpcRegionId") != m.end() && !m["VpcRegionId"].empty()) {
      vpcRegionId = make_shared<string>(boost::any_cast<string>(m["VpcRegionId"]));
    }
    if (m.find("VpcStatus") != m.end() && !m["VpcStatus"].empty()) {
      vpcStatus = make_shared<string>(boost::any_cast<string>(m["VpcStatus"]));
    }
    if (m.find("VpcSwitchIdList") != m.end() && !m["VpcSwitchIdList"].empty()) {
      if (typeid(vector<boost::any>) == m["VpcSwitchIdList"].type()) {
        vector<DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["VpcSwitchIdList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        vpcSwitchIdList = make_shared<vector<DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList>>(expect1);
      }
    }
  }


  virtual ~DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList() = default;
};
class DescribeVpcHoneyPotListResponseBody : public Darabonba::Model {
public:
  shared_ptr<DescribeVpcHoneyPotListResponseBodyPageInfo> pageInfo{};
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList>> vpcHoneyPotDTOList{};

  DescribeVpcHoneyPotListResponseBody() {}

  explicit DescribeVpcHoneyPotListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageInfo) {
      res["PageInfo"] = pageInfo ? boost::any(pageInfo->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (vpcHoneyPotDTOList) {
      vector<boost::any> temp1;
      for(auto item1:*vpcHoneyPotDTOList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["VpcHoneyPotDTOList"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageInfo") != m.end() && !m["PageInfo"].empty()) {
      if (typeid(map<string, boost::any>) == m["PageInfo"].type()) {
        DescribeVpcHoneyPotListResponseBodyPageInfo model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PageInfo"]));
        pageInfo = make_shared<DescribeVpcHoneyPotListResponseBodyPageInfo>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("VpcHoneyPotDTOList") != m.end() && !m["VpcHoneyPotDTOList"].empty()) {
      if (typeid(vector<boost::any>) == m["VpcHoneyPotDTOList"].type()) {
        vector<DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["VpcHoneyPotDTOList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        vpcHoneyPotDTOList = make_shared<vector<DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList>>(expect1);
      }
    }
  }


  virtual ~DescribeVpcHoneyPotListResponseBody() = default;
};
class DescribeVpcHoneyPotListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeVpcHoneyPotListResponseBody> body{};

  DescribeVpcHoneyPotListResponse() {}

  explicit DescribeVpcHoneyPotListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeVpcHoneyPotListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeVpcHoneyPotListResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeVpcHoneyPotListResponse() = default;
};
class DescribeVpcListResponseBodyVpcList : public Darabonba::Model {
public:
  shared_ptr<long> ecsCount{};
  shared_ptr<string> instanceDesc{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> regionId{};

  DescribeVpcListResponseBodyVpcList() {}

  explicit DescribeVpcListResponseBodyVpcList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ecsCount) {
      res["EcsCount"] = boost::any(*ecsCount);
    }
    if (instanceDesc) {
      res["InstanceDesc"] = boost::any(*instanceDesc);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("EcsCount") != m.end() && !m["EcsCount"].empty()) {
      ecsCount = make_shared<long>(boost::any_cast<long>(m["EcsCount"]));
    }
    if (m.find("InstanceDesc") != m.end() && !m["InstanceDesc"].empty()) {
      instanceDesc = make_shared<string>(boost::any_cast<string>(m["InstanceDesc"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
  }


  virtual ~DescribeVpcListResponseBodyVpcList() = default;
};
class DescribeVpcListResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<string> requestId{};
  shared_ptr<vector<DescribeVpcListResponseBodyVpcList>> vpcList{};

  DescribeVpcListResponseBody() {}

  explicit DescribeVpcListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (vpcList) {
      vector<boost::any> temp1;
      for(auto item1:*vpcList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["VpcList"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("VpcList") != m.end() && !m["VpcList"].empty()) {
      if (typeid(vector<boost::any>) == m["VpcList"].type()) {
        vector<DescribeVpcListResponseBodyVpcList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["VpcList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeVpcListResponseBodyVpcList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        vpcList = make_shared<vector<DescribeVpcListResponseBodyVpcList>>(expect1);
      }
    }
  }


  virtual ~DescribeVpcListResponseBody() = default;
};
class DescribeVpcListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeVpcListResponseBody> body{};

  DescribeVpcListResponse() {}

  explicit DescribeVpcListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeVpcListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeVpcListResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeVpcListResponse() = default;
};
class DescribeVulDetailsRequest : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<string> lang{};
  shared_ptr<string> name{};
  shared_ptr<string> type{};

  DescribeVulDetailsRequest() {}

  explicit DescribeVulDetailsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribeVulDetailsRequest() = default;
};
class DescribeVulDetailsResponseBodyCvesClassifys : public Darabonba::Model {
public:
  shared_ptr<string> classify{};
  shared_ptr<string> demoVideoUrl{};
  shared_ptr<string> description{};

  DescribeVulDetailsResponseBodyCvesClassifys() {}

  explicit DescribeVulDetailsResponseBodyCvesClassifys(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (classify) {
      res["Classify"] = boost::any(*classify);
    }
    if (demoVideoUrl) {
      res["DemoVideoUrl"] = boost::any(*demoVideoUrl);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Classify") != m.end() && !m["Classify"].empty()) {
      classify = make_shared<string>(boost::any_cast<string>(m["Classify"]));
    }
    if (m.find("DemoVideoUrl") != m.end() && !m["DemoVideoUrl"].empty()) {
      demoVideoUrl = make_shared<string>(boost::any_cast<string>(m["DemoVideoUrl"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
  }


  virtual ~DescribeVulDetailsResponseBodyCvesClassifys() = default;
};
class DescribeVulDetailsResponseBodyCves : public Darabonba::Model {
public:
  shared_ptr<string> classify{};
  shared_ptr<vector<DescribeVulDetailsResponseBodyCvesClassifys>> classifys{};
  shared_ptr<string> cnvdId{};
  shared_ptr<string> complexity{};
  shared_ptr<string> content{};
  shared_ptr<string> cveId{};
  shared_ptr<string> cvssScore{};
  shared_ptr<string> cvssVector{};
  shared_ptr<string> poc{};
  shared_ptr<long> pocCreateTime{};
  shared_ptr<long> pocDisclosureTime{};
  shared_ptr<string> product{};
  shared_ptr<string> reference{};
  shared_ptr<long> releaseTime{};
  shared_ptr<string> solution{};
  shared_ptr<string> summary{};
  shared_ptr<string> title{};
  shared_ptr<string> vendor{};
  shared_ptr<string> vulLevel{};

  DescribeVulDetailsResponseBodyCves() {}

  explicit DescribeVulDetailsResponseBodyCves(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (classify) {
      res["Classify"] = boost::any(*classify);
    }
    if (classifys) {
      vector<boost::any> temp1;
      for(auto item1:*classifys){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Classifys"] = boost::any(temp1);
    }
    if (cnvdId) {
      res["CnvdId"] = boost::any(*cnvdId);
    }
    if (complexity) {
      res["Complexity"] = boost::any(*complexity);
    }
    if (content) {
      res["Content"] = boost::any(*content);
    }
    if (cveId) {
      res["CveId"] = boost::any(*cveId);
    }
    if (cvssScore) {
      res["CvssScore"] = boost::any(*cvssScore);
    }
    if (cvssVector) {
      res["CvssVector"] = boost::any(*cvssVector);
    }
    if (poc) {
      res["Poc"] = boost::any(*poc);
    }
    if (pocCreateTime) {
      res["PocCreateTime"] = boost::any(*pocCreateTime);
    }
    if (pocDisclosureTime) {
      res["PocDisclosureTime"] = boost::any(*pocDisclosureTime);
    }
    if (product) {
      res["Product"] = boost::any(*product);
    }
    if (reference) {
      res["Reference"] = boost::any(*reference);
    }
    if (releaseTime) {
      res["ReleaseTime"] = boost::any(*releaseTime);
    }
    if (solution) {
      res["Solution"] = boost::any(*solution);
    }
    if (summary) {
      res["Summary"] = boost::any(*summary);
    }
    if (title) {
      res["Title"] = boost::any(*title);
    }
    if (vendor) {
      res["Vendor"] = boost::any(*vendor);
    }
    if (vulLevel) {
      res["VulLevel"] = boost::any(*vulLevel);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Classify") != m.end() && !m["Classify"].empty()) {
      classify = make_shared<string>(boost::any_cast<string>(m["Classify"]));
    }
    if (m.find("Classifys") != m.end() && !m["Classifys"].empty()) {
      if (typeid(vector<boost::any>) == m["Classifys"].type()) {
        vector<DescribeVulDetailsResponseBodyCvesClassifys> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Classifys"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeVulDetailsResponseBodyCvesClassifys model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        classifys = make_shared<vector<DescribeVulDetailsResponseBodyCvesClassifys>>(expect1);
      }
    }
    if (m.find("CnvdId") != m.end() && !m["CnvdId"].empty()) {
      cnvdId = make_shared<string>(boost::any_cast<string>(m["CnvdId"]));
    }
    if (m.find("Complexity") != m.end() && !m["Complexity"].empty()) {
      complexity = make_shared<string>(boost::any_cast<string>(m["Complexity"]));
    }
    if (m.find("Content") != m.end() && !m["Content"].empty()) {
      content = make_shared<string>(boost::any_cast<string>(m["Content"]));
    }
    if (m.find("CveId") != m.end() && !m["CveId"].empty()) {
      cveId = make_shared<string>(boost::any_cast<string>(m["CveId"]));
    }
    if (m.find("CvssScore") != m.end() && !m["CvssScore"].empty()) {
      cvssScore = make_shared<string>(boost::any_cast<string>(m["CvssScore"]));
    }
    if (m.find("CvssVector") != m.end() && !m["CvssVector"].empty()) {
      cvssVector = make_shared<string>(boost::any_cast<string>(m["CvssVector"]));
    }
    if (m.find("Poc") != m.end() && !m["Poc"].empty()) {
      poc = make_shared<string>(boost::any_cast<string>(m["Poc"]));
    }
    if (m.find("PocCreateTime") != m.end() && !m["PocCreateTime"].empty()) {
      pocCreateTime = make_shared<long>(boost::any_cast<long>(m["PocCreateTime"]));
    }
    if (m.find("PocDisclosureTime") != m.end() && !m["PocDisclosureTime"].empty()) {
      pocDisclosureTime = make_shared<long>(boost::any_cast<long>(m["PocDisclosureTime"]));
    }
    if (m.find("Product") != m.end() && !m["Product"].empty()) {
      product = make_shared<string>(boost::any_cast<string>(m["Product"]));
    }
    if (m.find("Reference") != m.end() && !m["Reference"].empty()) {
      reference = make_shared<string>(boost::any_cast<string>(m["Reference"]));
    }
    if (m.find("ReleaseTime") != m.end() && !m["ReleaseTime"].empty()) {
      releaseTime = make_shared<long>(boost::any_cast<long>(m["ReleaseTime"]));
    }
    if (m.find("Solution") != m.end() && !m["Solution"].empty()) {
      solution = make_shared<string>(boost::any_cast<string>(m["Solution"]));
    }
    if (m.find("Summary") != m.end() && !m["Summary"].empty()) {
      summary = make_shared<string>(boost::any_cast<string>(m["Summary"]));
    }
    if (m.find("Title") != m.end() && !m["Title"].empty()) {
      title = make_shared<string>(boost::any_cast<string>(m["Title"]));
    }
    if (m.find("Vendor") != m.end() && !m["Vendor"].empty()) {
      vendor = make_shared<string>(boost::any_cast<string>(m["Vendor"]));
    }
    if (m.find("VulLevel") != m.end() && !m["VulLevel"].empty()) {
      vulLevel = make_shared<string>(boost::any_cast<string>(m["VulLevel"]));
    }
  }


  virtual ~DescribeVulDetailsResponseBodyCves() = default;
};
class DescribeVulDetailsResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeVulDetailsResponseBodyCves>> cves{};
  shared_ptr<string> requestId{};

  DescribeVulDetailsResponseBody() {}

  explicit DescribeVulDetailsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (cves) {
      vector<boost::any> temp1;
      for(auto item1:*cves){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Cves"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Cves") != m.end() && !m["Cves"].empty()) {
      if (typeid(vector<boost::any>) == m["Cves"].type()) {
        vector<DescribeVulDetailsResponseBodyCves> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Cves"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeVulDetailsResponseBodyCves model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        cves = make_shared<vector<DescribeVulDetailsResponseBodyCves>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeVulDetailsResponseBody() = default;
};
class DescribeVulDetailsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeVulDetailsResponseBody> body{};

  DescribeVulDetailsResponse() {}

  explicit DescribeVulDetailsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeVulDetailsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeVulDetailsResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeVulDetailsResponse() = default;
};
class DescribeVulExportInfoRequest : public Darabonba::Model {
public:
  shared_ptr<long> exportId{};

  DescribeVulExportInfoRequest() {}

  explicit DescribeVulExportInfoRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (exportId) {
      res["ExportId"] = boost::any(*exportId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ExportId") != m.end() && !m["ExportId"].empty()) {
      exportId = make_shared<long>(boost::any_cast<long>(m["ExportId"]));
    }
  }


  virtual ~DescribeVulExportInfoRequest() = default;
};
class DescribeVulExportInfoResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> currentCount{};
  shared_ptr<string> exportStatus{};
  shared_ptr<string> fileName{};
  shared_ptr<long> id{};
  shared_ptr<string> link{};
  shared_ptr<string> message{};
  shared_ptr<long> progress{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};

  DescribeVulExportInfoResponseBody() {}

  explicit DescribeVulExportInfoResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentCount) {
      res["CurrentCount"] = boost::any(*currentCount);
    }
    if (exportStatus) {
      res["ExportStatus"] = boost::any(*exportStatus);
    }
    if (fileName) {
      res["FileName"] = boost::any(*fileName);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (link) {
      res["Link"] = boost::any(*link);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (progress) {
      res["Progress"] = boost::any(*progress);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentCount") != m.end() && !m["CurrentCount"].empty()) {
      currentCount = make_shared<long>(boost::any_cast<long>(m["CurrentCount"]));
    }
    if (m.find("ExportStatus") != m.end() && !m["ExportStatus"].empty()) {
      exportStatus = make_shared<string>(boost::any_cast<string>(m["ExportStatus"]));
    }
    if (m.find("FileName") != m.end() && !m["FileName"].empty()) {
      fileName = make_shared<string>(boost::any_cast<string>(m["FileName"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("Link") != m.end() && !m["Link"].empty()) {
      link = make_shared<string>(boost::any_cast<string>(m["Link"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("Progress") != m.end() && !m["Progress"].empty()) {
      progress = make_shared<long>(boost::any_cast<long>(m["Progress"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeVulExportInfoResponseBody() = default;
};
class DescribeVulExportInfoResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeVulExportInfoResponseBody> body{};

  DescribeVulExportInfoResponse() {}

  explicit DescribeVulExportInfoResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeVulExportInfoResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeVulExportInfoResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeVulExportInfoResponse() = default;
};
class DescribeVulListRequest : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<string> attachTypes{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> dealed{};
  shared_ptr<string> groupId{};
  shared_ptr<string> lang{};
  shared_ptr<string> necessity{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> remark{};
  shared_ptr<string> type{};
  shared_ptr<string> uuids{};
  shared_ptr<string> vpcInstanceIds{};

  DescribeVulListRequest() {}

  explicit DescribeVulListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (attachTypes) {
      res["AttachTypes"] = boost::any(*attachTypes);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (dealed) {
      res["Dealed"] = boost::any(*dealed);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (necessity) {
      res["Necessity"] = boost::any(*necessity);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (remark) {
      res["Remark"] = boost::any(*remark);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    if (vpcInstanceIds) {
      res["VpcInstanceIds"] = boost::any(*vpcInstanceIds);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("AttachTypes") != m.end() && !m["AttachTypes"].empty()) {
      attachTypes = make_shared<string>(boost::any_cast<string>(m["AttachTypes"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Dealed") != m.end() && !m["Dealed"].empty()) {
      dealed = make_shared<string>(boost::any_cast<string>(m["Dealed"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<string>(boost::any_cast<string>(m["GroupId"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("Necessity") != m.end() && !m["Necessity"].empty()) {
      necessity = make_shared<string>(boost::any_cast<string>(m["Necessity"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Remark") != m.end() && !m["Remark"].empty()) {
      remark = make_shared<string>(boost::any_cast<string>(m["Remark"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
    if (m.find("VpcInstanceIds") != m.end() && !m["VpcInstanceIds"].empty()) {
      vpcInstanceIds = make_shared<string>(boost::any_cast<string>(m["VpcInstanceIds"]));
    }
  }


  virtual ~DescribeVulListRequest() = default;
};
class DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity : public Darabonba::Model {
public:
  shared_ptr<string> assetsFactor{};
  shared_ptr<string> cvssFactor{};
  shared_ptr<string> enviromentFactor{};
  shared_ptr<string> isCalc{};
  shared_ptr<string> status{};
  shared_ptr<string> timeFactor{};
  shared_ptr<string> totalScore{};

  DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity() {}

  explicit DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (assetsFactor) {
      res["Assets_factor"] = boost::any(*assetsFactor);
    }
    if (cvssFactor) {
      res["Cvss_factor"] = boost::any(*cvssFactor);
    }
    if (enviromentFactor) {
      res["Enviroment_factor"] = boost::any(*enviromentFactor);
    }
    if (isCalc) {
      res["Is_calc"] = boost::any(*isCalc);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (timeFactor) {
      res["Time_factor"] = boost::any(*timeFactor);
    }
    if (totalScore) {
      res["Total_score"] = boost::any(*totalScore);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Assets_factor") != m.end() && !m["Assets_factor"].empty()) {
      assetsFactor = make_shared<string>(boost::any_cast<string>(m["Assets_factor"]));
    }
    if (m.find("Cvss_factor") != m.end() && !m["Cvss_factor"].empty()) {
      cvssFactor = make_shared<string>(boost::any_cast<string>(m["Cvss_factor"]));
    }
    if (m.find("Enviroment_factor") != m.end() && !m["Enviroment_factor"].empty()) {
      enviromentFactor = make_shared<string>(boost::any_cast<string>(m["Enviroment_factor"]));
    }
    if (m.find("Is_calc") != m.end() && !m["Is_calc"].empty()) {
      isCalc = make_shared<string>(boost::any_cast<string>(m["Is_calc"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("Time_factor") != m.end() && !m["Time_factor"].empty()) {
      timeFactor = make_shared<string>(boost::any_cast<string>(m["Time_factor"]));
    }
    if (m.find("Total_score") != m.end() && !m["Total_score"].empty()) {
      totalScore = make_shared<string>(boost::any_cast<string>(m["Total_score"]));
    }
  }


  virtual ~DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity() = default;
};
class DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList : public Darabonba::Model {
public:
  shared_ptr<string> containerName{};
  shared_ptr<string> fullVersion{};
  shared_ptr<string> imageName{};
  shared_ptr<string> matchDetail{};
  shared_ptr<string> matchList{};
  shared_ptr<string> name{};
  shared_ptr<string> path{};
  shared_ptr<string> pid{};
  shared_ptr<string> updateCmd{};
  shared_ptr<string> version{};

  DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList() {}

  explicit DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (containerName) {
      res["ContainerName"] = boost::any(*containerName);
    }
    if (fullVersion) {
      res["FullVersion"] = boost::any(*fullVersion);
    }
    if (imageName) {
      res["ImageName"] = boost::any(*imageName);
    }
    if (matchDetail) {
      res["MatchDetail"] = boost::any(*matchDetail);
    }
    if (matchList) {
      res["MatchList"] = boost::any(*matchList);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (path) {
      res["Path"] = boost::any(*path);
    }
    if (pid) {
      res["Pid"] = boost::any(*pid);
    }
    if (updateCmd) {
      res["UpdateCmd"] = boost::any(*updateCmd);
    }
    if (version) {
      res["Version"] = boost::any(*version);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ContainerName") != m.end() && !m["ContainerName"].empty()) {
      containerName = make_shared<string>(boost::any_cast<string>(m["ContainerName"]));
    }
    if (m.find("FullVersion") != m.end() && !m["FullVersion"].empty()) {
      fullVersion = make_shared<string>(boost::any_cast<string>(m["FullVersion"]));
    }
    if (m.find("ImageName") != m.end() && !m["ImageName"].empty()) {
      imageName = make_shared<string>(boost::any_cast<string>(m["ImageName"]));
    }
    if (m.find("MatchDetail") != m.end() && !m["MatchDetail"].empty()) {
      matchDetail = make_shared<string>(boost::any_cast<string>(m["MatchDetail"]));
    }
    if (m.find("MatchList") != m.end() && !m["MatchList"].empty()) {
      matchList = make_shared<string>(boost::any_cast<string>(m["MatchList"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Path") != m.end() && !m["Path"].empty()) {
      path = make_shared<string>(boost::any_cast<string>(m["Path"]));
    }
    if (m.find("Pid") != m.end() && !m["Pid"].empty()) {
      pid = make_shared<string>(boost::any_cast<string>(m["Pid"]));
    }
    if (m.find("UpdateCmd") != m.end() && !m["UpdateCmd"].empty()) {
      updateCmd = make_shared<string>(boost::any_cast<string>(m["UpdateCmd"]));
    }
    if (m.find("Version") != m.end() && !m["Version"].empty()) {
      version = make_shared<string>(boost::any_cast<string>(m["Version"]));
    }
  }


  virtual ~DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList() = default;
};
class DescribeVulListResponseBodyVulRecordsExtendContentJson : public Darabonba::Model {
public:
  shared_ptr<string> absolutePath{};
  shared_ptr<string> aliasName{};
  shared_ptr<string> description{};
  shared_ptr<string> ip{};
  shared_ptr<long> lastTs{};
  shared_ptr<DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity> necessity{};
  shared_ptr<string> os{};
  shared_ptr<string> osRelease{};
  shared_ptr<long> primaryId{};
  shared_ptr<vector<DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList>> rpmEntityList{};
  shared_ptr<string> status{};
  shared_ptr<string> tag{};
  shared_ptr<vector<string>> cveList{};

  DescribeVulListResponseBodyVulRecordsExtendContentJson() {}

  explicit DescribeVulListResponseBodyVulRecordsExtendContentJson(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (absolutePath) {
      res["AbsolutePath"] = boost::any(*absolutePath);
    }
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (ip) {
      res["Ip"] = boost::any(*ip);
    }
    if (lastTs) {
      res["LastTs"] = boost::any(*lastTs);
    }
    if (necessity) {
      res["Necessity"] = necessity ? boost::any(necessity->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (os) {
      res["Os"] = boost::any(*os);
    }
    if (osRelease) {
      res["OsRelease"] = boost::any(*osRelease);
    }
    if (primaryId) {
      res["PrimaryId"] = boost::any(*primaryId);
    }
    if (rpmEntityList) {
      vector<boost::any> temp1;
      for(auto item1:*rpmEntityList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["RpmEntityList"] = boost::any(temp1);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (tag) {
      res["Tag"] = boost::any(*tag);
    }
    if (cveList) {
      res["cveList"] = boost::any(*cveList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AbsolutePath") != m.end() && !m["AbsolutePath"].empty()) {
      absolutePath = make_shared<string>(boost::any_cast<string>(m["AbsolutePath"]));
    }
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("Ip") != m.end() && !m["Ip"].empty()) {
      ip = make_shared<string>(boost::any_cast<string>(m["Ip"]));
    }
    if (m.find("LastTs") != m.end() && !m["LastTs"].empty()) {
      lastTs = make_shared<long>(boost::any_cast<long>(m["LastTs"]));
    }
    if (m.find("Necessity") != m.end() && !m["Necessity"].empty()) {
      if (typeid(map<string, boost::any>) == m["Necessity"].type()) {
        DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Necessity"]));
        necessity = make_shared<DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity>(model1);
      }
    }
    if (m.find("Os") != m.end() && !m["Os"].empty()) {
      os = make_shared<string>(boost::any_cast<string>(m["Os"]));
    }
    if (m.find("OsRelease") != m.end() && !m["OsRelease"].empty()) {
      osRelease = make_shared<string>(boost::any_cast<string>(m["OsRelease"]));
    }
    if (m.find("PrimaryId") != m.end() && !m["PrimaryId"].empty()) {
      primaryId = make_shared<long>(boost::any_cast<long>(m["PrimaryId"]));
    }
    if (m.find("RpmEntityList") != m.end() && !m["RpmEntityList"].empty()) {
      if (typeid(vector<boost::any>) == m["RpmEntityList"].type()) {
        vector<DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["RpmEntityList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        rpmEntityList = make_shared<vector<DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList>>(expect1);
      }
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("Tag") != m.end() && !m["Tag"].empty()) {
      tag = make_shared<string>(boost::any_cast<string>(m["Tag"]));
    }
    if (m.find("cveList") != m.end() && !m["cveList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["cveList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["cveList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      cveList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~DescribeVulListResponseBodyVulRecordsExtendContentJson() = default;
};
class DescribeVulListResponseBodyVulRecords : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<DescribeVulListResponseBodyVulRecordsExtendContentJson> extendContentJson{};
  shared_ptr<long> firstTs{};
  shared_ptr<long> groupId{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<long> lastTs{};
  shared_ptr<long> modifyTs{};
  shared_ptr<string> name{};
  shared_ptr<string> necessity{};
  shared_ptr<bool> online{};
  shared_ptr<string> osVersion{};
  shared_ptr<long> primaryId{};
  shared_ptr<string> regionId{};
  shared_ptr<string> related{};
  shared_ptr<long> repairTs{};
  shared_ptr<string> resultCode{};
  shared_ptr<string> resultMessage{};
  shared_ptr<long> status{};
  shared_ptr<string> tag{};
  shared_ptr<string> type{};
  shared_ptr<string> uuid{};

  DescribeVulListResponseBodyVulRecords() {}

  explicit DescribeVulListResponseBodyVulRecords(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (extendContentJson) {
      res["ExtendContentJson"] = extendContentJson ? boost::any(extendContentJson->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (firstTs) {
      res["FirstTs"] = boost::any(*firstTs);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (lastTs) {
      res["LastTs"] = boost::any(*lastTs);
    }
    if (modifyTs) {
      res["ModifyTs"] = boost::any(*modifyTs);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (necessity) {
      res["Necessity"] = boost::any(*necessity);
    }
    if (online) {
      res["Online"] = boost::any(*online);
    }
    if (osVersion) {
      res["OsVersion"] = boost::any(*osVersion);
    }
    if (primaryId) {
      res["PrimaryId"] = boost::any(*primaryId);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    if (related) {
      res["Related"] = boost::any(*related);
    }
    if (repairTs) {
      res["RepairTs"] = boost::any(*repairTs);
    }
    if (resultCode) {
      res["ResultCode"] = boost::any(*resultCode);
    }
    if (resultMessage) {
      res["ResultMessage"] = boost::any(*resultMessage);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (tag) {
      res["Tag"] = boost::any(*tag);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("ExtendContentJson") != m.end() && !m["ExtendContentJson"].empty()) {
      if (typeid(map<string, boost::any>) == m["ExtendContentJson"].type()) {
        DescribeVulListResponseBodyVulRecordsExtendContentJson model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["ExtendContentJson"]));
        extendContentJson = make_shared<DescribeVulListResponseBodyVulRecordsExtendContentJson>(model1);
      }
    }
    if (m.find("FirstTs") != m.end() && !m["FirstTs"].empty()) {
      firstTs = make_shared<long>(boost::any_cast<long>(m["FirstTs"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("LastTs") != m.end() && !m["LastTs"].empty()) {
      lastTs = make_shared<long>(boost::any_cast<long>(m["LastTs"]));
    }
    if (m.find("ModifyTs") != m.end() && !m["ModifyTs"].empty()) {
      modifyTs = make_shared<long>(boost::any_cast<long>(m["ModifyTs"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Necessity") != m.end() && !m["Necessity"].empty()) {
      necessity = make_shared<string>(boost::any_cast<string>(m["Necessity"]));
    }
    if (m.find("Online") != m.end() && !m["Online"].empty()) {
      online = make_shared<bool>(boost::any_cast<bool>(m["Online"]));
    }
    if (m.find("OsVersion") != m.end() && !m["OsVersion"].empty()) {
      osVersion = make_shared<string>(boost::any_cast<string>(m["OsVersion"]));
    }
    if (m.find("PrimaryId") != m.end() && !m["PrimaryId"].empty()) {
      primaryId = make_shared<long>(boost::any_cast<long>(m["PrimaryId"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
    if (m.find("Related") != m.end() && !m["Related"].empty()) {
      related = make_shared<string>(boost::any_cast<string>(m["Related"]));
    }
    if (m.find("RepairTs") != m.end() && !m["RepairTs"].empty()) {
      repairTs = make_shared<long>(boost::any_cast<long>(m["RepairTs"]));
    }
    if (m.find("ResultCode") != m.end() && !m["ResultCode"].empty()) {
      resultCode = make_shared<string>(boost::any_cast<string>(m["ResultCode"]));
    }
    if (m.find("ResultMessage") != m.end() && !m["ResultMessage"].empty()) {
      resultMessage = make_shared<string>(boost::any_cast<string>(m["ResultMessage"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("Tag") != m.end() && !m["Tag"].empty()) {
      tag = make_shared<string>(boost::any_cast<string>(m["Tag"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeVulListResponseBodyVulRecords() = default;
};
class DescribeVulListResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};
  shared_ptr<vector<DescribeVulListResponseBodyVulRecords>> vulRecords{};

  DescribeVulListResponseBody() {}

  explicit DescribeVulListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    if (vulRecords) {
      vector<boost::any> temp1;
      for(auto item1:*vulRecords){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["VulRecords"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
    if (m.find("VulRecords") != m.end() && !m["VulRecords"].empty()) {
      if (typeid(vector<boost::any>) == m["VulRecords"].type()) {
        vector<DescribeVulListResponseBodyVulRecords> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["VulRecords"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeVulListResponseBodyVulRecords model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        vulRecords = make_shared<vector<DescribeVulListResponseBodyVulRecords>>(expect1);
      }
    }
  }


  virtual ~DescribeVulListResponseBody() = default;
};
class DescribeVulListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeVulListResponseBody> body{};

  DescribeVulListResponse() {}

  explicit DescribeVulListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeVulListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeVulListResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeVulListResponse() = default;
};
class DescribeVulWhitelistRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};

  DescribeVulWhitelistRequest() {}

  explicit DescribeVulWhitelistRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
  }


  virtual ~DescribeVulWhitelistRequest() = default;
};
class DescribeVulWhitelistResponseBodyVulWhitelists : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<string> id{};
  shared_ptr<string> name{};
  shared_ptr<string> reason{};
  shared_ptr<string> targetInfo{};
  shared_ptr<string> type{};

  DescribeVulWhitelistResponseBodyVulWhitelists() {}

  explicit DescribeVulWhitelistResponseBodyVulWhitelists(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (reason) {
      res["Reason"] = boost::any(*reason);
    }
    if (targetInfo) {
      res["TargetInfo"] = boost::any(*targetInfo);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<string>(boost::any_cast<string>(m["Id"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Reason") != m.end() && !m["Reason"].empty()) {
      reason = make_shared<string>(boost::any_cast<string>(m["Reason"]));
    }
    if (m.find("TargetInfo") != m.end() && !m["TargetInfo"].empty()) {
      targetInfo = make_shared<string>(boost::any_cast<string>(m["TargetInfo"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~DescribeVulWhitelistResponseBodyVulWhitelists() = default;
};
class DescribeVulWhitelistResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};
  shared_ptr<vector<DescribeVulWhitelistResponseBodyVulWhitelists>> vulWhitelists{};

  DescribeVulWhitelistResponseBody() {}

  explicit DescribeVulWhitelistResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    if (vulWhitelists) {
      vector<boost::any> temp1;
      for(auto item1:*vulWhitelists){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["VulWhitelists"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
    if (m.find("VulWhitelists") != m.end() && !m["VulWhitelists"].empty()) {
      if (typeid(vector<boost::any>) == m["VulWhitelists"].type()) {
        vector<DescribeVulWhitelistResponseBodyVulWhitelists> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["VulWhitelists"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeVulWhitelistResponseBodyVulWhitelists model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        vulWhitelists = make_shared<vector<DescribeVulWhitelistResponseBodyVulWhitelists>>(expect1);
      }
    }
  }


  virtual ~DescribeVulWhitelistResponseBody() = default;
};
class DescribeVulWhitelistResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeVulWhitelistResponseBody> body{};

  DescribeVulWhitelistResponse() {}

  explicit DescribeVulWhitelistResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeVulWhitelistResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeVulWhitelistResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeVulWhitelistResponse() = default;
};
class DescribeWarningMachinesRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> lang{};
  shared_ptr<string> machineName{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> riskId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<long> strategyId{};
  shared_ptr<string> uuids{};

  DescribeWarningMachinesRequest() {}

  explicit DescribeWarningMachinesRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (machineName) {
      res["MachineName"] = boost::any(*machineName);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (riskId) {
      res["RiskId"] = boost::any(*riskId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (strategyId) {
      res["StrategyId"] = boost::any(*strategyId);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("MachineName") != m.end() && !m["MachineName"].empty()) {
      machineName = make_shared<string>(boost::any_cast<string>(m["MachineName"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RiskId") != m.end() && !m["RiskId"].empty()) {
      riskId = make_shared<long>(boost::any_cast<long>(m["RiskId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("StrategyId") != m.end() && !m["StrategyId"].empty()) {
      strategyId = make_shared<long>(boost::any_cast<long>(m["StrategyId"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~DescribeWarningMachinesRequest() = default;
};
class DescribeWarningMachinesResponseBodyWarningMachines : public Darabonba::Model {
public:
  shared_ptr<long> highWarningCount{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<long> lowWarningCount{};
  shared_ptr<long> mediumWarningCount{};
  shared_ptr<long> passCount{};
  shared_ptr<bool> portOpen{};
  shared_ptr<string> regionId{};
  shared_ptr<long> status{};
  shared_ptr<string> uuid{};

  DescribeWarningMachinesResponseBodyWarningMachines() {}

  explicit DescribeWarningMachinesResponseBodyWarningMachines(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (highWarningCount) {
      res["HighWarningCount"] = boost::any(*highWarningCount);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (lowWarningCount) {
      res["LowWarningCount"] = boost::any(*lowWarningCount);
    }
    if (mediumWarningCount) {
      res["MediumWarningCount"] = boost::any(*mediumWarningCount);
    }
    if (passCount) {
      res["PassCount"] = boost::any(*passCount);
    }
    if (portOpen) {
      res["PortOpen"] = boost::any(*portOpen);
    }
    if (regionId) {
      res["RegionId"] = boost::any(*regionId);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("HighWarningCount") != m.end() && !m["HighWarningCount"].empty()) {
      highWarningCount = make_shared<long>(boost::any_cast<long>(m["HighWarningCount"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("LowWarningCount") != m.end() && !m["LowWarningCount"].empty()) {
      lowWarningCount = make_shared<long>(boost::any_cast<long>(m["LowWarningCount"]));
    }
    if (m.find("MediumWarningCount") != m.end() && !m["MediumWarningCount"].empty()) {
      mediumWarningCount = make_shared<long>(boost::any_cast<long>(m["MediumWarningCount"]));
    }
    if (m.find("PassCount") != m.end() && !m["PassCount"].empty()) {
      passCount = make_shared<long>(boost::any_cast<long>(m["PassCount"]));
    }
    if (m.find("PortOpen") != m.end() && !m["PortOpen"].empty()) {
      portOpen = make_shared<bool>(boost::any_cast<bool>(m["PortOpen"]));
    }
    if (m.find("RegionId") != m.end() && !m["RegionId"].empty()) {
      regionId = make_shared<string>(boost::any_cast<string>(m["RegionId"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeWarningMachinesResponseBodyWarningMachines() = default;
};
class DescribeWarningMachinesResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};
  shared_ptr<vector<DescribeWarningMachinesResponseBodyWarningMachines>> warningMachines{};

  DescribeWarningMachinesResponseBody() {}

  explicit DescribeWarningMachinesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    if (warningMachines) {
      vector<boost::any> temp1;
      for(auto item1:*warningMachines){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["WarningMachines"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
    if (m.find("WarningMachines") != m.end() && !m["WarningMachines"].empty()) {
      if (typeid(vector<boost::any>) == m["WarningMachines"].type()) {
        vector<DescribeWarningMachinesResponseBodyWarningMachines> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["WarningMachines"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeWarningMachinesResponseBodyWarningMachines model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        warningMachines = make_shared<vector<DescribeWarningMachinesResponseBodyWarningMachines>>(expect1);
      }
    }
  }


  virtual ~DescribeWarningMachinesResponseBody() = default;
};
class DescribeWarningMachinesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeWarningMachinesResponseBody> body{};

  DescribeWarningMachinesResponse() {}

  explicit DescribeWarningMachinesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeWarningMachinesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeWarningMachinesResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeWarningMachinesResponse() = default;
};
class DescribeWebLockBindListRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> lang{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> remark{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> status{};

  DescribeWebLockBindListRequest() {}

  explicit DescribeWebLockBindListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (remark) {
      res["Remark"] = boost::any(*remark);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Remark") != m.end() && !m["Remark"].empty()) {
      remark = make_shared<string>(boost::any_cast<string>(m["Remark"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
  }


  virtual ~DescribeWebLockBindListRequest() = default;
};
class DescribeWebLockBindListResponseBodyBindList : public Darabonba::Model {
public:
  shared_ptr<string> auditCount{};
  shared_ptr<string> blockCount{};
  shared_ptr<string> dirCount{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> internetIp{};
  shared_ptr<string> intranetIp{};
  shared_ptr<string> os{};
  shared_ptr<long> percent{};
  shared_ptr<string> serviceCode{};
  shared_ptr<string> serviceDetail{};
  shared_ptr<string> serviceStatus{};
  shared_ptr<string> status{};
  shared_ptr<string> uuid{};

  DescribeWebLockBindListResponseBodyBindList() {}

  explicit DescribeWebLockBindListResponseBodyBindList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (auditCount) {
      res["AuditCount"] = boost::any(*auditCount);
    }
    if (blockCount) {
      res["BlockCount"] = boost::any(*blockCount);
    }
    if (dirCount) {
      res["DirCount"] = boost::any(*dirCount);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (internetIp) {
      res["InternetIp"] = boost::any(*internetIp);
    }
    if (intranetIp) {
      res["IntranetIp"] = boost::any(*intranetIp);
    }
    if (os) {
      res["Os"] = boost::any(*os);
    }
    if (percent) {
      res["Percent"] = boost::any(*percent);
    }
    if (serviceCode) {
      res["ServiceCode"] = boost::any(*serviceCode);
    }
    if (serviceDetail) {
      res["ServiceDetail"] = boost::any(*serviceDetail);
    }
    if (serviceStatus) {
      res["ServiceStatus"] = boost::any(*serviceStatus);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AuditCount") != m.end() && !m["AuditCount"].empty()) {
      auditCount = make_shared<string>(boost::any_cast<string>(m["AuditCount"]));
    }
    if (m.find("BlockCount") != m.end() && !m["BlockCount"].empty()) {
      blockCount = make_shared<string>(boost::any_cast<string>(m["BlockCount"]));
    }
    if (m.find("DirCount") != m.end() && !m["DirCount"].empty()) {
      dirCount = make_shared<string>(boost::any_cast<string>(m["DirCount"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("InternetIp") != m.end() && !m["InternetIp"].empty()) {
      internetIp = make_shared<string>(boost::any_cast<string>(m["InternetIp"]));
    }
    if (m.find("IntranetIp") != m.end() && !m["IntranetIp"].empty()) {
      intranetIp = make_shared<string>(boost::any_cast<string>(m["IntranetIp"]));
    }
    if (m.find("Os") != m.end() && !m["Os"].empty()) {
      os = make_shared<string>(boost::any_cast<string>(m["Os"]));
    }
    if (m.find("Percent") != m.end() && !m["Percent"].empty()) {
      percent = make_shared<long>(boost::any_cast<long>(m["Percent"]));
    }
    if (m.find("ServiceCode") != m.end() && !m["ServiceCode"].empty()) {
      serviceCode = make_shared<string>(boost::any_cast<string>(m["ServiceCode"]));
    }
    if (m.find("ServiceDetail") != m.end() && !m["ServiceDetail"].empty()) {
      serviceDetail = make_shared<string>(boost::any_cast<string>(m["ServiceDetail"]));
    }
    if (m.find("ServiceStatus") != m.end() && !m["ServiceStatus"].empty()) {
      serviceStatus = make_shared<string>(boost::any_cast<string>(m["ServiceStatus"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeWebLockBindListResponseBodyBindList() = default;
};
class DescribeWebLockBindListResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeWebLockBindListResponseBodyBindList>> bindList{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};

  DescribeWebLockBindListResponseBody() {}

  explicit DescribeWebLockBindListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (bindList) {
      vector<boost::any> temp1;
      for(auto item1:*bindList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["BindList"] = boost::any(temp1);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BindList") != m.end() && !m["BindList"].empty()) {
      if (typeid(vector<boost::any>) == m["BindList"].type()) {
        vector<DescribeWebLockBindListResponseBodyBindList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["BindList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeWebLockBindListResponseBodyBindList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        bindList = make_shared<vector<DescribeWebLockBindListResponseBodyBindList>>(expect1);
      }
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeWebLockBindListResponseBody() = default;
};
class DescribeWebLockBindListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeWebLockBindListResponseBody> body{};

  DescribeWebLockBindListResponse() {}

  explicit DescribeWebLockBindListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeWebLockBindListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeWebLockBindListResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeWebLockBindListResponse() = default;
};
class DescribeWebLockConfigListRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> uuid{};

  DescribeWebLockConfigListRequest() {}

  explicit DescribeWebLockConfigListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeWebLockConfigListRequest() = default;
};
class DescribeWebLockConfigListResponseBodyConfigList : public Darabonba::Model {
public:
  shared_ptr<string> defenceMode{};
  shared_ptr<string> dir{};
  shared_ptr<string> exclusiveDir{};
  shared_ptr<string> exclusiveFile{};
  shared_ptr<string> exclusiveFileType{};
  shared_ptr<string> id{};
  shared_ptr<string> inclusiveFile{};
  shared_ptr<string> inclusiveFileType{};
  shared_ptr<string> localBackupDir{};
  shared_ptr<string> mode{};
  shared_ptr<string> uuid{};

  DescribeWebLockConfigListResponseBodyConfigList() {}

  explicit DescribeWebLockConfigListResponseBodyConfigList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (defenceMode) {
      res["DefenceMode"] = boost::any(*defenceMode);
    }
    if (dir) {
      res["Dir"] = boost::any(*dir);
    }
    if (exclusiveDir) {
      res["ExclusiveDir"] = boost::any(*exclusiveDir);
    }
    if (exclusiveFile) {
      res["ExclusiveFile"] = boost::any(*exclusiveFile);
    }
    if (exclusiveFileType) {
      res["ExclusiveFileType"] = boost::any(*exclusiveFileType);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (inclusiveFile) {
      res["InclusiveFile"] = boost::any(*inclusiveFile);
    }
    if (inclusiveFileType) {
      res["InclusiveFileType"] = boost::any(*inclusiveFileType);
    }
    if (localBackupDir) {
      res["LocalBackupDir"] = boost::any(*localBackupDir);
    }
    if (mode) {
      res["Mode"] = boost::any(*mode);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DefenceMode") != m.end() && !m["DefenceMode"].empty()) {
      defenceMode = make_shared<string>(boost::any_cast<string>(m["DefenceMode"]));
    }
    if (m.find("Dir") != m.end() && !m["Dir"].empty()) {
      dir = make_shared<string>(boost::any_cast<string>(m["Dir"]));
    }
    if (m.find("ExclusiveDir") != m.end() && !m["ExclusiveDir"].empty()) {
      exclusiveDir = make_shared<string>(boost::any_cast<string>(m["ExclusiveDir"]));
    }
    if (m.find("ExclusiveFile") != m.end() && !m["ExclusiveFile"].empty()) {
      exclusiveFile = make_shared<string>(boost::any_cast<string>(m["ExclusiveFile"]));
    }
    if (m.find("ExclusiveFileType") != m.end() && !m["ExclusiveFileType"].empty()) {
      exclusiveFileType = make_shared<string>(boost::any_cast<string>(m["ExclusiveFileType"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<string>(boost::any_cast<string>(m["Id"]));
    }
    if (m.find("InclusiveFile") != m.end() && !m["InclusiveFile"].empty()) {
      inclusiveFile = make_shared<string>(boost::any_cast<string>(m["InclusiveFile"]));
    }
    if (m.find("InclusiveFileType") != m.end() && !m["InclusiveFileType"].empty()) {
      inclusiveFileType = make_shared<string>(boost::any_cast<string>(m["InclusiveFileType"]));
    }
    if (m.find("LocalBackupDir") != m.end() && !m["LocalBackupDir"].empty()) {
      localBackupDir = make_shared<string>(boost::any_cast<string>(m["LocalBackupDir"]));
    }
    if (m.find("Mode") != m.end() && !m["Mode"].empty()) {
      mode = make_shared<string>(boost::any_cast<string>(m["Mode"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~DescribeWebLockConfigListResponseBodyConfigList() = default;
};
class DescribeWebLockConfigListResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<DescribeWebLockConfigListResponseBodyConfigList>> configList{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalCount{};

  DescribeWebLockConfigListResponseBody() {}

  explicit DescribeWebLockConfigListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (configList) {
      vector<boost::any> temp1;
      for(auto item1:*configList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["ConfigList"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ConfigList") != m.end() && !m["ConfigList"].empty()) {
      if (typeid(vector<boost::any>) == m["ConfigList"].type()) {
        vector<DescribeWebLockConfigListResponseBodyConfigList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["ConfigList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            DescribeWebLockConfigListResponseBodyConfigList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        configList = make_shared<vector<DescribeWebLockConfigListResponseBodyConfigList>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~DescribeWebLockConfigListResponseBody() = default;
};
class DescribeWebLockConfigListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<DescribeWebLockConfigListResponseBody> body{};

  DescribeWebLockConfigListResponse() {}

  explicit DescribeWebLockConfigListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeWebLockConfigListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeWebLockConfigListResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeWebLockConfigListResponse() = default;
};
class ExportRecordRequest : public Darabonba::Model {
public:
  shared_ptr<string> exportType{};
  shared_ptr<string> lang{};
  shared_ptr<string> params{};

  ExportRecordRequest() {}

  explicit ExportRecordRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (exportType) {
      res["ExportType"] = boost::any(*exportType);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (params) {
      res["Params"] = boost::any(*params);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ExportType") != m.end() && !m["ExportType"].empty()) {
      exportType = make_shared<string>(boost::any_cast<string>(m["ExportType"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("Params") != m.end() && !m["Params"].empty()) {
      params = make_shared<string>(boost::any_cast<string>(m["Params"]));
    }
  }


  virtual ~ExportRecordRequest() = default;
};
class ExportRecordResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> fileName{};
  shared_ptr<long> id{};
  shared_ptr<string> requestId{};

  ExportRecordResponseBody() {}

  explicit ExportRecordResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (fileName) {
      res["FileName"] = boost::any(*fileName);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("FileName") != m.end() && !m["FileName"].empty()) {
      fileName = make_shared<string>(boost::any_cast<string>(m["FileName"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ExportRecordResponseBody() = default;
};
class ExportRecordResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ExportRecordResponseBody> body{};

  ExportRecordResponse() {}

  explicit ExportRecordResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ExportRecordResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ExportRecordResponseBody>(model1);
      }
    }
  }


  virtual ~ExportRecordResponse() = default;
};
class ExportVulRequest : public Darabonba::Model {
public:
  shared_ptr<string> aliasName{};
  shared_ptr<string> attachTypes{};
  shared_ptr<string> dealed{};
  shared_ptr<string> groupId{};
  shared_ptr<string> lang{};
  shared_ptr<string> necessity{};
  shared_ptr<string> searchTags{};
  shared_ptr<string> type{};
  shared_ptr<string> uuids{};
  shared_ptr<string> vpcInstanceIds{};

  ExportVulRequest() {}

  explicit ExportVulRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aliasName) {
      res["AliasName"] = boost::any(*aliasName);
    }
    if (attachTypes) {
      res["AttachTypes"] = boost::any(*attachTypes);
    }
    if (dealed) {
      res["Dealed"] = boost::any(*dealed);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (necessity) {
      res["Necessity"] = boost::any(*necessity);
    }
    if (searchTags) {
      res["SearchTags"] = boost::any(*searchTags);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    if (vpcInstanceIds) {
      res["VpcInstanceIds"] = boost::any(*vpcInstanceIds);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AliasName") != m.end() && !m["AliasName"].empty()) {
      aliasName = make_shared<string>(boost::any_cast<string>(m["AliasName"]));
    }
    if (m.find("AttachTypes") != m.end() && !m["AttachTypes"].empty()) {
      attachTypes = make_shared<string>(boost::any_cast<string>(m["AttachTypes"]));
    }
    if (m.find("Dealed") != m.end() && !m["Dealed"].empty()) {
      dealed = make_shared<string>(boost::any_cast<string>(m["Dealed"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<string>(boost::any_cast<string>(m["GroupId"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("Necessity") != m.end() && !m["Necessity"].empty()) {
      necessity = make_shared<string>(boost::any_cast<string>(m["Necessity"]));
    }
    if (m.find("SearchTags") != m.end() && !m["SearchTags"].empty()) {
      searchTags = make_shared<string>(boost::any_cast<string>(m["SearchTags"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
    if (m.find("VpcInstanceIds") != m.end() && !m["VpcInstanceIds"].empty()) {
      vpcInstanceIds = make_shared<string>(boost::any_cast<string>(m["VpcInstanceIds"]));
    }
  }


  virtual ~ExportVulRequest() = default;
};
class ExportVulResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> fileName{};
  shared_ptr<long> id{};
  shared_ptr<string> requestId{};

  ExportVulResponseBody() {}

  explicit ExportVulResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (fileName) {
      res["FileName"] = boost::any(*fileName);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("FileName") != m.end() && !m["FileName"].empty()) {
      fileName = make_shared<string>(boost::any_cast<string>(m["FileName"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ExportVulResponseBody() = default;
};
class ExportVulResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ExportVulResponseBody> body{};

  ExportVulResponse() {}

  explicit ExportVulResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ExportVulResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ExportVulResponseBody>(model1);
      }
    }
  }


  virtual ~ExportVulResponse() = default;
};
class FixCheckWarningsRequest : public Darabonba::Model {
public:
  shared_ptr<string> checkParams{};
  shared_ptr<string> lang{};
  shared_ptr<long> riskId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> uuids{};

  FixCheckWarningsRequest() {}

  explicit FixCheckWarningsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (checkParams) {
      res["CheckParams"] = boost::any(*checkParams);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (riskId) {
      res["RiskId"] = boost::any(*riskId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CheckParams") != m.end() && !m["CheckParams"].empty()) {
      checkParams = make_shared<string>(boost::any_cast<string>(m["CheckParams"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("RiskId") != m.end() && !m["RiskId"].empty()) {
      riskId = make_shared<long>(boost::any_cast<long>(m["RiskId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~FixCheckWarningsRequest() = default;
};
class FixCheckWarningsResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> batchId{};
  shared_ptr<string> requestId{};

  FixCheckWarningsResponseBody() {}

  explicit FixCheckWarningsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (batchId) {
      res["BatchId"] = boost::any(*batchId);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BatchId") != m.end() && !m["BatchId"].empty()) {
      batchId = make_shared<long>(boost::any_cast<long>(m["BatchId"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~FixCheckWarningsResponseBody() = default;
};
class FixCheckWarningsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<FixCheckWarningsResponseBody> body{};

  FixCheckWarningsResponse() {}

  explicit FixCheckWarningsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        FixCheckWarningsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<FixCheckWarningsResponseBody>(model1);
      }
    }
  }


  virtual ~FixCheckWarningsResponse() = default;
};
class GetBackupStorageCountResponseBodyBackupStorageCount : public Darabonba::Model {
public:
  shared_ptr<long> buyStorageByte{};
  shared_ptr<long> ecsUsageStorageByte{};
  shared_ptr<long> overflow{};
  shared_ptr<long> uniUsageStorageByte{};
  shared_ptr<long> usageStorageByte{};

  GetBackupStorageCountResponseBodyBackupStorageCount() {}

  explicit GetBackupStorageCountResponseBodyBackupStorageCount(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (buyStorageByte) {
      res["BuyStorageByte"] = boost::any(*buyStorageByte);
    }
    if (ecsUsageStorageByte) {
      res["EcsUsageStorageByte"] = boost::any(*ecsUsageStorageByte);
    }
    if (overflow) {
      res["Overflow"] = boost::any(*overflow);
    }
    if (uniUsageStorageByte) {
      res["UniUsageStorageByte"] = boost::any(*uniUsageStorageByte);
    }
    if (usageStorageByte) {
      res["UsageStorageByte"] = boost::any(*usageStorageByte);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BuyStorageByte") != m.end() && !m["BuyStorageByte"].empty()) {
      buyStorageByte = make_shared<long>(boost::any_cast<long>(m["BuyStorageByte"]));
    }
    if (m.find("EcsUsageStorageByte") != m.end() && !m["EcsUsageStorageByte"].empty()) {
      ecsUsageStorageByte = make_shared<long>(boost::any_cast<long>(m["EcsUsageStorageByte"]));
    }
    if (m.find("Overflow") != m.end() && !m["Overflow"].empty()) {
      overflow = make_shared<long>(boost::any_cast<long>(m["Overflow"]));
    }
    if (m.find("UniUsageStorageByte") != m.end() && !m["UniUsageStorageByte"].empty()) {
      uniUsageStorageByte = make_shared<long>(boost::any_cast<long>(m["UniUsageStorageByte"]));
    }
    if (m.find("UsageStorageByte") != m.end() && !m["UsageStorageByte"].empty()) {
      usageStorageByte = make_shared<long>(boost::any_cast<long>(m["UsageStorageByte"]));
    }
  }


  virtual ~GetBackupStorageCountResponseBodyBackupStorageCount() = default;
};
class GetBackupStorageCountResponseBody : public Darabonba::Model {
public:
  shared_ptr<GetBackupStorageCountResponseBodyBackupStorageCount> backupStorageCount{};
  shared_ptr<string> requestId{};

  GetBackupStorageCountResponseBody() {}

  explicit GetBackupStorageCountResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (backupStorageCount) {
      res["BackupStorageCount"] = backupStorageCount ? boost::any(backupStorageCount->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BackupStorageCount") != m.end() && !m["BackupStorageCount"].empty()) {
      if (typeid(map<string, boost::any>) == m["BackupStorageCount"].type()) {
        GetBackupStorageCountResponseBodyBackupStorageCount model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["BackupStorageCount"]));
        backupStorageCount = make_shared<GetBackupStorageCountResponseBodyBackupStorageCount>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~GetBackupStorageCountResponseBody() = default;
};
class GetBackupStorageCountResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<GetBackupStorageCountResponseBody> body{};

  GetBackupStorageCountResponse() {}

  explicit GetBackupStorageCountResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetBackupStorageCountResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetBackupStorageCountResponseBody>(model1);
      }
    }
  }


  virtual ~GetBackupStorageCountResponse() = default;
};
class GetSuspiciousStatisticsRequest : public Darabonba::Model {
public:
  shared_ptr<string> groupIdList{};
  shared_ptr<string> sourceIp{};

  GetSuspiciousStatisticsRequest() {}

  explicit GetSuspiciousStatisticsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupIdList) {
      res["GroupIdList"] = boost::any(*groupIdList);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupIdList") != m.end() && !m["GroupIdList"].empty()) {
      groupIdList = make_shared<string>(boost::any_cast<string>(m["GroupIdList"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~GetSuspiciousStatisticsRequest() = default;
};
class GetSuspiciousStatisticsResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> remindCount{};
  shared_ptr<string> requestId{};
  shared_ptr<long> seriousCount{};
  shared_ptr<long> suspiciousCount{};
  shared_ptr<long> totalCount{};

  GetSuspiciousStatisticsResponseBody() {}

  explicit GetSuspiciousStatisticsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (remindCount) {
      res["RemindCount"] = boost::any(*remindCount);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (seriousCount) {
      res["SeriousCount"] = boost::any(*seriousCount);
    }
    if (suspiciousCount) {
      res["SuspiciousCount"] = boost::any(*suspiciousCount);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RemindCount") != m.end() && !m["RemindCount"].empty()) {
      remindCount = make_shared<long>(boost::any_cast<long>(m["RemindCount"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("SeriousCount") != m.end() && !m["SeriousCount"].empty()) {
      seriousCount = make_shared<long>(boost::any_cast<long>(m["SeriousCount"]));
    }
    if (m.find("SuspiciousCount") != m.end() && !m["SuspiciousCount"].empty()) {
      suspiciousCount = make_shared<long>(boost::any_cast<long>(m["SuspiciousCount"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~GetSuspiciousStatisticsResponseBody() = default;
};
class GetSuspiciousStatisticsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<GetSuspiciousStatisticsResponseBody> body{};

  GetSuspiciousStatisticsResponse() {}

  explicit GetSuspiciousStatisticsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetSuspiciousStatisticsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetSuspiciousStatisticsResponseBody>(model1);
      }
    }
  }


  virtual ~GetSuspiciousStatisticsResponse() = default;
};
class GetVulStatisticsRequest : public Darabonba::Model {
public:
  shared_ptr<string> groupIdList{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> typeList{};

  GetVulStatisticsRequest() {}

  explicit GetVulStatisticsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupIdList) {
      res["GroupIdList"] = boost::any(*groupIdList);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (typeList) {
      res["TypeList"] = boost::any(*typeList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupIdList") != m.end() && !m["GroupIdList"].empty()) {
      groupIdList = make_shared<string>(boost::any_cast<string>(m["GroupIdList"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("TypeList") != m.end() && !m["TypeList"].empty()) {
      typeList = make_shared<string>(boost::any_cast<string>(m["TypeList"]));
    }
  }


  virtual ~GetVulStatisticsRequest() = default;
};
class GetVulStatisticsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<long> vulAsapSum{};
  shared_ptr<long> vulLaterSum{};
  shared_ptr<long> vulNntfSum{};

  GetVulStatisticsResponseBody() {}

  explicit GetVulStatisticsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (vulAsapSum) {
      res["VulAsapSum"] = boost::any(*vulAsapSum);
    }
    if (vulLaterSum) {
      res["VulLaterSum"] = boost::any(*vulLaterSum);
    }
    if (vulNntfSum) {
      res["VulNntfSum"] = boost::any(*vulNntfSum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("VulAsapSum") != m.end() && !m["VulAsapSum"].empty()) {
      vulAsapSum = make_shared<long>(boost::any_cast<long>(m["VulAsapSum"]));
    }
    if (m.find("VulLaterSum") != m.end() && !m["VulLaterSum"].empty()) {
      vulLaterSum = make_shared<long>(boost::any_cast<long>(m["VulLaterSum"]));
    }
    if (m.find("VulNntfSum") != m.end() && !m["VulNntfSum"].empty()) {
      vulNntfSum = make_shared<long>(boost::any_cast<long>(m["VulNntfSum"]));
    }
  }


  virtual ~GetVulStatisticsResponseBody() = default;
};
class GetVulStatisticsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<GetVulStatisticsResponseBody> body{};

  GetVulStatisticsResponse() {}

  explicit GetVulStatisticsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetVulStatisticsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetVulStatisticsResponseBody>(model1);
      }
    }
  }


  virtual ~GetVulStatisticsResponse() = default;
};
class HandleSecurityEventsRequest : public Darabonba::Model {
public:
  shared_ptr<string> markBatch{};
  shared_ptr<string> markMissParam{};
  shared_ptr<string> operationCode{};
  shared_ptr<string> operationParams{};
  shared_ptr<vector<string>> securityEventIds{};
  shared_ptr<string> sourceIp{};

  HandleSecurityEventsRequest() {}

  explicit HandleSecurityEventsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (markBatch) {
      res["MarkBatch"] = boost::any(*markBatch);
    }
    if (markMissParam) {
      res["MarkMissParam"] = boost::any(*markMissParam);
    }
    if (operationCode) {
      res["OperationCode"] = boost::any(*operationCode);
    }
    if (operationParams) {
      res["OperationParams"] = boost::any(*operationParams);
    }
    if (securityEventIds) {
      res["SecurityEventIds"] = boost::any(*securityEventIds);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("MarkBatch") != m.end() && !m["MarkBatch"].empty()) {
      markBatch = make_shared<string>(boost::any_cast<string>(m["MarkBatch"]));
    }
    if (m.find("MarkMissParam") != m.end() && !m["MarkMissParam"].empty()) {
      markMissParam = make_shared<string>(boost::any_cast<string>(m["MarkMissParam"]));
    }
    if (m.find("OperationCode") != m.end() && !m["OperationCode"].empty()) {
      operationCode = make_shared<string>(boost::any_cast<string>(m["OperationCode"]));
    }
    if (m.find("OperationParams") != m.end() && !m["OperationParams"].empty()) {
      operationParams = make_shared<string>(boost::any_cast<string>(m["OperationParams"]));
    }
    if (m.find("SecurityEventIds") != m.end() && !m["SecurityEventIds"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["SecurityEventIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["SecurityEventIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      securityEventIds = make_shared<vector<string>>(toVec1);
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~HandleSecurityEventsRequest() = default;
};
class HandleSecurityEventsResponseBodyHandleSecurityEventsResponse : public Darabonba::Model {
public:
  shared_ptr<long> taskId{};

  HandleSecurityEventsResponseBodyHandleSecurityEventsResponse() {}

  explicit HandleSecurityEventsResponseBodyHandleSecurityEventsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~HandleSecurityEventsResponseBodyHandleSecurityEventsResponse() = default;
};
class HandleSecurityEventsResponseBody : public Darabonba::Model {
public:
  shared_ptr<HandleSecurityEventsResponseBodyHandleSecurityEventsResponse> handleSecurityEventsResponse{};
  shared_ptr<string> requestId{};

  HandleSecurityEventsResponseBody() {}

  explicit HandleSecurityEventsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (handleSecurityEventsResponse) {
      res["HandleSecurityEventsResponse"] = handleSecurityEventsResponse ? boost::any(handleSecurityEventsResponse->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("HandleSecurityEventsResponse") != m.end() && !m["HandleSecurityEventsResponse"].empty()) {
      if (typeid(map<string, boost::any>) == m["HandleSecurityEventsResponse"].type()) {
        HandleSecurityEventsResponseBodyHandleSecurityEventsResponse model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["HandleSecurityEventsResponse"]));
        handleSecurityEventsResponse = make_shared<HandleSecurityEventsResponseBodyHandleSecurityEventsResponse>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~HandleSecurityEventsResponseBody() = default;
};
class HandleSecurityEventsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<HandleSecurityEventsResponseBody> body{};

  HandleSecurityEventsResponse() {}

  explicit HandleSecurityEventsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        HandleSecurityEventsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<HandleSecurityEventsResponseBody>(model1);
      }
    }
  }


  virtual ~HandleSecurityEventsResponse() = default;
};
class HandleSimilarSecurityEventsRequest : public Darabonba::Model {
public:
  shared_ptr<string> markMissParam{};
  shared_ptr<string> operationCode{};
  shared_ptr<string> operationParams{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<long> taskId{};

  HandleSimilarSecurityEventsRequest() {}

  explicit HandleSimilarSecurityEventsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (markMissParam) {
      res["MarkMissParam"] = boost::any(*markMissParam);
    }
    if (operationCode) {
      res["OperationCode"] = boost::any(*operationCode);
    }
    if (operationParams) {
      res["OperationParams"] = boost::any(*operationParams);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("MarkMissParam") != m.end() && !m["MarkMissParam"].empty()) {
      markMissParam = make_shared<string>(boost::any_cast<string>(m["MarkMissParam"]));
    }
    if (m.find("OperationCode") != m.end() && !m["OperationCode"].empty()) {
      operationCode = make_shared<string>(boost::any_cast<string>(m["OperationCode"]));
    }
    if (m.find("OperationParams") != m.end() && !m["OperationParams"].empty()) {
      operationParams = make_shared<string>(boost::any_cast<string>(m["OperationParams"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~HandleSimilarSecurityEventsRequest() = default;
};
class HandleSimilarSecurityEventsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  HandleSimilarSecurityEventsResponseBody() {}

  explicit HandleSimilarSecurityEventsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~HandleSimilarSecurityEventsResponseBody() = default;
};
class HandleSimilarSecurityEventsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<HandleSimilarSecurityEventsResponseBody> body{};

  HandleSimilarSecurityEventsResponse() {}

  explicit HandleSimilarSecurityEventsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        HandleSimilarSecurityEventsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<HandleSimilarSecurityEventsResponseBody>(model1);
      }
    }
  }


  virtual ~HandleSimilarSecurityEventsResponse() = default;
};
class IgnoreHcCheckWarningsRequest : public Darabonba::Model {
public:
  shared_ptr<string> checkIds{};
  shared_ptr<string> checkWarningIds{};
  shared_ptr<string> reason{};
  shared_ptr<string> riskId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<long> type{};

  IgnoreHcCheckWarningsRequest() {}

  explicit IgnoreHcCheckWarningsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (checkIds) {
      res["CheckIds"] = boost::any(*checkIds);
    }
    if (checkWarningIds) {
      res["CheckWarningIds"] = boost::any(*checkWarningIds);
    }
    if (reason) {
      res["Reason"] = boost::any(*reason);
    }
    if (riskId) {
      res["RiskId"] = boost::any(*riskId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CheckIds") != m.end() && !m["CheckIds"].empty()) {
      checkIds = make_shared<string>(boost::any_cast<string>(m["CheckIds"]));
    }
    if (m.find("CheckWarningIds") != m.end() && !m["CheckWarningIds"].empty()) {
      checkWarningIds = make_shared<string>(boost::any_cast<string>(m["CheckWarningIds"]));
    }
    if (m.find("Reason") != m.end() && !m["Reason"].empty()) {
      reason = make_shared<string>(boost::any_cast<string>(m["Reason"]));
    }
    if (m.find("RiskId") != m.end() && !m["RiskId"].empty()) {
      riskId = make_shared<string>(boost::any_cast<string>(m["RiskId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<long>(boost::any_cast<long>(m["Type"]));
    }
  }


  virtual ~IgnoreHcCheckWarningsRequest() = default;
};
class IgnoreHcCheckWarningsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  IgnoreHcCheckWarningsResponseBody() {}

  explicit IgnoreHcCheckWarningsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~IgnoreHcCheckWarningsResponseBody() = default;
};
class IgnoreHcCheckWarningsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<IgnoreHcCheckWarningsResponseBody> body{};

  IgnoreHcCheckWarningsResponse() {}

  explicit IgnoreHcCheckWarningsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        IgnoreHcCheckWarningsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<IgnoreHcCheckWarningsResponseBody>(model1);
      }
    }
  }


  virtual ~IgnoreHcCheckWarningsResponse() = default;
};
class InstallBackupClientRequest : public Darabonba::Model {
public:
  shared_ptr<string> policyVersion{};
  shared_ptr<string> uuid{};
  shared_ptr<vector<string>> uuidList{};

  InstallBackupClientRequest() {}

  explicit InstallBackupClientRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (policyVersion) {
      res["PolicyVersion"] = boost::any(*policyVersion);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PolicyVersion") != m.end() && !m["PolicyVersion"].empty()) {
      policyVersion = make_shared<string>(boost::any_cast<string>(m["PolicyVersion"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["UuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["UuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      uuidList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~InstallBackupClientRequest() = default;
};
class InstallBackupClientResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  InstallBackupClientResponseBody() {}

  explicit InstallBackupClientResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~InstallBackupClientResponseBody() = default;
};
class InstallBackupClientResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<InstallBackupClientResponseBody> body{};

  InstallBackupClientResponse() {}

  explicit InstallBackupClientResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        InstallBackupClientResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<InstallBackupClientResponseBody>(model1);
      }
    }
  }


  virtual ~InstallBackupClientResponse() = default;
};
class ModifyAntiBruteForceRuleRequest : public Darabonba::Model {
public:
  shared_ptr<bool> defaultRule{};
  shared_ptr<long> failCount{};
  shared_ptr<long> forbiddenTime{};
  shared_ptr<long> id{};
  shared_ptr<string> name{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<long> span{};
  shared_ptr<vector<string>> uuidList{};

  ModifyAntiBruteForceRuleRequest() {}

  explicit ModifyAntiBruteForceRuleRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (defaultRule) {
      res["DefaultRule"] = boost::any(*defaultRule);
    }
    if (failCount) {
      res["FailCount"] = boost::any(*failCount);
    }
    if (forbiddenTime) {
      res["ForbiddenTime"] = boost::any(*forbiddenTime);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (span) {
      res["Span"] = boost::any(*span);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DefaultRule") != m.end() && !m["DefaultRule"].empty()) {
      defaultRule = make_shared<bool>(boost::any_cast<bool>(m["DefaultRule"]));
    }
    if (m.find("FailCount") != m.end() && !m["FailCount"].empty()) {
      failCount = make_shared<long>(boost::any_cast<long>(m["FailCount"]));
    }
    if (m.find("ForbiddenTime") != m.end() && !m["ForbiddenTime"].empty()) {
      forbiddenTime = make_shared<long>(boost::any_cast<long>(m["ForbiddenTime"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Span") != m.end() && !m["Span"].empty()) {
      span = make_shared<long>(boost::any_cast<long>(m["Span"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["UuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["UuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      uuidList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~ModifyAntiBruteForceRuleRequest() = default;
};
class ModifyAntiBruteForceRuleResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyAntiBruteForceRuleResponseBody() {}

  explicit ModifyAntiBruteForceRuleResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyAntiBruteForceRuleResponseBody() = default;
};
class ModifyAntiBruteForceRuleResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyAntiBruteForceRuleResponseBody> body{};

  ModifyAntiBruteForceRuleResponse() {}

  explicit ModifyAntiBruteForceRuleResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyAntiBruteForceRuleResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyAntiBruteForceRuleResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyAntiBruteForceRuleResponse() = default;
};
class ModifyAssetGroupRequest : public Darabonba::Model {
public:
  shared_ptr<long> groupId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> uuids{};

  ModifyAssetGroupRequest() {}

  explicit ModifyAssetGroupRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~ModifyAssetGroupRequest() = default;
};
class ModifyAssetGroupResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyAssetGroupResponseBody() {}

  explicit ModifyAssetGroupResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyAssetGroupResponseBody() = default;
};
class ModifyAssetGroupResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyAssetGroupResponseBody> body{};

  ModifyAssetGroupResponse() {}

  explicit ModifyAssetGroupResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyAssetGroupResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyAssetGroupResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyAssetGroupResponse() = default;
};
class ModifyBackupPolicyRequest : public Darabonba::Model {
public:
  shared_ptr<long> id{};
  shared_ptr<string> name{};
  shared_ptr<map<string, boost::any>> policy{};
  shared_ptr<string> policyRegionId{};
  shared_ptr<string> policyVersion{};
  shared_ptr<vector<string>> uuidList{};

  ModifyBackupPolicyRequest() {}

  explicit ModifyBackupPolicyRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (policy) {
      res["Policy"] = boost::any(*policy);
    }
    if (policyRegionId) {
      res["PolicyRegionId"] = boost::any(*policyRegionId);
    }
    if (policyVersion) {
      res["PolicyVersion"] = boost::any(*policyVersion);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Policy") != m.end() && !m["Policy"].empty()) {
      map<string, boost::any> map1 = boost::any_cast<map<string, boost::any>>(m["Policy"]);
      map<string, boost::any> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      policy = make_shared<map<string, boost::any>>(toMap1);
    }
    if (m.find("PolicyRegionId") != m.end() && !m["PolicyRegionId"].empty()) {
      policyRegionId = make_shared<string>(boost::any_cast<string>(m["PolicyRegionId"]));
    }
    if (m.find("PolicyVersion") != m.end() && !m["PolicyVersion"].empty()) {
      policyVersion = make_shared<string>(boost::any_cast<string>(m["PolicyVersion"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["UuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["UuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      uuidList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~ModifyBackupPolicyRequest() = default;
};
class ModifyBackupPolicyShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<long> id{};
  shared_ptr<string> name{};
  shared_ptr<string> policyShrink{};
  shared_ptr<string> policyRegionId{};
  shared_ptr<string> policyVersion{};
  shared_ptr<vector<string>> uuidList{};

  ModifyBackupPolicyShrinkRequest() {}

  explicit ModifyBackupPolicyShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (policyShrink) {
      res["Policy"] = boost::any(*policyShrink);
    }
    if (policyRegionId) {
      res["PolicyRegionId"] = boost::any(*policyRegionId);
    }
    if (policyVersion) {
      res["PolicyVersion"] = boost::any(*policyVersion);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Policy") != m.end() && !m["Policy"].empty()) {
      policyShrink = make_shared<string>(boost::any_cast<string>(m["Policy"]));
    }
    if (m.find("PolicyRegionId") != m.end() && !m["PolicyRegionId"].empty()) {
      policyRegionId = make_shared<string>(boost::any_cast<string>(m["PolicyRegionId"]));
    }
    if (m.find("PolicyVersion") != m.end() && !m["PolicyVersion"].empty()) {
      policyVersion = make_shared<string>(boost::any_cast<string>(m["PolicyVersion"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["UuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["UuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      uuidList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~ModifyBackupPolicyShrinkRequest() = default;
};
class ModifyBackupPolicyResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyBackupPolicyResponseBody() {}

  explicit ModifyBackupPolicyResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyBackupPolicyResponseBody() = default;
};
class ModifyBackupPolicyResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyBackupPolicyResponseBody> body{};

  ModifyBackupPolicyResponse() {}

  explicit ModifyBackupPolicyResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyBackupPolicyResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyBackupPolicyResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyBackupPolicyResponse() = default;
};
class ModifyBackupPolicyStatusRequest : public Darabonba::Model {
public:
  shared_ptr<long> id{};
  shared_ptr<string> policyVersion{};
  shared_ptr<string> status{};

  ModifyBackupPolicyStatusRequest() {}

  explicit ModifyBackupPolicyStatusRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (policyVersion) {
      res["PolicyVersion"] = boost::any(*policyVersion);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("PolicyVersion") != m.end() && !m["PolicyVersion"].empty()) {
      policyVersion = make_shared<string>(boost::any_cast<string>(m["PolicyVersion"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
  }


  virtual ~ModifyBackupPolicyStatusRequest() = default;
};
class ModifyBackupPolicyStatusResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyBackupPolicyStatusResponseBody() {}

  explicit ModifyBackupPolicyStatusResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyBackupPolicyStatusResponseBody() = default;
};
class ModifyBackupPolicyStatusResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyBackupPolicyStatusResponseBody> body{};

  ModifyBackupPolicyStatusResponse() {}

  explicit ModifyBackupPolicyStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyBackupPolicyStatusResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyBackupPolicyStatusResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyBackupPolicyStatusResponse() = default;
};
class ModifyCreateVulWhitelistRequest : public Darabonba::Model {
public:
  shared_ptr<string> reason{};
  shared_ptr<string> targetInfo{};
  shared_ptr<string> whitelist{};

  ModifyCreateVulWhitelistRequest() {}

  explicit ModifyCreateVulWhitelistRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (reason) {
      res["Reason"] = boost::any(*reason);
    }
    if (targetInfo) {
      res["TargetInfo"] = boost::any(*targetInfo);
    }
    if (whitelist) {
      res["Whitelist"] = boost::any(*whitelist);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Reason") != m.end() && !m["Reason"].empty()) {
      reason = make_shared<string>(boost::any_cast<string>(m["Reason"]));
    }
    if (m.find("TargetInfo") != m.end() && !m["TargetInfo"].empty()) {
      targetInfo = make_shared<string>(boost::any_cast<string>(m["TargetInfo"]));
    }
    if (m.find("Whitelist") != m.end() && !m["Whitelist"].empty()) {
      whitelist = make_shared<string>(boost::any_cast<string>(m["Whitelist"]));
    }
  }


  virtual ~ModifyCreateVulWhitelistRequest() = default;
};
class ModifyCreateVulWhitelistResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyCreateVulWhitelistResponseBody() {}

  explicit ModifyCreateVulWhitelistResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyCreateVulWhitelistResponseBody() = default;
};
class ModifyCreateVulWhitelistResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyCreateVulWhitelistResponseBody> body{};

  ModifyCreateVulWhitelistResponse() {}

  explicit ModifyCreateVulWhitelistResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyCreateVulWhitelistResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyCreateVulWhitelistResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyCreateVulWhitelistResponse() = default;
};
class ModifyEmgVulSubmitRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<string> name{};
  shared_ptr<string> userAgreement{};

  ModifyEmgVulSubmitRequest() {}

  explicit ModifyEmgVulSubmitRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (userAgreement) {
      res["UserAgreement"] = boost::any(*userAgreement);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("UserAgreement") != m.end() && !m["UserAgreement"].empty()) {
      userAgreement = make_shared<string>(boost::any_cast<string>(m["UserAgreement"]));
    }
  }


  virtual ~ModifyEmgVulSubmitRequest() = default;
};
class ModifyEmgVulSubmitResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyEmgVulSubmitResponseBody() {}

  explicit ModifyEmgVulSubmitResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyEmgVulSubmitResponseBody() = default;
};
class ModifyEmgVulSubmitResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyEmgVulSubmitResponseBody> body{};

  ModifyEmgVulSubmitResponse() {}

  explicit ModifyEmgVulSubmitResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyEmgVulSubmitResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyEmgVulSubmitResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyEmgVulSubmitResponse() = default;
};
class ModifyGroupPropertyRequest : public Darabonba::Model {
public:
  shared_ptr<string> data{};

  ModifyGroupPropertyRequest() {}

  explicit ModifyGroupPropertyRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (data) {
      res["Data"] = boost::any(*data);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
  }


  virtual ~ModifyGroupPropertyRequest() = default;
};
class ModifyGroupPropertyResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyGroupPropertyResponseBody() {}

  explicit ModifyGroupPropertyResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyGroupPropertyResponseBody() = default;
};
class ModifyGroupPropertyResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyGroupPropertyResponseBody> body{};

  ModifyGroupPropertyResponse() {}

  explicit ModifyGroupPropertyResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyGroupPropertyResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyGroupPropertyResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyGroupPropertyResponse() = default;
};
class ModifyInstanceAntiBruteForceRuleRequest : public Darabonba::Model {
public:
  shared_ptr<long> newRuleId{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> uuid{};

  ModifyInstanceAntiBruteForceRuleRequest() {}

  explicit ModifyInstanceAntiBruteForceRuleRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (newRuleId) {
      res["NewRuleId"] = boost::any(*newRuleId);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("NewRuleId") != m.end() && !m["NewRuleId"].empty()) {
      newRuleId = make_shared<long>(boost::any_cast<long>(m["NewRuleId"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~ModifyInstanceAntiBruteForceRuleRequest() = default;
};
class ModifyInstanceAntiBruteForceRuleResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyInstanceAntiBruteForceRuleResponseBody() {}

  explicit ModifyInstanceAntiBruteForceRuleResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyInstanceAntiBruteForceRuleResponseBody() = default;
};
class ModifyInstanceAntiBruteForceRuleResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyInstanceAntiBruteForceRuleResponseBody> body{};

  ModifyInstanceAntiBruteForceRuleResponse() {}

  explicit ModifyInstanceAntiBruteForceRuleResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyInstanceAntiBruteForceRuleResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyInstanceAntiBruteForceRuleResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyInstanceAntiBruteForceRuleResponse() = default;
};
class ModifyLoginBaseConfigRequest : public Darabonba::Model {
public:
  shared_ptr<string> config{};
  shared_ptr<string> target{};
  shared_ptr<string> type{};

  ModifyLoginBaseConfigRequest() {}

  explicit ModifyLoginBaseConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (config) {
      res["Config"] = boost::any(*config);
    }
    if (target) {
      res["Target"] = boost::any(*target);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Config") != m.end() && !m["Config"].empty()) {
      config = make_shared<string>(boost::any_cast<string>(m["Config"]));
    }
    if (m.find("Target") != m.end() && !m["Target"].empty()) {
      target = make_shared<string>(boost::any_cast<string>(m["Target"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~ModifyLoginBaseConfigRequest() = default;
};
class ModifyLoginBaseConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyLoginBaseConfigResponseBody() {}

  explicit ModifyLoginBaseConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyLoginBaseConfigResponseBody() = default;
};
class ModifyLoginBaseConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyLoginBaseConfigResponseBody> body{};

  ModifyLoginBaseConfigResponse() {}

  explicit ModifyLoginBaseConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyLoginBaseConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyLoginBaseConfigResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyLoginBaseConfigResponse() = default;
};
class ModifyLoginSwitchConfigRequest : public Darabonba::Model {
public:
  shared_ptr<string> item{};
  shared_ptr<long> status{};

  ModifyLoginSwitchConfigRequest() {}

  explicit ModifyLoginSwitchConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (item) {
      res["Item"] = boost::any(*item);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Item") != m.end() && !m["Item"].empty()) {
      item = make_shared<string>(boost::any_cast<string>(m["Item"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
  }


  virtual ~ModifyLoginSwitchConfigRequest() = default;
};
class ModifyLoginSwitchConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyLoginSwitchConfigResponseBody() {}

  explicit ModifyLoginSwitchConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyLoginSwitchConfigResponseBody() = default;
};
class ModifyLoginSwitchConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyLoginSwitchConfigResponseBody> body{};

  ModifyLoginSwitchConfigResponse() {}

  explicit ModifyLoginSwitchConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyLoginSwitchConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyLoginSwitchConfigResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyLoginSwitchConfigResponse() = default;
};
class ModifyOpenLogShipperRequest : public Darabonba::Model {
public:
  shared_ptr<string> from{};

  ModifyOpenLogShipperRequest() {}

  explicit ModifyOpenLogShipperRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (from) {
      res["From"] = boost::any(*from);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("From") != m.end() && !m["From"].empty()) {
      from = make_shared<string>(boost::any_cast<string>(m["From"]));
    }
  }


  virtual ~ModifyOpenLogShipperRequest() = default;
};
class ModifyOpenLogShipperResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyOpenLogShipperResponseBody() {}

  explicit ModifyOpenLogShipperResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyOpenLogShipperResponseBody() = default;
};
class ModifyOpenLogShipperResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyOpenLogShipperResponseBody> body{};

  ModifyOpenLogShipperResponse() {}

  explicit ModifyOpenLogShipperResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyOpenLogShipperResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyOpenLogShipperResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyOpenLogShipperResponse() = default;
};
class ModifyOperateVulRequest : public Darabonba::Model {
public:
  shared_ptr<string> info{};
  shared_ptr<string> operateType{};
  shared_ptr<string> reason{};
  shared_ptr<string> type{};

  ModifyOperateVulRequest() {}

  explicit ModifyOperateVulRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (info) {
      res["Info"] = boost::any(*info);
    }
    if (operateType) {
      res["OperateType"] = boost::any(*operateType);
    }
    if (reason) {
      res["Reason"] = boost::any(*reason);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Info") != m.end() && !m["Info"].empty()) {
      info = make_shared<string>(boost::any_cast<string>(m["Info"]));
    }
    if (m.find("OperateType") != m.end() && !m["OperateType"].empty()) {
      operateType = make_shared<string>(boost::any_cast<string>(m["OperateType"]));
    }
    if (m.find("Reason") != m.end() && !m["Reason"].empty()) {
      reason = make_shared<string>(boost::any_cast<string>(m["Reason"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~ModifyOperateVulRequest() = default;
};
class ModifyOperateVulResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyOperateVulResponseBody() {}

  explicit ModifyOperateVulResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyOperateVulResponseBody() = default;
};
class ModifyOperateVulResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyOperateVulResponseBody> body{};

  ModifyOperateVulResponse() {}

  explicit ModifyOperateVulResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyOperateVulResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyOperateVulResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyOperateVulResponse() = default;
};
class ModifyPropertyScheduleConfigRequest : public Darabonba::Model {
public:
  shared_ptr<string> scheduleTime{};
  shared_ptr<string> type{};

  ModifyPropertyScheduleConfigRequest() {}

  explicit ModifyPropertyScheduleConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (scheduleTime) {
      res["ScheduleTime"] = boost::any(*scheduleTime);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ScheduleTime") != m.end() && !m["ScheduleTime"].empty()) {
      scheduleTime = make_shared<string>(boost::any_cast<string>(m["ScheduleTime"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~ModifyPropertyScheduleConfigRequest() = default;
};
class ModifyPropertyScheduleConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<bool> modifyResult{};
  shared_ptr<string> requestId{};

  ModifyPropertyScheduleConfigResponseBody() {}

  explicit ModifyPropertyScheduleConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (modifyResult) {
      res["ModifyResult"] = boost::any(*modifyResult);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ModifyResult") != m.end() && !m["ModifyResult"].empty()) {
      modifyResult = make_shared<bool>(boost::any_cast<bool>(m["ModifyResult"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyPropertyScheduleConfigResponseBody() = default;
};
class ModifyPropertyScheduleConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyPropertyScheduleConfigResponseBody> body{};

  ModifyPropertyScheduleConfigResponse() {}

  explicit ModifyPropertyScheduleConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyPropertyScheduleConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyPropertyScheduleConfigResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyPropertyScheduleConfigResponse() = default;
};
class ModifyPushAllTaskRequest : public Darabonba::Model {
public:
  shared_ptr<string> sourceIp{};
  shared_ptr<string> tasks{};
  shared_ptr<string> uuids{};

  ModifyPushAllTaskRequest() {}

  explicit ModifyPushAllTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (tasks) {
      res["Tasks"] = boost::any(*tasks);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Tasks") != m.end() && !m["Tasks"].empty()) {
      tasks = make_shared<string>(boost::any_cast<string>(m["Tasks"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~ModifyPushAllTaskRequest() = default;
};
class ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList : public Darabonba::Model {
public:
  shared_ptr<long> groupId{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> ip{};
  shared_ptr<string> message{};
  shared_ptr<bool> online{};
  shared_ptr<string> osVersion{};
  shared_ptr<string> region{};
  shared_ptr<bool> success{};
  shared_ptr<string> uuid{};

  ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList() {}

  explicit ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (ip) {
      res["Ip"] = boost::any(*ip);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (online) {
      res["Online"] = boost::any(*online);
    }
    if (osVersion) {
      res["OsVersion"] = boost::any(*osVersion);
    }
    if (region) {
      res["Region"] = boost::any(*region);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("Ip") != m.end() && !m["Ip"].empty()) {
      ip = make_shared<string>(boost::any_cast<string>(m["Ip"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("Online") != m.end() && !m["Online"].empty()) {
      online = make_shared<bool>(boost::any_cast<bool>(m["Online"]));
    }
    if (m.find("OsVersion") != m.end() && !m["OsVersion"].empty()) {
      osVersion = make_shared<string>(boost::any_cast<string>(m["OsVersion"]));
    }
    if (m.find("Region") != m.end() && !m["Region"].empty()) {
      region = make_shared<string>(boost::any_cast<string>(m["Region"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList() = default;
};
class ModifyPushAllTaskResponseBodyPushTaskRsp : public Darabonba::Model {
public:
  shared_ptr<vector<ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList>> pushTaskResultList{};

  ModifyPushAllTaskResponseBodyPushTaskRsp() {}

  explicit ModifyPushAllTaskResponseBodyPushTaskRsp(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pushTaskResultList) {
      vector<boost::any> temp1;
      for(auto item1:*pushTaskResultList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["PushTaskResultList"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PushTaskResultList") != m.end() && !m["PushTaskResultList"].empty()) {
      if (typeid(vector<boost::any>) == m["PushTaskResultList"].type()) {
        vector<ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["PushTaskResultList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        pushTaskResultList = make_shared<vector<ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList>>(expect1);
      }
    }
  }


  virtual ~ModifyPushAllTaskResponseBodyPushTaskRsp() = default;
};
class ModifyPushAllTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<ModifyPushAllTaskResponseBodyPushTaskRsp> pushTaskRsp{};
  shared_ptr<string> requestId{};

  ModifyPushAllTaskResponseBody() {}

  explicit ModifyPushAllTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pushTaskRsp) {
      res["PushTaskRsp"] = pushTaskRsp ? boost::any(pushTaskRsp->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PushTaskRsp") != m.end() && !m["PushTaskRsp"].empty()) {
      if (typeid(map<string, boost::any>) == m["PushTaskRsp"].type()) {
        ModifyPushAllTaskResponseBodyPushTaskRsp model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["PushTaskRsp"]));
        pushTaskRsp = make_shared<ModifyPushAllTaskResponseBodyPushTaskRsp>(model1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyPushAllTaskResponseBody() = default;
};
class ModifyPushAllTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyPushAllTaskResponseBody> body{};

  ModifyPushAllTaskResponse() {}

  explicit ModifyPushAllTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyPushAllTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyPushAllTaskResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyPushAllTaskResponse() = default;
};
class ModifyRiskCheckStatusRequest : public Darabonba::Model {
public:
  shared_ptr<long> itemId{};
  shared_ptr<string> lang{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> status{};
  shared_ptr<long> taskId{};

  ModifyRiskCheckStatusRequest() {}

  explicit ModifyRiskCheckStatusRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (itemId) {
      res["ItemId"] = boost::any(*itemId);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ItemId") != m.end() && !m["ItemId"].empty()) {
      itemId = make_shared<long>(boost::any_cast<long>(m["ItemId"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~ModifyRiskCheckStatusRequest() = default;
};
class ModifyRiskCheckStatusResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyRiskCheckStatusResponseBody() {}

  explicit ModifyRiskCheckStatusResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyRiskCheckStatusResponseBody() = default;
};
class ModifyRiskCheckStatusResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyRiskCheckStatusResponseBody> body{};

  ModifyRiskCheckStatusResponse() {}

  explicit ModifyRiskCheckStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyRiskCheckStatusResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyRiskCheckStatusResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyRiskCheckStatusResponse() = default;
};
class ModifyRiskSingleResultStatusRequest : public Darabonba::Model {
public:
  shared_ptr<vector<string>> ids{};
  shared_ptr<string> lang{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> status{};
  shared_ptr<long> taskId{};

  ModifyRiskSingleResultStatusRequest() {}

  explicit ModifyRiskSingleResultStatusRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ids) {
      res["Ids"] = boost::any(*ids);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Ids") != m.end() && !m["Ids"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["Ids"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["Ids"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      ids = make_shared<vector<string>>(toVec1);
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~ModifyRiskSingleResultStatusRequest() = default;
};
class ModifyRiskSingleResultStatusResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyRiskSingleResultStatusResponseBody() {}

  explicit ModifyRiskSingleResultStatusResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyRiskSingleResultStatusResponseBody() = default;
};
class ModifyRiskSingleResultStatusResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyRiskSingleResultStatusResponseBody> body{};

  ModifyRiskSingleResultStatusResponse() {}

  explicit ModifyRiskSingleResultStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyRiskSingleResultStatusResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyRiskSingleResultStatusResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyRiskSingleResultStatusResponse() = default;
};
class ModifySecurityCheckScheduleConfigRequest : public Darabonba::Model {
public:
  shared_ptr<string> daysOfWeek{};
  shared_ptr<long> endTime{};
  shared_ptr<string> lang{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<long> startTime{};

  ModifySecurityCheckScheduleConfigRequest() {}

  explicit ModifySecurityCheckScheduleConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (daysOfWeek) {
      res["DaysOfWeek"] = boost::any(*daysOfWeek);
    }
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DaysOfWeek") != m.end() && !m["DaysOfWeek"].empty()) {
      daysOfWeek = make_shared<string>(boost::any_cast<string>(m["DaysOfWeek"]));
    }
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<long>(boost::any_cast<long>(m["EndTime"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<long>(boost::any_cast<long>(m["StartTime"]));
    }
  }


  virtual ~ModifySecurityCheckScheduleConfigRequest() = default;
};
class ModifySecurityCheckScheduleConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifySecurityCheckScheduleConfigResponseBody() {}

  explicit ModifySecurityCheckScheduleConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifySecurityCheckScheduleConfigResponseBody() = default;
};
class ModifySecurityCheckScheduleConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifySecurityCheckScheduleConfigResponseBody> body{};

  ModifySecurityCheckScheduleConfigResponse() {}

  explicit ModifySecurityCheckScheduleConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifySecurityCheckScheduleConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifySecurityCheckScheduleConfigResponseBody>(model1);
      }
    }
  }


  virtual ~ModifySecurityCheckScheduleConfigResponse() = default;
};
class ModifyStartVulScanRequest : public Darabonba::Model {
public:
  shared_ptr<string> types{};
  shared_ptr<string> uuids{};

  ModifyStartVulScanRequest() {}

  explicit ModifyStartVulScanRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (types) {
      res["Types"] = boost::any(*types);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Types") != m.end() && !m["Types"].empty()) {
      types = make_shared<string>(boost::any_cast<string>(m["Types"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~ModifyStartVulScanRequest() = default;
};
class ModifyStartVulScanResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyStartVulScanResponseBody() {}

  explicit ModifyStartVulScanResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyStartVulScanResponseBody() = default;
};
class ModifyStartVulScanResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyStartVulScanResponseBody> body{};

  ModifyStartVulScanResponse() {}

  explicit ModifyStartVulScanResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyStartVulScanResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyStartVulScanResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyStartVulScanResponse() = default;
};
class ModifyTagWithUuidRequest : public Darabonba::Model {
public:
  shared_ptr<string> machineTypes{};
  shared_ptr<string> tagId{};
  shared_ptr<string> tagList{};
  shared_ptr<string> uuidList{};

  ModifyTagWithUuidRequest() {}

  explicit ModifyTagWithUuidRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (machineTypes) {
      res["MachineTypes"] = boost::any(*machineTypes);
    }
    if (tagId) {
      res["TagId"] = boost::any(*tagId);
    }
    if (tagList) {
      res["TagList"] = boost::any(*tagList);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("MachineTypes") != m.end() && !m["MachineTypes"].empty()) {
      machineTypes = make_shared<string>(boost::any_cast<string>(m["MachineTypes"]));
    }
    if (m.find("TagId") != m.end() && !m["TagId"].empty()) {
      tagId = make_shared<string>(boost::any_cast<string>(m["TagId"]));
    }
    if (m.find("TagList") != m.end() && !m["TagList"].empty()) {
      tagList = make_shared<string>(boost::any_cast<string>(m["TagList"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      uuidList = make_shared<string>(boost::any_cast<string>(m["UuidList"]));
    }
  }


  virtual ~ModifyTagWithUuidRequest() = default;
};
class ModifyTagWithUuidResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyTagWithUuidResponseBody() {}

  explicit ModifyTagWithUuidResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyTagWithUuidResponseBody() = default;
};
class ModifyTagWithUuidResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyTagWithUuidResponseBody> body{};

  ModifyTagWithUuidResponse() {}

  explicit ModifyTagWithUuidResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyTagWithUuidResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyTagWithUuidResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyTagWithUuidResponse() = default;
};
class ModifyVpcHoneyPotRequest : public Darabonba::Model {
public:
  shared_ptr<string> honeyPotAction{};
  shared_ptr<string> vpcId{};

  ModifyVpcHoneyPotRequest() {}

  explicit ModifyVpcHoneyPotRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (honeyPotAction) {
      res["HoneyPotAction"] = boost::any(*honeyPotAction);
    }
    if (vpcId) {
      res["VpcId"] = boost::any(*vpcId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("HoneyPotAction") != m.end() && !m["HoneyPotAction"].empty()) {
      honeyPotAction = make_shared<string>(boost::any_cast<string>(m["HoneyPotAction"]));
    }
    if (m.find("VpcId") != m.end() && !m["VpcId"].empty()) {
      vpcId = make_shared<string>(boost::any_cast<string>(m["VpcId"]));
    }
  }


  virtual ~ModifyVpcHoneyPotRequest() = default;
};
class ModifyVpcHoneyPotResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyVpcHoneyPotResponseBody() {}

  explicit ModifyVpcHoneyPotResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyVpcHoneyPotResponseBody() = default;
};
class ModifyVpcHoneyPotResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyVpcHoneyPotResponseBody> body{};

  ModifyVpcHoneyPotResponse() {}

  explicit ModifyVpcHoneyPotResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyVpcHoneyPotResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyVpcHoneyPotResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyVpcHoneyPotResponse() = default;
};
class ModifyVulTargetConfigRequest : public Darabonba::Model {
public:
  shared_ptr<string> config{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> type{};
  shared_ptr<string> uuid{};

  ModifyVulTargetConfigRequest() {}

  explicit ModifyVulTargetConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (config) {
      res["Config"] = boost::any(*config);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Config") != m.end() && !m["Config"].empty()) {
      config = make_shared<string>(boost::any_cast<string>(m["Config"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~ModifyVulTargetConfigRequest() = default;
};
class ModifyVulTargetConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyVulTargetConfigResponseBody() {}

  explicit ModifyVulTargetConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyVulTargetConfigResponseBody() = default;
};
class ModifyVulTargetConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyVulTargetConfigResponseBody> body{};

  ModifyVulTargetConfigResponse() {}

  explicit ModifyVulTargetConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyVulTargetConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyVulTargetConfigResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyVulTargetConfigResponse() = default;
};
class ModifyWebLockCreateConfigRequest : public Darabonba::Model {
public:
  shared_ptr<string> defenceMode{};
  shared_ptr<string> dir{};
  shared_ptr<string> exclusiveDir{};
  shared_ptr<string> exclusiveFile{};
  shared_ptr<string> exclusiveFileType{};
  shared_ptr<string> inclusiveFile{};
  shared_ptr<string> inclusiveFileType{};
  shared_ptr<string> lang{};
  shared_ptr<string> localBackupDir{};
  shared_ptr<string> mode{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> uuid{};

  ModifyWebLockCreateConfigRequest() {}

  explicit ModifyWebLockCreateConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (defenceMode) {
      res["DefenceMode"] = boost::any(*defenceMode);
    }
    if (dir) {
      res["Dir"] = boost::any(*dir);
    }
    if (exclusiveDir) {
      res["ExclusiveDir"] = boost::any(*exclusiveDir);
    }
    if (exclusiveFile) {
      res["ExclusiveFile"] = boost::any(*exclusiveFile);
    }
    if (exclusiveFileType) {
      res["ExclusiveFileType"] = boost::any(*exclusiveFileType);
    }
    if (inclusiveFile) {
      res["InclusiveFile"] = boost::any(*inclusiveFile);
    }
    if (inclusiveFileType) {
      res["InclusiveFileType"] = boost::any(*inclusiveFileType);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (localBackupDir) {
      res["LocalBackupDir"] = boost::any(*localBackupDir);
    }
    if (mode) {
      res["Mode"] = boost::any(*mode);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DefenceMode") != m.end() && !m["DefenceMode"].empty()) {
      defenceMode = make_shared<string>(boost::any_cast<string>(m["DefenceMode"]));
    }
    if (m.find("Dir") != m.end() && !m["Dir"].empty()) {
      dir = make_shared<string>(boost::any_cast<string>(m["Dir"]));
    }
    if (m.find("ExclusiveDir") != m.end() && !m["ExclusiveDir"].empty()) {
      exclusiveDir = make_shared<string>(boost::any_cast<string>(m["ExclusiveDir"]));
    }
    if (m.find("ExclusiveFile") != m.end() && !m["ExclusiveFile"].empty()) {
      exclusiveFile = make_shared<string>(boost::any_cast<string>(m["ExclusiveFile"]));
    }
    if (m.find("ExclusiveFileType") != m.end() && !m["ExclusiveFileType"].empty()) {
      exclusiveFileType = make_shared<string>(boost::any_cast<string>(m["ExclusiveFileType"]));
    }
    if (m.find("InclusiveFile") != m.end() && !m["InclusiveFile"].empty()) {
      inclusiveFile = make_shared<string>(boost::any_cast<string>(m["InclusiveFile"]));
    }
    if (m.find("InclusiveFileType") != m.end() && !m["InclusiveFileType"].empty()) {
      inclusiveFileType = make_shared<string>(boost::any_cast<string>(m["InclusiveFileType"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("LocalBackupDir") != m.end() && !m["LocalBackupDir"].empty()) {
      localBackupDir = make_shared<string>(boost::any_cast<string>(m["LocalBackupDir"]));
    }
    if (m.find("Mode") != m.end() && !m["Mode"].empty()) {
      mode = make_shared<string>(boost::any_cast<string>(m["Mode"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~ModifyWebLockCreateConfigRequest() = default;
};
class ModifyWebLockCreateConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyWebLockCreateConfigResponseBody() {}

  explicit ModifyWebLockCreateConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyWebLockCreateConfigResponseBody() = default;
};
class ModifyWebLockCreateConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyWebLockCreateConfigResponseBody> body{};

  ModifyWebLockCreateConfigResponse() {}

  explicit ModifyWebLockCreateConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyWebLockCreateConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyWebLockCreateConfigResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyWebLockCreateConfigResponse() = default;
};
class ModifyWebLockDeleteConfigRequest : public Darabonba::Model {
public:
  shared_ptr<long> id{};
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> uuid{};

  ModifyWebLockDeleteConfigRequest() {}

  explicit ModifyWebLockDeleteConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~ModifyWebLockDeleteConfigRequest() = default;
};
class ModifyWebLockDeleteConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyWebLockDeleteConfigResponseBody() {}

  explicit ModifyWebLockDeleteConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyWebLockDeleteConfigResponseBody() = default;
};
class ModifyWebLockDeleteConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyWebLockDeleteConfigResponseBody> body{};

  ModifyWebLockDeleteConfigResponse() {}

  explicit ModifyWebLockDeleteConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyWebLockDeleteConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyWebLockDeleteConfigResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyWebLockDeleteConfigResponse() = default;
};
class ModifyWebLockStartRequest : public Darabonba::Model {
public:
  shared_ptr<string> defenceMode{};
  shared_ptr<string> dir{};
  shared_ptr<string> exclusiveDir{};
  shared_ptr<string> exclusiveFile{};
  shared_ptr<string> exclusiveFileType{};
  shared_ptr<string> inclusiveFileType{};
  shared_ptr<string> localBackupDir{};
  shared_ptr<string> mode{};
  shared_ptr<string> uuid{};

  ModifyWebLockStartRequest() {}

  explicit ModifyWebLockStartRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (defenceMode) {
      res["DefenceMode"] = boost::any(*defenceMode);
    }
    if (dir) {
      res["Dir"] = boost::any(*dir);
    }
    if (exclusiveDir) {
      res["ExclusiveDir"] = boost::any(*exclusiveDir);
    }
    if (exclusiveFile) {
      res["ExclusiveFile"] = boost::any(*exclusiveFile);
    }
    if (exclusiveFileType) {
      res["ExclusiveFileType"] = boost::any(*exclusiveFileType);
    }
    if (inclusiveFileType) {
      res["InclusiveFileType"] = boost::any(*inclusiveFileType);
    }
    if (localBackupDir) {
      res["LocalBackupDir"] = boost::any(*localBackupDir);
    }
    if (mode) {
      res["Mode"] = boost::any(*mode);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DefenceMode") != m.end() && !m["DefenceMode"].empty()) {
      defenceMode = make_shared<string>(boost::any_cast<string>(m["DefenceMode"]));
    }
    if (m.find("Dir") != m.end() && !m["Dir"].empty()) {
      dir = make_shared<string>(boost::any_cast<string>(m["Dir"]));
    }
    if (m.find("ExclusiveDir") != m.end() && !m["ExclusiveDir"].empty()) {
      exclusiveDir = make_shared<string>(boost::any_cast<string>(m["ExclusiveDir"]));
    }
    if (m.find("ExclusiveFile") != m.end() && !m["ExclusiveFile"].empty()) {
      exclusiveFile = make_shared<string>(boost::any_cast<string>(m["ExclusiveFile"]));
    }
    if (m.find("ExclusiveFileType") != m.end() && !m["ExclusiveFileType"].empty()) {
      exclusiveFileType = make_shared<string>(boost::any_cast<string>(m["ExclusiveFileType"]));
    }
    if (m.find("InclusiveFileType") != m.end() && !m["InclusiveFileType"].empty()) {
      inclusiveFileType = make_shared<string>(boost::any_cast<string>(m["InclusiveFileType"]));
    }
    if (m.find("LocalBackupDir") != m.end() && !m["LocalBackupDir"].empty()) {
      localBackupDir = make_shared<string>(boost::any_cast<string>(m["LocalBackupDir"]));
    }
    if (m.find("Mode") != m.end() && !m["Mode"].empty()) {
      mode = make_shared<string>(boost::any_cast<string>(m["Mode"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~ModifyWebLockStartRequest() = default;
};
class ModifyWebLockStartResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyWebLockStartResponseBody() {}

  explicit ModifyWebLockStartResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyWebLockStartResponseBody() = default;
};
class ModifyWebLockStartResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyWebLockStartResponseBody> body{};

  ModifyWebLockStartResponse() {}

  explicit ModifyWebLockStartResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyWebLockStartResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyWebLockStartResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyWebLockStartResponse() = default;
};
class ModifyWebLockStatusRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> status{};
  shared_ptr<string> uuid{};

  ModifyWebLockStatusRequest() {}

  explicit ModifyWebLockStatusRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~ModifyWebLockStatusRequest() = default;
};
class ModifyWebLockStatusResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyWebLockStatusResponseBody() {}

  explicit ModifyWebLockStatusResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyWebLockStatusResponseBody() = default;
};
class ModifyWebLockStatusResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyWebLockStatusResponseBody> body{};

  ModifyWebLockStatusResponse() {}

  explicit ModifyWebLockStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyWebLockStatusResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyWebLockStatusResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyWebLockStatusResponse() = default;
};
class ModifyWebLockUpdateConfigRequest : public Darabonba::Model {
public:
  shared_ptr<string> defenceMode{};
  shared_ptr<string> dir{};
  shared_ptr<string> exclusiveDir{};
  shared_ptr<string> exclusiveFile{};
  shared_ptr<string> exclusiveFileType{};
  shared_ptr<long> id{};
  shared_ptr<string> inclusiveFile{};
  shared_ptr<string> inclusiveFileType{};
  shared_ptr<string> lang{};
  shared_ptr<string> localBackupDir{};
  shared_ptr<string> mode{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> uuid{};

  ModifyWebLockUpdateConfigRequest() {}

  explicit ModifyWebLockUpdateConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (defenceMode) {
      res["DefenceMode"] = boost::any(*defenceMode);
    }
    if (dir) {
      res["Dir"] = boost::any(*dir);
    }
    if (exclusiveDir) {
      res["ExclusiveDir"] = boost::any(*exclusiveDir);
    }
    if (exclusiveFile) {
      res["ExclusiveFile"] = boost::any(*exclusiveFile);
    }
    if (exclusiveFileType) {
      res["ExclusiveFileType"] = boost::any(*exclusiveFileType);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (inclusiveFile) {
      res["InclusiveFile"] = boost::any(*inclusiveFile);
    }
    if (inclusiveFileType) {
      res["InclusiveFileType"] = boost::any(*inclusiveFileType);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (localBackupDir) {
      res["LocalBackupDir"] = boost::any(*localBackupDir);
    }
    if (mode) {
      res["Mode"] = boost::any(*mode);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DefenceMode") != m.end() && !m["DefenceMode"].empty()) {
      defenceMode = make_shared<string>(boost::any_cast<string>(m["DefenceMode"]));
    }
    if (m.find("Dir") != m.end() && !m["Dir"].empty()) {
      dir = make_shared<string>(boost::any_cast<string>(m["Dir"]));
    }
    if (m.find("ExclusiveDir") != m.end() && !m["ExclusiveDir"].empty()) {
      exclusiveDir = make_shared<string>(boost::any_cast<string>(m["ExclusiveDir"]));
    }
    if (m.find("ExclusiveFile") != m.end() && !m["ExclusiveFile"].empty()) {
      exclusiveFile = make_shared<string>(boost::any_cast<string>(m["ExclusiveFile"]));
    }
    if (m.find("ExclusiveFileType") != m.end() && !m["ExclusiveFileType"].empty()) {
      exclusiveFileType = make_shared<string>(boost::any_cast<string>(m["ExclusiveFileType"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("InclusiveFile") != m.end() && !m["InclusiveFile"].empty()) {
      inclusiveFile = make_shared<string>(boost::any_cast<string>(m["InclusiveFile"]));
    }
    if (m.find("InclusiveFileType") != m.end() && !m["InclusiveFileType"].empty()) {
      inclusiveFileType = make_shared<string>(boost::any_cast<string>(m["InclusiveFileType"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("LocalBackupDir") != m.end() && !m["LocalBackupDir"].empty()) {
      localBackupDir = make_shared<string>(boost::any_cast<string>(m["LocalBackupDir"]));
    }
    if (m.find("Mode") != m.end() && !m["Mode"].empty()) {
      mode = make_shared<string>(boost::any_cast<string>(m["Mode"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~ModifyWebLockUpdateConfigRequest() = default;
};
class ModifyWebLockUpdateConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ModifyWebLockUpdateConfigResponseBody() {}

  explicit ModifyWebLockUpdateConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ModifyWebLockUpdateConfigResponseBody() = default;
};
class ModifyWebLockUpdateConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ModifyWebLockUpdateConfigResponseBody> body{};

  ModifyWebLockUpdateConfigResponse() {}

  explicit ModifyWebLockUpdateConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ModifyWebLockUpdateConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ModifyWebLockUpdateConfigResponseBody>(model1);
      }
    }
  }


  virtual ~ModifyWebLockUpdateConfigResponse() = default;
};
class OperateAgentClientInstallRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceIds{};
  shared_ptr<string> uuids{};

  OperateAgentClientInstallRequest() {}

  explicit OperateAgentClientInstallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceIds) {
      res["InstanceIds"] = boost::any(*instanceIds);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceIds") != m.end() && !m["InstanceIds"].empty()) {
      instanceIds = make_shared<string>(boost::any_cast<string>(m["InstanceIds"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~OperateAgentClientInstallRequest() = default;
};
class OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> recordId{};
  shared_ptr<string> uuid{};

  OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList() {}

  explicit OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (recordId) {
      res["RecordId"] = boost::any(*recordId);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("RecordId") != m.end() && !m["RecordId"].empty()) {
      recordId = make_shared<long>(boost::any_cast<long>(m["RecordId"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
  }


  virtual ~OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList() = default;
};
class OperateAgentClientInstallResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList>> aegisCelintInstallResposeList{};
  shared_ptr<string> requestId{};

  OperateAgentClientInstallResponseBody() {}

  explicit OperateAgentClientInstallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (aegisCelintInstallResposeList) {
      vector<boost::any> temp1;
      for(auto item1:*aegisCelintInstallResposeList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["AegisCelintInstallResposeList"] = boost::any(temp1);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AegisCelintInstallResposeList") != m.end() && !m["AegisCelintInstallResposeList"].empty()) {
      if (typeid(vector<boost::any>) == m["AegisCelintInstallResposeList"].type()) {
        vector<OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["AegisCelintInstallResposeList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        aegisCelintInstallResposeList = make_shared<vector<OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList>>(expect1);
      }
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~OperateAgentClientInstallResponseBody() = default;
};
class OperateAgentClientInstallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<OperateAgentClientInstallResponseBody> body{};

  OperateAgentClientInstallResponse() {}

  explicit OperateAgentClientInstallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        OperateAgentClientInstallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<OperateAgentClientInstallResponseBody>(model1);
      }
    }
  }


  virtual ~OperateAgentClientInstallResponse() = default;
};
class OperateSuspiciousTargetConfigRequest : public Darabonba::Model {
public:
  shared_ptr<string> lang{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> targetOperations{};
  shared_ptr<string> targetType{};
  shared_ptr<string> type{};

  OperateSuspiciousTargetConfigRequest() {}

  explicit OperateSuspiciousTargetConfigRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (targetOperations) {
      res["TargetOperations"] = boost::any(*targetOperations);
    }
    if (targetType) {
      res["TargetType"] = boost::any(*targetType);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("TargetOperations") != m.end() && !m["TargetOperations"].empty()) {
      targetOperations = make_shared<string>(boost::any_cast<string>(m["TargetOperations"]));
    }
    if (m.find("TargetType") != m.end() && !m["TargetType"].empty()) {
      targetType = make_shared<string>(boost::any_cast<string>(m["TargetType"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~OperateSuspiciousTargetConfigRequest() = default;
};
class OperateSuspiciousTargetConfigResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  OperateSuspiciousTargetConfigResponseBody() {}

  explicit OperateSuspiciousTargetConfigResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~OperateSuspiciousTargetConfigResponseBody() = default;
};
class OperateSuspiciousTargetConfigResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<OperateSuspiciousTargetConfigResponseBody> body{};

  OperateSuspiciousTargetConfigResponse() {}

  explicit OperateSuspiciousTargetConfigResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        OperateSuspiciousTargetConfigResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<OperateSuspiciousTargetConfigResponseBody>(model1);
      }
    }
  }


  virtual ~OperateSuspiciousTargetConfigResponse() = default;
};
class OperateVulsRequest : public Darabonba::Model {
public:
  shared_ptr<string> operateType{};
  shared_ptr<string> type{};
  shared_ptr<vector<string>> uuids{};
  shared_ptr<vector<string>> vulNames{};

  OperateVulsRequest() {}

  explicit OperateVulsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (operateType) {
      res["OperateType"] = boost::any(*operateType);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    if (vulNames) {
      res["VulNames"] = boost::any(*vulNames);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("OperateType") != m.end() && !m["OperateType"].empty()) {
      operateType = make_shared<string>(boost::any_cast<string>(m["OperateType"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["Uuids"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["Uuids"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      uuids = make_shared<vector<string>>(toVec1);
    }
    if (m.find("VulNames") != m.end() && !m["VulNames"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["VulNames"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["VulNames"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      vulNames = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~OperateVulsRequest() = default;
};
class OperateVulsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  OperateVulsResponseBody() {}

  explicit OperateVulsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~OperateVulsResponseBody() = default;
};
class OperateVulsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<OperateVulsResponseBody> body{};

  OperateVulsResponse() {}

  explicit OperateVulsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        OperateVulsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<OperateVulsResponseBody>(model1);
      }
    }
  }


  virtual ~OperateVulsResponse() = default;
};
class OperationSuspEventsRequest : public Darabonba::Model {
public:
  shared_ptr<string> from{};
  shared_ptr<string> operation{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> subOperation{};
  shared_ptr<string> suspiciousEventIds{};
  shared_ptr<string> warnType{};

  OperationSuspEventsRequest() {}

  explicit OperationSuspEventsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (from) {
      res["From"] = boost::any(*from);
    }
    if (operation) {
      res["Operation"] = boost::any(*operation);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (subOperation) {
      res["SubOperation"] = boost::any(*subOperation);
    }
    if (suspiciousEventIds) {
      res["SuspiciousEventIds"] = boost::any(*suspiciousEventIds);
    }
    if (warnType) {
      res["WarnType"] = boost::any(*warnType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("From") != m.end() && !m["From"].empty()) {
      from = make_shared<string>(boost::any_cast<string>(m["From"]));
    }
    if (m.find("Operation") != m.end() && !m["Operation"].empty()) {
      operation = make_shared<string>(boost::any_cast<string>(m["Operation"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("SubOperation") != m.end() && !m["SubOperation"].empty()) {
      subOperation = make_shared<string>(boost::any_cast<string>(m["SubOperation"]));
    }
    if (m.find("SuspiciousEventIds") != m.end() && !m["SuspiciousEventIds"].empty()) {
      suspiciousEventIds = make_shared<string>(boost::any_cast<string>(m["SuspiciousEventIds"]));
    }
    if (m.find("WarnType") != m.end() && !m["WarnType"].empty()) {
      warnType = make_shared<string>(boost::any_cast<string>(m["WarnType"]));
    }
  }


  virtual ~OperationSuspEventsRequest() = default;
};
class OperationSuspEventsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> accessCode{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  OperationSuspEventsResponseBody() {}

  explicit OperationSuspEventsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accessCode) {
      res["AccessCode"] = boost::any(*accessCode);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccessCode") != m.end() && !m["AccessCode"].empty()) {
      accessCode = make_shared<string>(boost::any_cast<string>(m["AccessCode"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~OperationSuspEventsResponseBody() = default;
};
class OperationSuspEventsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<OperationSuspEventsResponseBody> body{};

  OperationSuspEventsResponse() {}

  explicit OperationSuspEventsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        OperationSuspEventsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<OperationSuspEventsResponseBody>(model1);
      }
    }
  }


  virtual ~OperationSuspEventsResponse() = default;
};
class PauseClientRequest : public Darabonba::Model {
public:
  shared_ptr<string> uuids{};
  shared_ptr<string> value{};

  PauseClientRequest() {}

  explicit PauseClientRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    if (value) {
      res["Value"] = boost::any(*value);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
    if (m.find("Value") != m.end() && !m["Value"].empty()) {
      value = make_shared<string>(boost::any_cast<string>(m["Value"]));
    }
  }


  virtual ~PauseClientRequest() = default;
};
class PauseClientResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  PauseClientResponseBody() {}

  explicit PauseClientResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~PauseClientResponseBody() = default;
};
class PauseClientResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<PauseClientResponseBody> body{};

  PauseClientResponse() {}

  explicit PauseClientResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        PauseClientResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<PauseClientResponseBody>(model1);
      }
    }
  }


  virtual ~PauseClientResponse() = default;
};
class QueryGroupIdByGroupNameRequest : public Darabonba::Model {
public:
  shared_ptr<string> groupName{};
  shared_ptr<string> sourceIp{};

  QueryGroupIdByGroupNameRequest() {}

  explicit QueryGroupIdByGroupNameRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupName) {
      res["GroupName"] = boost::any(*groupName);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupName") != m.end() && !m["GroupName"].empty()) {
      groupName = make_shared<string>(boost::any_cast<string>(m["GroupName"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~QueryGroupIdByGroupNameRequest() = default;
};
class QueryGroupIdByGroupNameResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> groupId{};
  shared_ptr<string> requestId{};

  QueryGroupIdByGroupNameResponseBody() {}

  explicit QueryGroupIdByGroupNameResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~QueryGroupIdByGroupNameResponseBody() = default;
};
class QueryGroupIdByGroupNameResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<QueryGroupIdByGroupNameResponseBody> body{};

  QueryGroupIdByGroupNameResponse() {}

  explicit QueryGroupIdByGroupNameResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        QueryGroupIdByGroupNameResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<QueryGroupIdByGroupNameResponseBody>(model1);
      }
    }
  }


  virtual ~QueryGroupIdByGroupNameResponse() = default;
};
class RefreshAssetsRequest : public Darabonba::Model {
public:
  shared_ptr<string> assetType{};

  RefreshAssetsRequest() {}

  explicit RefreshAssetsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (assetType) {
      res["AssetType"] = boost::any(*assetType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AssetType") != m.end() && !m["AssetType"].empty()) {
      assetType = make_shared<string>(boost::any_cast<string>(m["AssetType"]));
    }
  }


  virtual ~RefreshAssetsRequest() = default;
};
class RefreshAssetsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  RefreshAssetsResponseBody() {}

  explicit RefreshAssetsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~RefreshAssetsResponseBody() = default;
};
class RefreshAssetsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<RefreshAssetsResponseBody> body{};

  RefreshAssetsResponse() {}

  explicit RefreshAssetsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        RefreshAssetsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<RefreshAssetsResponseBody>(model1);
      }
    }
  }


  virtual ~RefreshAssetsResponse() = default;
};
class RefreshContainerAssetsRequest : public Darabonba::Model {
public:
  shared_ptr<string> assetType{};

  RefreshContainerAssetsRequest() {}

  explicit RefreshContainerAssetsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (assetType) {
      res["AssetType"] = boost::any(*assetType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AssetType") != m.end() && !m["AssetType"].empty()) {
      assetType = make_shared<string>(boost::any_cast<string>(m["AssetType"]));
    }
  }


  virtual ~RefreshContainerAssetsRequest() = default;
};
class RefreshContainerAssetsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  RefreshContainerAssetsResponseBody() {}

  explicit RefreshContainerAssetsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~RefreshContainerAssetsResponseBody() = default;
};
class RefreshContainerAssetsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<RefreshContainerAssetsResponseBody> body{};

  RefreshContainerAssetsResponse() {}

  explicit RefreshContainerAssetsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        RefreshContainerAssetsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<RefreshContainerAssetsResponseBody>(model1);
      }
    }
  }


  virtual ~RefreshContainerAssetsResponse() = default;
};
class RollbackSuspEventQuaraFileRequest : public Darabonba::Model {
public:
  shared_ptr<string> from{};
  shared_ptr<long> quaraFileId{};
  shared_ptr<string> sourceIp{};

  RollbackSuspEventQuaraFileRequest() {}

  explicit RollbackSuspEventQuaraFileRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (from) {
      res["From"] = boost::any(*from);
    }
    if (quaraFileId) {
      res["QuaraFileId"] = boost::any(*quaraFileId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("From") != m.end() && !m["From"].empty()) {
      from = make_shared<string>(boost::any_cast<string>(m["From"]));
    }
    if (m.find("QuaraFileId") != m.end() && !m["QuaraFileId"].empty()) {
      quaraFileId = make_shared<long>(boost::any_cast<long>(m["QuaraFileId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~RollbackSuspEventQuaraFileRequest() = default;
};
class RollbackSuspEventQuaraFileResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  RollbackSuspEventQuaraFileResponseBody() {}

  explicit RollbackSuspEventQuaraFileResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~RollbackSuspEventQuaraFileResponseBody() = default;
};
class RollbackSuspEventQuaraFileResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<RollbackSuspEventQuaraFileResponseBody> body{};

  RollbackSuspEventQuaraFileResponse() {}

  explicit RollbackSuspEventQuaraFileResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        RollbackSuspEventQuaraFileResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<RollbackSuspEventQuaraFileResponseBody>(model1);
      }
    }
  }


  virtual ~RollbackSuspEventQuaraFileResponse() = default;
};
class SasInstallCodeRequest : public Darabonba::Model {
public:
  shared_ptr<string> sourceIp{};

  SasInstallCodeRequest() {}

  explicit SasInstallCodeRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
  }


  virtual ~SasInstallCodeRequest() = default;
};
class SasInstallCodeResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<string> data{};

  SasInstallCodeResponseBody() {}

  explicit SasInstallCodeResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (data) {
      res["data"] = boost::any(*data);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("data") != m.end() && !m["data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["data"]));
    }
  }


  virtual ~SasInstallCodeResponseBody() = default;
};
class SasInstallCodeResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<SasInstallCodeResponseBody> body{};

  SasInstallCodeResponse() {}

  explicit SasInstallCodeResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        SasInstallCodeResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<SasInstallCodeResponseBody>(model1);
      }
    }
  }


  virtual ~SasInstallCodeResponse() = default;
};
class StartBaselineSecurityCheckRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> itemIds{};
  shared_ptr<string> lang{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> type{};

  StartBaselineSecurityCheckRequest() {}

  explicit StartBaselineSecurityCheckRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (itemIds) {
      res["ItemIds"] = boost::any(*itemIds);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ItemIds") != m.end() && !m["ItemIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["ItemIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ItemIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      itemIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<string>(boost::any_cast<string>(m["Type"]));
    }
  }


  virtual ~StartBaselineSecurityCheckRequest() = default;
};
class StartBaselineSecurityCheckResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  StartBaselineSecurityCheckResponseBody() {}

  explicit StartBaselineSecurityCheckResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~StartBaselineSecurityCheckResponseBody() = default;
};
class StartBaselineSecurityCheckResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<StartBaselineSecurityCheckResponseBody> body{};

  StartBaselineSecurityCheckResponse() {}

  explicit StartBaselineSecurityCheckResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        StartBaselineSecurityCheckResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<StartBaselineSecurityCheckResponseBody>(model1);
      }
    }
  }


  virtual ~StartBaselineSecurityCheckResponse() = default;
};
class StartImageVulScanRequest : public Darabonba::Model {
public:
  shared_ptr<string> imageDigest{};
  shared_ptr<string> imageLayer{};
  shared_ptr<string> imageTag{};
  shared_ptr<string> lang{};
  shared_ptr<vector<string>> registryTypes{};
  shared_ptr<string> repName{};
  shared_ptr<string> repoId{};
  shared_ptr<string> repoInstanceId{};
  shared_ptr<string> repoNamespace{};
  shared_ptr<string> repoRegionId{};

  StartImageVulScanRequest() {}

  explicit StartImageVulScanRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (imageDigest) {
      res["ImageDigest"] = boost::any(*imageDigest);
    }
    if (imageLayer) {
      res["ImageLayer"] = boost::any(*imageLayer);
    }
    if (imageTag) {
      res["ImageTag"] = boost::any(*imageTag);
    }
    if (lang) {
      res["Lang"] = boost::any(*lang);
    }
    if (registryTypes) {
      res["RegistryTypes"] = boost::any(*registryTypes);
    }
    if (repName) {
      res["RepName"] = boost::any(*repName);
    }
    if (repoId) {
      res["RepoId"] = boost::any(*repoId);
    }
    if (repoInstanceId) {
      res["RepoInstanceId"] = boost::any(*repoInstanceId);
    }
    if (repoNamespace) {
      res["RepoNamespace"] = boost::any(*repoNamespace);
    }
    if (repoRegionId) {
      res["RepoRegionId"] = boost::any(*repoRegionId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ImageDigest") != m.end() && !m["ImageDigest"].empty()) {
      imageDigest = make_shared<string>(boost::any_cast<string>(m["ImageDigest"]));
    }
    if (m.find("ImageLayer") != m.end() && !m["ImageLayer"].empty()) {
      imageLayer = make_shared<string>(boost::any_cast<string>(m["ImageLayer"]));
    }
    if (m.find("ImageTag") != m.end() && !m["ImageTag"].empty()) {
      imageTag = make_shared<string>(boost::any_cast<string>(m["ImageTag"]));
    }
    if (m.find("Lang") != m.end() && !m["Lang"].empty()) {
      lang = make_shared<string>(boost::any_cast<string>(m["Lang"]));
    }
    if (m.find("RegistryTypes") != m.end() && !m["RegistryTypes"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["RegistryTypes"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["RegistryTypes"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      registryTypes = make_shared<vector<string>>(toVec1);
    }
    if (m.find("RepName") != m.end() && !m["RepName"].empty()) {
      repName = make_shared<string>(boost::any_cast<string>(m["RepName"]));
    }
    if (m.find("RepoId") != m.end() && !m["RepoId"].empty()) {
      repoId = make_shared<string>(boost::any_cast<string>(m["RepoId"]));
    }
    if (m.find("RepoInstanceId") != m.end() && !m["RepoInstanceId"].empty()) {
      repoInstanceId = make_shared<string>(boost::any_cast<string>(m["RepoInstanceId"]));
    }
    if (m.find("RepoNamespace") != m.end() && !m["RepoNamespace"].empty()) {
      repoNamespace = make_shared<string>(boost::any_cast<string>(m["RepoNamespace"]));
    }
    if (m.find("RepoRegionId") != m.end() && !m["RepoRegionId"].empty()) {
      repoRegionId = make_shared<string>(boost::any_cast<string>(m["RepoRegionId"]));
    }
  }


  virtual ~StartImageVulScanRequest() = default;
};
class StartImageVulScanResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  StartImageVulScanResponseBody() {}

  explicit StartImageVulScanResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~StartImageVulScanResponseBody() = default;
};
class StartImageVulScanResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<StartImageVulScanResponseBody> body{};

  StartImageVulScanResponse() {}

  explicit StartImageVulScanResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        StartImageVulScanResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<StartImageVulScanResponseBody>(model1);
      }
    }
  }


  virtual ~StartImageVulScanResponse() = default;
};
class StartVirusScanTaskRequest : public Darabonba::Model {
public:
  shared_ptr<string> targetInfo{};

  StartVirusScanTaskRequest() {}

  explicit StartVirusScanTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (targetInfo) {
      res["TargetInfo"] = boost::any(*targetInfo);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("TargetInfo") != m.end() && !m["TargetInfo"].empty()) {
      targetInfo = make_shared<string>(boost::any_cast<string>(m["TargetInfo"]));
    }
  }


  virtual ~StartVirusScanTaskRequest() = default;
};
class StartVirusScanTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};
  shared_ptr<long> scanTaskId{};

  StartVirusScanTaskResponseBody() {}

  explicit StartVirusScanTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (scanTaskId) {
      res["ScanTaskId"] = boost::any(*scanTaskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("ScanTaskId") != m.end() && !m["ScanTaskId"].empty()) {
      scanTaskId = make_shared<long>(boost::any_cast<long>(m["ScanTaskId"]));
    }
  }


  virtual ~StartVirusScanTaskResponseBody() = default;
};
class StartVirusScanTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<StartVirusScanTaskResponseBody> body{};

  StartVirusScanTaskResponse() {}

  explicit StartVirusScanTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        StartVirusScanTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<StartVirusScanTaskResponseBody>(model1);
      }
    }
  }


  virtual ~StartVirusScanTaskResponse() = default;
};
class UnbindAegisRequest : public Darabonba::Model {
public:
  shared_ptr<string> uuids{};

  UnbindAegisRequest() {}

  explicit UnbindAegisRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~UnbindAegisRequest() = default;
};
class UnbindAegisResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  UnbindAegisResponseBody() {}

  explicit UnbindAegisResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~UnbindAegisResponseBody() = default;
};
class UnbindAegisResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<UnbindAegisResponseBody> body{};

  UnbindAegisResponse() {}

  explicit UnbindAegisResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        UnbindAegisResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<UnbindAegisResponseBody>(model1);
      }
    }
  }


  virtual ~UnbindAegisResponse() = default;
};
class UninstallBackupClientRequest : public Darabonba::Model {
public:
  shared_ptr<string> policyVersion{};
  shared_ptr<string> uuid{};
  shared_ptr<vector<string>> uuidList{};

  UninstallBackupClientRequest() {}

  explicit UninstallBackupClientRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (policyVersion) {
      res["PolicyVersion"] = boost::any(*policyVersion);
    }
    if (uuid) {
      res["Uuid"] = boost::any(*uuid);
    }
    if (uuidList) {
      res["UuidList"] = boost::any(*uuidList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PolicyVersion") != m.end() && !m["PolicyVersion"].empty()) {
      policyVersion = make_shared<string>(boost::any_cast<string>(m["PolicyVersion"]));
    }
    if (m.find("Uuid") != m.end() && !m["Uuid"].empty()) {
      uuid = make_shared<string>(boost::any_cast<string>(m["Uuid"]));
    }
    if (m.find("UuidList") != m.end() && !m["UuidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["UuidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["UuidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      uuidList = make_shared<vector<string>>(toVec1);
    }
  }


  virtual ~UninstallBackupClientRequest() = default;
};
class UninstallBackupClientResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  UninstallBackupClientResponseBody() {}

  explicit UninstallBackupClientResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~UninstallBackupClientResponseBody() = default;
};
class UninstallBackupClientResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<UninstallBackupClientResponseBody> body{};

  UninstallBackupClientResponse() {}

  explicit UninstallBackupClientResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        UninstallBackupClientResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<UninstallBackupClientResponseBody>(model1);
      }
    }
  }


  virtual ~UninstallBackupClientResponse() = default;
};
class ValidateHcWarningsRequest : public Darabonba::Model {
public:
  shared_ptr<string> riskIds{};
  shared_ptr<string> sourceIp{};
  shared_ptr<string> uuids{};

  ValidateHcWarningsRequest() {}

  explicit ValidateHcWarningsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (riskIds) {
      res["RiskIds"] = boost::any(*riskIds);
    }
    if (sourceIp) {
      res["SourceIp"] = boost::any(*sourceIp);
    }
    if (uuids) {
      res["Uuids"] = boost::any(*uuids);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RiskIds") != m.end() && !m["RiskIds"].empty()) {
      riskIds = make_shared<string>(boost::any_cast<string>(m["RiskIds"]));
    }
    if (m.find("SourceIp") != m.end() && !m["SourceIp"].empty()) {
      sourceIp = make_shared<string>(boost::any_cast<string>(m["SourceIp"]));
    }
    if (m.find("Uuids") != m.end() && !m["Uuids"].empty()) {
      uuids = make_shared<string>(boost::any_cast<string>(m["Uuids"]));
    }
  }


  virtual ~ValidateHcWarningsRequest() = default;
};
class ValidateHcWarningsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> requestId{};

  ValidateHcWarningsResponseBody() {}

  explicit ValidateHcWarningsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~ValidateHcWarningsResponseBody() = default;
};
class ValidateHcWarningsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<ValidateHcWarningsResponseBody> body{};

  ValidateHcWarningsResponse() {}

  explicit ValidateHcWarningsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {
    if (!headers) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("headers is required.")));
    }
    if (!body) {
      BOOST_THROW_EXCEPTION(boost::enable_error_info(std::runtime_error("body is required.")));
    }
  }

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ValidateHcWarningsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ValidateHcWarningsResponseBody>(model1);
      }
    }
  }


  virtual ~ValidateHcWarningsResponse() = default;
};
class Client : Alibabacloud_OpenApi::Client {
public:
  explicit Client(const shared_ptr<Alibabacloud_OpenApi::Config>& config);
  string getEndpoint(shared_ptr<string> productId,
                     shared_ptr<string> regionId,
                     shared_ptr<string> endpointRule,
                     shared_ptr<string> network,
                     shared_ptr<string> suffix,
                     shared_ptr<map<string, string>> endpointMap,
                     shared_ptr<string> endpoint);
  AddVpcHoneyPotResponse addVpcHoneyPotWithOptions(shared_ptr<AddVpcHoneyPotRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  AddVpcHoneyPotResponse addVpcHoneyPot(shared_ptr<AddVpcHoneyPotRequest> request);
  CheckSecurityEventIdResponse checkSecurityEventIdWithOptions(shared_ptr<CheckSecurityEventIdRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CheckSecurityEventIdResponse checkSecurityEventId(shared_ptr<CheckSecurityEventIdRequest> request);
  CreateAntiBruteForceRuleResponse createAntiBruteForceRuleWithOptions(shared_ptr<CreateAntiBruteForceRuleRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateAntiBruteForceRuleResponse createAntiBruteForceRule(shared_ptr<CreateAntiBruteForceRuleRequest> request);
  CreateBackupPolicyResponse createBackupPolicyWithOptions(shared_ptr<CreateBackupPolicyRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateBackupPolicyResponse createBackupPolicy(shared_ptr<CreateBackupPolicyRequest> request);
  CreateOrUpdateAssetGroupResponse createOrUpdateAssetGroupWithOptions(shared_ptr<CreateOrUpdateAssetGroupRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateOrUpdateAssetGroupResponse createOrUpdateAssetGroup(shared_ptr<CreateOrUpdateAssetGroupRequest> request);
  CreateServiceLinkedRoleResponse createServiceLinkedRoleWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateServiceLinkedRoleResponse createServiceLinkedRole();
  CreateSimilarSecurityEventsQueryTaskResponse createSimilarSecurityEventsQueryTaskWithOptions(shared_ptr<CreateSimilarSecurityEventsQueryTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateSimilarSecurityEventsQueryTaskResponse createSimilarSecurityEventsQueryTask(shared_ptr<CreateSimilarSecurityEventsQueryTaskRequest> request);
  DeleteBackupPolicyResponse deleteBackupPolicyWithOptions(shared_ptr<DeleteBackupPolicyRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteBackupPolicyResponse deleteBackupPolicy(shared_ptr<DeleteBackupPolicyRequest> request);
  DeleteBackupPolicyMachineResponse deleteBackupPolicyMachineWithOptions(shared_ptr<DeleteBackupPolicyMachineRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteBackupPolicyMachineResponse deleteBackupPolicyMachine(shared_ptr<DeleteBackupPolicyMachineRequest> request);
  DeleteGroupResponse deleteGroupWithOptions(shared_ptr<DeleteGroupRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteGroupResponse deleteGroup(shared_ptr<DeleteGroupRequest> request);
  DeleteLoginBaseConfigResponse deleteLoginBaseConfigWithOptions(shared_ptr<DeleteLoginBaseConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteLoginBaseConfigResponse deleteLoginBaseConfig(shared_ptr<DeleteLoginBaseConfigRequest> request);
  DeleteStrategyResponse deleteStrategyWithOptions(shared_ptr<DeleteStrategyRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteStrategyResponse deleteStrategy(shared_ptr<DeleteStrategyRequest> request);
  DeleteTagWithUuidResponse deleteTagWithUuidWithOptions(shared_ptr<DeleteTagWithUuidRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteTagWithUuidResponse deleteTagWithUuid(shared_ptr<DeleteTagWithUuidRequest> request);
  DeleteVpcHoneyPotResponse deleteVpcHoneyPotWithOptions(shared_ptr<DeleteVpcHoneyPotRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteVpcHoneyPotResponse deleteVpcHoneyPot(shared_ptr<DeleteVpcHoneyPotRequest> request);
  DescribeAccesskeyLeakListResponse describeAccesskeyLeakListWithOptions(shared_ptr<DescribeAccesskeyLeakListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeAccesskeyLeakListResponse describeAccesskeyLeakList(shared_ptr<DescribeAccesskeyLeakListRequest> request);
  DescribeAffectedMaliciousFileImagesResponse describeAffectedMaliciousFileImagesWithOptions(shared_ptr<DescribeAffectedMaliciousFileImagesRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeAffectedMaliciousFileImagesResponse describeAffectedMaliciousFileImages(shared_ptr<DescribeAffectedMaliciousFileImagesRequest> request);
  DescribeAlarmEventDetailResponse describeAlarmEventDetailWithOptions(shared_ptr<DescribeAlarmEventDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeAlarmEventDetailResponse describeAlarmEventDetail(shared_ptr<DescribeAlarmEventDetailRequest> request);
  DescribeAlarmEventListResponse describeAlarmEventListWithOptions(shared_ptr<DescribeAlarmEventListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeAlarmEventListResponse describeAlarmEventList(shared_ptr<DescribeAlarmEventListRequest> request);
  DescribeAllEntityResponse describeAllEntityWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeAllEntityResponse describeAllEntity();
  DescribeAllGroupsResponse describeAllGroupsWithOptions(shared_ptr<DescribeAllGroupsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeAllGroupsResponse describeAllGroups(shared_ptr<DescribeAllGroupsRequest> request);
  DescribeAntiBruteForceRulesResponse describeAntiBruteForceRulesWithOptions(shared_ptr<DescribeAntiBruteForceRulesRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeAntiBruteForceRulesResponse describeAntiBruteForceRules(shared_ptr<DescribeAntiBruteForceRulesRequest> request);
  DescribeAssetDetailByUuidResponse describeAssetDetailByUuidWithOptions(shared_ptr<DescribeAssetDetailByUuidRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeAssetDetailByUuidResponse describeAssetDetailByUuid(shared_ptr<DescribeAssetDetailByUuidRequest> request);
  DescribeAssetDetailByUuidsResponse describeAssetDetailByUuidsWithOptions(shared_ptr<DescribeAssetDetailByUuidsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeAssetDetailByUuidsResponse describeAssetDetailByUuids(shared_ptr<DescribeAssetDetailByUuidsRequest> request);
  DescribeAssetSummaryResponse describeAssetSummaryWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeAssetSummaryResponse describeAssetSummary();
  DescribeAttackAnalysisDataResponse describeAttackAnalysisDataWithOptions(shared_ptr<DescribeAttackAnalysisDataRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeAttackAnalysisDataResponse describeAttackAnalysisData(shared_ptr<DescribeAttackAnalysisDataRequest> request);
  DescribeAutoDelConfigResponse describeAutoDelConfigWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeAutoDelConfigResponse describeAutoDelConfig();
  DescribeBackupClientsResponse describeBackupClientsWithOptions(shared_ptr<DescribeBackupClientsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeBackupClientsResponse describeBackupClients(shared_ptr<DescribeBackupClientsRequest> request);
  DescribeBackupFilesResponse describeBackupFilesWithOptions(shared_ptr<DescribeBackupFilesRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeBackupFilesResponse describeBackupFiles(shared_ptr<DescribeBackupFilesRequest> request);
  DescribeBackupPoliciesResponse describeBackupPoliciesWithOptions(shared_ptr<DescribeBackupPoliciesRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeBackupPoliciesResponse describeBackupPolicies(shared_ptr<DescribeBackupPoliciesRequest> request);
  DescribeBackupRestoreCountResponse describeBackupRestoreCountWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeBackupRestoreCountResponse describeBackupRestoreCount();
  DescribeBruteForceSummaryResponse describeBruteForceSummaryWithOptions(shared_ptr<DescribeBruteForceSummaryRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeBruteForceSummaryResponse describeBruteForceSummary(shared_ptr<DescribeBruteForceSummaryRequest> request);
  DescribeCheckEcsWarningsResponse describeCheckEcsWarningsWithOptions(shared_ptr<DescribeCheckEcsWarningsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeCheckEcsWarningsResponse describeCheckEcsWarnings(shared_ptr<DescribeCheckEcsWarningsRequest> request);
  DescribeCheckWarningDetailResponse describeCheckWarningDetailWithOptions(shared_ptr<DescribeCheckWarningDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeCheckWarningDetailResponse describeCheckWarningDetail(shared_ptr<DescribeCheckWarningDetailRequest> request);
  DescribeCheckWarningSummaryResponse describeCheckWarningSummaryWithOptions(shared_ptr<DescribeCheckWarningSummaryRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeCheckWarningSummaryResponse describeCheckWarningSummary(shared_ptr<DescribeCheckWarningSummaryRequest> request);
  DescribeCheckWarningsResponse describeCheckWarningsWithOptions(shared_ptr<DescribeCheckWarningsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeCheckWarningsResponse describeCheckWarnings(shared_ptr<DescribeCheckWarningsRequest> request);
  DescribeCloudCenterInstancesResponse describeCloudCenterInstancesWithOptions(shared_ptr<DescribeCloudCenterInstancesRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeCloudCenterInstancesResponse describeCloudCenterInstances(shared_ptr<DescribeCloudCenterInstancesRequest> request);
  DescribeCloudProductFieldStatisticsResponse describeCloudProductFieldStatisticsWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeCloudProductFieldStatisticsResponse describeCloudProductFieldStatistics();
  DescribeConcernNecessityResponse describeConcernNecessityWithOptions(shared_ptr<DescribeConcernNecessityRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeConcernNecessityResponse describeConcernNecessity(shared_ptr<DescribeConcernNecessityRequest> request);
  DescribeContainerStatisticsResponse describeContainerStatisticsWithOptions(shared_ptr<DescribeContainerStatisticsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeContainerStatisticsResponse describeContainerStatistics(shared_ptr<DescribeContainerStatisticsRequest> request);
  DescribeCriteriaResponse describeCriteriaWithOptions(shared_ptr<DescribeCriteriaRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeCriteriaResponse describeCriteria(shared_ptr<DescribeCriteriaRequest> request);
  DescribeDialogMessagesResponse describeDialogMessagesWithOptions(shared_ptr<DescribeDialogMessagesRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeDialogMessagesResponse describeDialogMessages(shared_ptr<DescribeDialogMessagesRequest> request);
  DescribeDingTalkResponse describeDingTalkWithOptions(shared_ptr<DescribeDingTalkRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeDingTalkResponse describeDingTalk(shared_ptr<DescribeDingTalkRequest> request);
  DescribeDomainCountResponse describeDomainCountWithOptions(shared_ptr<DescribeDomainCountRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeDomainCountResponse describeDomainCount(shared_ptr<DescribeDomainCountRequest> request);
  DescribeDomainDetailResponse describeDomainDetailWithOptions(shared_ptr<DescribeDomainDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeDomainDetailResponse describeDomainDetail(shared_ptr<DescribeDomainDetailRequest> request);
  DescribeDomainListResponse describeDomainListWithOptions(shared_ptr<DescribeDomainListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeDomainListResponse describeDomainList(shared_ptr<DescribeDomainListRequest> request);
  DescribeEmgVulItemResponse describeEmgVulItemWithOptions(shared_ptr<DescribeEmgVulItemRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeEmgVulItemResponse describeEmgVulItem(shared_ptr<DescribeEmgVulItemRequest> request);
  DescribeExportInfoResponse describeExportInfoWithOptions(shared_ptr<DescribeExportInfoRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeExportInfoResponse describeExportInfo(shared_ptr<DescribeExportInfoRequest> request);
  DescribeExposedInstanceCriteriaResponse describeExposedInstanceCriteriaWithOptions(shared_ptr<DescribeExposedInstanceCriteriaRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeExposedInstanceCriteriaResponse describeExposedInstanceCriteria(shared_ptr<DescribeExposedInstanceCriteriaRequest> request);
  DescribeExposedInstanceDetailResponse describeExposedInstanceDetailWithOptions(shared_ptr<DescribeExposedInstanceDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeExposedInstanceDetailResponse describeExposedInstanceDetail(shared_ptr<DescribeExposedInstanceDetailRequest> request);
  DescribeExposedInstanceListResponse describeExposedInstanceListWithOptions(shared_ptr<DescribeExposedInstanceListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeExposedInstanceListResponse describeExposedInstanceList(shared_ptr<DescribeExposedInstanceListRequest> request);
  DescribeExposedStatisticsResponse describeExposedStatisticsWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeExposedStatisticsResponse describeExposedStatistics();
  DescribeExposedStatisticsDetailResponse describeExposedStatisticsDetailWithOptions(shared_ptr<DescribeExposedStatisticsDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeExposedStatisticsDetailResponse describeExposedStatisticsDetail(shared_ptr<DescribeExposedStatisticsDetailRequest> request);
  DescribeFieldStatisticsResponse describeFieldStatisticsWithOptions(shared_ptr<DescribeFieldStatisticsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeFieldStatisticsResponse describeFieldStatistics(shared_ptr<DescribeFieldStatisticsRequest> request);
  DescribeGroupedContainerInstancesResponse describeGroupedContainerInstancesWithOptions(shared_ptr<DescribeGroupedContainerInstancesRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeGroupedContainerInstancesResponse describeGroupedContainerInstances(shared_ptr<DescribeGroupedContainerInstancesRequest> request);
  DescribeGroupedInstancesResponse describeGroupedInstancesWithOptions(shared_ptr<DescribeGroupedInstancesRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeGroupedInstancesResponse describeGroupedInstances(shared_ptr<DescribeGroupedInstancesRequest> request);
  DescribeGroupedMaliciousFilesResponse describeGroupedMaliciousFilesWithOptions(shared_ptr<DescribeGroupedMaliciousFilesRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeGroupedMaliciousFilesResponse describeGroupedMaliciousFiles(shared_ptr<DescribeGroupedMaliciousFilesRequest> request);
  DescribeGroupedTagsResponse describeGroupedTagsWithOptions(shared_ptr<DescribeGroupedTagsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeGroupedTagsResponse describeGroupedTags(shared_ptr<DescribeGroupedTagsRequest> request);
  DescribeGroupedVulResponse describeGroupedVulWithOptions(shared_ptr<DescribeGroupedVulRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeGroupedVulResponse describeGroupedVul(shared_ptr<DescribeGroupedVulRequest> request);
  DescribeHoneyPotAuthResponse describeHoneyPotAuthWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeHoneyPotAuthResponse describeHoneyPotAuth();
  DescribeHoneyPotSuspStatisticsResponse describeHoneyPotSuspStatisticsWithOptions(shared_ptr<DescribeHoneyPotSuspStatisticsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeHoneyPotSuspStatisticsResponse describeHoneyPotSuspStatistics(shared_ptr<DescribeHoneyPotSuspStatisticsRequest> request);
  DescribeImageBaselineCheckSummaryResponse describeImageBaselineCheckSummaryWithOptions(shared_ptr<DescribeImageBaselineCheckSummaryRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeImageBaselineCheckSummaryResponse describeImageBaselineCheckSummary(shared_ptr<DescribeImageBaselineCheckSummaryRequest> request);
  DescribeImageFixTaskResponse describeImageFixTaskWithOptions(shared_ptr<DescribeImageFixTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeImageFixTaskResponse describeImageFixTask(shared_ptr<DescribeImageFixTaskRequest> request);
  DescribeImageGroupedVulListResponse describeImageGroupedVulListWithOptions(shared_ptr<DescribeImageGroupedVulListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeImageGroupedVulListResponse describeImageGroupedVulList(shared_ptr<DescribeImageGroupedVulListRequest> request);
  DescribeImageListWithBaselineNameResponse describeImageListWithBaselineNameWithOptions(shared_ptr<DescribeImageListWithBaselineNameRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeImageListWithBaselineNameResponse describeImageListWithBaselineName(shared_ptr<DescribeImageListWithBaselineNameRequest> request);
  DescribeImageScanAuthCountResponse describeImageScanAuthCountWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeImageScanAuthCountResponse describeImageScanAuthCount();
  DescribeImageStatisticsResponse describeImageStatisticsWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeImageStatisticsResponse describeImageStatistics();
  DescribeImageVulListResponse describeImageVulListWithOptions(shared_ptr<DescribeImageVulListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeImageVulListResponse describeImageVulList(shared_ptr<DescribeImageVulListRequest> request);
  DescribeInstallCaptchaResponse describeInstallCaptchaWithOptions(shared_ptr<DescribeInstallCaptchaRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeInstallCaptchaResponse describeInstallCaptcha(shared_ptr<DescribeInstallCaptchaRequest> request);
  DescribeInstallCodesResponse describeInstallCodesWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeInstallCodesResponse describeInstallCodes();
  DescribeInstanceAntiBruteForceRulesResponse describeInstanceAntiBruteForceRulesWithOptions(shared_ptr<DescribeInstanceAntiBruteForceRulesRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeInstanceAntiBruteForceRulesResponse describeInstanceAntiBruteForceRules(shared_ptr<DescribeInstanceAntiBruteForceRulesRequest> request);
  DescribeInstanceStatisticsResponse describeInstanceStatisticsWithOptions(shared_ptr<DescribeInstanceStatisticsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeInstanceStatisticsResponse describeInstanceStatistics(shared_ptr<DescribeInstanceStatisticsRequest> request);
  DescribeLogstoreStorageResponse describeLogstoreStorageWithOptions(shared_ptr<DescribeLogstoreStorageRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeLogstoreStorageResponse describeLogstoreStorage(shared_ptr<DescribeLogstoreStorageRequest> request);
  DescribeModuleConfigResponse describeModuleConfigWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeModuleConfigResponse describeModuleConfig();
  DescribeNoticeConfigResponse describeNoticeConfigWithOptions(shared_ptr<DescribeNoticeConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeNoticeConfigResponse describeNoticeConfig(shared_ptr<DescribeNoticeConfigRequest> request);
  DescribePropertyCountResponse describePropertyCountWithOptions(shared_ptr<DescribePropertyCountRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribePropertyCountResponse describePropertyCount(shared_ptr<DescribePropertyCountRequest> request);
  DescribePropertyCronDetailResponse describePropertyCronDetailWithOptions(shared_ptr<DescribePropertyCronDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribePropertyCronDetailResponse describePropertyCronDetail(shared_ptr<DescribePropertyCronDetailRequest> request);
  DescribePropertyPortDetailResponse describePropertyPortDetailWithOptions(shared_ptr<DescribePropertyPortDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribePropertyPortDetailResponse describePropertyPortDetail(shared_ptr<DescribePropertyPortDetailRequest> request);
  DescribePropertyPortItemResponse describePropertyPortItemWithOptions(shared_ptr<DescribePropertyPortItemRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribePropertyPortItemResponse describePropertyPortItem(shared_ptr<DescribePropertyPortItemRequest> request);
  DescribePropertyProcDetailResponse describePropertyProcDetailWithOptions(shared_ptr<DescribePropertyProcDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribePropertyProcDetailResponse describePropertyProcDetail(shared_ptr<DescribePropertyProcDetailRequest> request);
  DescribePropertyProcItemResponse describePropertyProcItemWithOptions(shared_ptr<DescribePropertyProcItemRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribePropertyProcItemResponse describePropertyProcItem(shared_ptr<DescribePropertyProcItemRequest> request);
  DescribePropertyScaDetailResponse describePropertyScaDetailWithOptions(shared_ptr<DescribePropertyScaDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribePropertyScaDetailResponse describePropertyScaDetail(shared_ptr<DescribePropertyScaDetailRequest> request);
  DescribePropertySoftwareDetailResponse describePropertySoftwareDetailWithOptions(shared_ptr<DescribePropertySoftwareDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribePropertySoftwareDetailResponse describePropertySoftwareDetail(shared_ptr<DescribePropertySoftwareDetailRequest> request);
  DescribePropertySoftwareItemResponse describePropertySoftwareItemWithOptions(shared_ptr<DescribePropertySoftwareItemRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribePropertySoftwareItemResponse describePropertySoftwareItem(shared_ptr<DescribePropertySoftwareItemRequest> request);
  DescribePropertyUsageNewestResponse describePropertyUsageNewestWithOptions(shared_ptr<DescribePropertyUsageNewestRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribePropertyUsageNewestResponse describePropertyUsageNewest(shared_ptr<DescribePropertyUsageNewestRequest> request);
  DescribePropertyUserDetailResponse describePropertyUserDetailWithOptions(shared_ptr<DescribePropertyUserDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribePropertyUserDetailResponse describePropertyUserDetail(shared_ptr<DescribePropertyUserDetailRequest> request);
  DescribePropertyUserItemResponse describePropertyUserItemWithOptions(shared_ptr<DescribePropertyUserItemRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribePropertyUserItemResponse describePropertyUserItem(shared_ptr<DescribePropertyUserItemRequest> request);
  DescribeRestoreJobsResponse describeRestoreJobsWithOptions(shared_ptr<DescribeRestoreJobsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeRestoreJobsResponse describeRestoreJobs(shared_ptr<DescribeRestoreJobsRequest> request);
  DescribeRiskCheckItemResultResponse describeRiskCheckItemResultWithOptions(shared_ptr<DescribeRiskCheckItemResultRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeRiskCheckItemResultResponse describeRiskCheckItemResult(shared_ptr<DescribeRiskCheckItemResultRequest> request);
  DescribeRiskCheckResultResponse describeRiskCheckResultWithOptions(shared_ptr<DescribeRiskCheckResultRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeRiskCheckResultResponse describeRiskCheckResult(shared_ptr<DescribeRiskCheckResultRequest> request);
  DescribeRiskCheckSummaryResponse describeRiskCheckSummaryWithOptions(shared_ptr<DescribeRiskCheckSummaryRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeRiskCheckSummaryResponse describeRiskCheckSummary(shared_ptr<DescribeRiskCheckSummaryRequest> request);
  DescribeRiskItemTypeResponse describeRiskItemTypeWithOptions(shared_ptr<DescribeRiskItemTypeRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeRiskItemTypeResponse describeRiskItemType(shared_ptr<DescribeRiskItemTypeRequest> request);
  DescribeRiskListCheckResultResponse describeRiskListCheckResultWithOptions(shared_ptr<DescribeRiskListCheckResultRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeRiskListCheckResultResponse describeRiskListCheckResult(shared_ptr<DescribeRiskListCheckResultRequest> request);
  DescribeScanTaskProgressResponse describeScanTaskProgressWithOptions(shared_ptr<DescribeScanTaskProgressRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeScanTaskProgressResponse describeScanTaskProgress(shared_ptr<DescribeScanTaskProgressRequest> request);
  DescribeSearchConditionResponse describeSearchConditionWithOptions(shared_ptr<DescribeSearchConditionRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSearchConditionResponse describeSearchCondition(shared_ptr<DescribeSearchConditionRequest> request);
  DescribeSecureSuggestionResponse describeSecureSuggestionWithOptions(shared_ptr<DescribeSecureSuggestionRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSecureSuggestionResponse describeSecureSuggestion(shared_ptr<DescribeSecureSuggestionRequest> request);
  DescribeSecurityCheckScheduleConfigResponse describeSecurityCheckScheduleConfigWithOptions(shared_ptr<DescribeSecurityCheckScheduleConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSecurityCheckScheduleConfigResponse describeSecurityCheckScheduleConfig(shared_ptr<DescribeSecurityCheckScheduleConfigRequest> request);
  DescribeSecurityEventOperationStatusResponse describeSecurityEventOperationStatusWithOptions(shared_ptr<DescribeSecurityEventOperationStatusRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSecurityEventOperationStatusResponse describeSecurityEventOperationStatus(shared_ptr<DescribeSecurityEventOperationStatusRequest> request);
  DescribeSecurityEventOperationsResponse describeSecurityEventOperationsWithOptions(shared_ptr<DescribeSecurityEventOperationsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSecurityEventOperationsResponse describeSecurityEventOperations(shared_ptr<DescribeSecurityEventOperationsRequest> request);
  DescribeSecurityStatInfoResponse describeSecurityStatInfoWithOptions(shared_ptr<DescribeSecurityStatInfoRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSecurityStatInfoResponse describeSecurityStatInfo(shared_ptr<DescribeSecurityStatInfoRequest> request);
  DescribeServiceLinkedRoleStatusResponse describeServiceLinkedRoleStatusWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeServiceLinkedRoleStatusResponse describeServiceLinkedRoleStatus();
  DescribeSimilarEventScenariosResponse describeSimilarEventScenariosWithOptions(shared_ptr<DescribeSimilarEventScenariosRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSimilarEventScenariosResponse describeSimilarEventScenarios(shared_ptr<DescribeSimilarEventScenariosRequest> request);
  DescribeSimilarSecurityEventsResponse describeSimilarSecurityEventsWithOptions(shared_ptr<DescribeSimilarSecurityEventsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSimilarSecurityEventsResponse describeSimilarSecurityEvents(shared_ptr<DescribeSimilarSecurityEventsRequest> request);
  DescribeStrategyResponse describeStrategyWithOptions(shared_ptr<DescribeStrategyRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeStrategyResponse describeStrategy(shared_ptr<DescribeStrategyRequest> request);
  DescribeStrategyExecDetailResponse describeStrategyExecDetailWithOptions(shared_ptr<DescribeStrategyExecDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeStrategyExecDetailResponse describeStrategyExecDetail(shared_ptr<DescribeStrategyExecDetailRequest> request);
  DescribeStrategyTargetResponse describeStrategyTargetWithOptions(shared_ptr<DescribeStrategyTargetRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeStrategyTargetResponse describeStrategyTarget(shared_ptr<DescribeStrategyTargetRequest> request);
  DescribeSummaryInfoResponse describeSummaryInfoWithOptions(shared_ptr<DescribeSummaryInfoRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSummaryInfoResponse describeSummaryInfo(shared_ptr<DescribeSummaryInfoRequest> request);
  DescribeSupportRegionResponse describeSupportRegionWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSupportRegionResponse describeSupportRegion();
  DescribeSuspEventDetailResponse describeSuspEventDetailWithOptions(shared_ptr<DescribeSuspEventDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSuspEventDetailResponse describeSuspEventDetail(shared_ptr<DescribeSuspEventDetailRequest> request);
  DescribeSuspEventQuaraFilesResponse describeSuspEventQuaraFilesWithOptions(shared_ptr<DescribeSuspEventQuaraFilesRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSuspEventQuaraFilesResponse describeSuspEventQuaraFiles(shared_ptr<DescribeSuspEventQuaraFilesRequest> request);
  DescribeSuspEventsResponse describeSuspEventsWithOptions(shared_ptr<DescribeSuspEventsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSuspEventsResponse describeSuspEvents(shared_ptr<DescribeSuspEventsRequest> request);
  DescribeSuspiciousUUIDConfigResponse describeSuspiciousUUIDConfigWithOptions(shared_ptr<DescribeSuspiciousUUIDConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeSuspiciousUUIDConfigResponse describeSuspiciousUUIDConfig(shared_ptr<DescribeSuspiciousUUIDConfigRequest> request);
  DescribeUserBackupMachinesResponse describeUserBackupMachinesWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeUserBackupMachinesResponse describeUserBackupMachines();
  DescribeUserBaselineAuthorizationResponse describeUserBaselineAuthorizationWithOptions(shared_ptr<DescribeUserBaselineAuthorizationRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeUserBaselineAuthorizationResponse describeUserBaselineAuthorization(shared_ptr<DescribeUserBaselineAuthorizationRequest> request);
  DescribeUserLayoutAuthorizationResponse describeUserLayoutAuthorizationWithOptions(shared_ptr<DescribeUserLayoutAuthorizationRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeUserLayoutAuthorizationResponse describeUserLayoutAuthorization(shared_ptr<DescribeUserLayoutAuthorizationRequest> request);
  DescribeVersionConfigResponse describeVersionConfigWithOptions(shared_ptr<DescribeVersionConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeVersionConfigResponse describeVersionConfig(shared_ptr<DescribeVersionConfigRequest> request);
  DescribeVpcHoneyPotCriteriaResponse describeVpcHoneyPotCriteriaWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeVpcHoneyPotCriteriaResponse describeVpcHoneyPotCriteria();
  DescribeVpcHoneyPotListResponse describeVpcHoneyPotListWithOptions(shared_ptr<DescribeVpcHoneyPotListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeVpcHoneyPotListResponse describeVpcHoneyPotList(shared_ptr<DescribeVpcHoneyPotListRequest> request);
  DescribeVpcListResponse describeVpcListWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeVpcListResponse describeVpcList();
  DescribeVulDetailsResponse describeVulDetailsWithOptions(shared_ptr<DescribeVulDetailsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeVulDetailsResponse describeVulDetails(shared_ptr<DescribeVulDetailsRequest> request);
  DescribeVulExportInfoResponse describeVulExportInfoWithOptions(shared_ptr<DescribeVulExportInfoRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeVulExportInfoResponse describeVulExportInfo(shared_ptr<DescribeVulExportInfoRequest> request);
  DescribeVulListResponse describeVulListWithOptions(shared_ptr<DescribeVulListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeVulListResponse describeVulList(shared_ptr<DescribeVulListRequest> request);
  DescribeVulWhitelistResponse describeVulWhitelistWithOptions(shared_ptr<DescribeVulWhitelistRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeVulWhitelistResponse describeVulWhitelist(shared_ptr<DescribeVulWhitelistRequest> request);
  DescribeWarningMachinesResponse describeWarningMachinesWithOptions(shared_ptr<DescribeWarningMachinesRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeWarningMachinesResponse describeWarningMachines(shared_ptr<DescribeWarningMachinesRequest> request);
  DescribeWebLockBindListResponse describeWebLockBindListWithOptions(shared_ptr<DescribeWebLockBindListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeWebLockBindListResponse describeWebLockBindList(shared_ptr<DescribeWebLockBindListRequest> request);
  DescribeWebLockConfigListResponse describeWebLockConfigListWithOptions(shared_ptr<DescribeWebLockConfigListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeWebLockConfigListResponse describeWebLockConfigList(shared_ptr<DescribeWebLockConfigListRequest> request);
  ExportRecordResponse exportRecordWithOptions(shared_ptr<ExportRecordRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ExportRecordResponse exportRecord(shared_ptr<ExportRecordRequest> request);
  ExportVulResponse exportVulWithOptions(shared_ptr<ExportVulRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ExportVulResponse exportVul(shared_ptr<ExportVulRequest> request);
  FixCheckWarningsResponse fixCheckWarningsWithOptions(shared_ptr<FixCheckWarningsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  FixCheckWarningsResponse fixCheckWarnings(shared_ptr<FixCheckWarningsRequest> request);
  GetBackupStorageCountResponse getBackupStorageCountWithOptions(shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetBackupStorageCountResponse getBackupStorageCount();
  GetSuspiciousStatisticsResponse getSuspiciousStatisticsWithOptions(shared_ptr<GetSuspiciousStatisticsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetSuspiciousStatisticsResponse getSuspiciousStatistics(shared_ptr<GetSuspiciousStatisticsRequest> request);
  GetVulStatisticsResponse getVulStatisticsWithOptions(shared_ptr<GetVulStatisticsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetVulStatisticsResponse getVulStatistics(shared_ptr<GetVulStatisticsRequest> request);
  HandleSecurityEventsResponse handleSecurityEventsWithOptions(shared_ptr<HandleSecurityEventsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  HandleSecurityEventsResponse handleSecurityEvents(shared_ptr<HandleSecurityEventsRequest> request);
  HandleSimilarSecurityEventsResponse handleSimilarSecurityEventsWithOptions(shared_ptr<HandleSimilarSecurityEventsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  HandleSimilarSecurityEventsResponse handleSimilarSecurityEvents(shared_ptr<HandleSimilarSecurityEventsRequest> request);
  IgnoreHcCheckWarningsResponse ignoreHcCheckWarningsWithOptions(shared_ptr<IgnoreHcCheckWarningsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  IgnoreHcCheckWarningsResponse ignoreHcCheckWarnings(shared_ptr<IgnoreHcCheckWarningsRequest> request);
  InstallBackupClientResponse installBackupClientWithOptions(shared_ptr<InstallBackupClientRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  InstallBackupClientResponse installBackupClient(shared_ptr<InstallBackupClientRequest> request);
  ModifyAntiBruteForceRuleResponse modifyAntiBruteForceRuleWithOptions(shared_ptr<ModifyAntiBruteForceRuleRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyAntiBruteForceRuleResponse modifyAntiBruteForceRule(shared_ptr<ModifyAntiBruteForceRuleRequest> request);
  ModifyAssetGroupResponse modifyAssetGroupWithOptions(shared_ptr<ModifyAssetGroupRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyAssetGroupResponse modifyAssetGroup(shared_ptr<ModifyAssetGroupRequest> request);
  ModifyBackupPolicyResponse modifyBackupPolicyWithOptions(shared_ptr<ModifyBackupPolicyRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyBackupPolicyResponse modifyBackupPolicy(shared_ptr<ModifyBackupPolicyRequest> request);
  ModifyBackupPolicyStatusResponse modifyBackupPolicyStatusWithOptions(shared_ptr<ModifyBackupPolicyStatusRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyBackupPolicyStatusResponse modifyBackupPolicyStatus(shared_ptr<ModifyBackupPolicyStatusRequest> request);
  ModifyCreateVulWhitelistResponse modifyCreateVulWhitelistWithOptions(shared_ptr<ModifyCreateVulWhitelistRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyCreateVulWhitelistResponse modifyCreateVulWhitelist(shared_ptr<ModifyCreateVulWhitelistRequest> request);
  ModifyEmgVulSubmitResponse modifyEmgVulSubmitWithOptions(shared_ptr<ModifyEmgVulSubmitRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyEmgVulSubmitResponse modifyEmgVulSubmit(shared_ptr<ModifyEmgVulSubmitRequest> request);
  ModifyGroupPropertyResponse modifyGroupPropertyWithOptions(shared_ptr<ModifyGroupPropertyRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyGroupPropertyResponse modifyGroupProperty(shared_ptr<ModifyGroupPropertyRequest> request);
  ModifyInstanceAntiBruteForceRuleResponse modifyInstanceAntiBruteForceRuleWithOptions(shared_ptr<ModifyInstanceAntiBruteForceRuleRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyInstanceAntiBruteForceRuleResponse modifyInstanceAntiBruteForceRule(shared_ptr<ModifyInstanceAntiBruteForceRuleRequest> request);
  ModifyLoginBaseConfigResponse modifyLoginBaseConfigWithOptions(shared_ptr<ModifyLoginBaseConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyLoginBaseConfigResponse modifyLoginBaseConfig(shared_ptr<ModifyLoginBaseConfigRequest> request);
  ModifyLoginSwitchConfigResponse modifyLoginSwitchConfigWithOptions(shared_ptr<ModifyLoginSwitchConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyLoginSwitchConfigResponse modifyLoginSwitchConfig(shared_ptr<ModifyLoginSwitchConfigRequest> request);
  ModifyOpenLogShipperResponse modifyOpenLogShipperWithOptions(shared_ptr<ModifyOpenLogShipperRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyOpenLogShipperResponse modifyOpenLogShipper(shared_ptr<ModifyOpenLogShipperRequest> request);
  ModifyOperateVulResponse modifyOperateVulWithOptions(shared_ptr<ModifyOperateVulRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyOperateVulResponse modifyOperateVul(shared_ptr<ModifyOperateVulRequest> request);
  ModifyPropertyScheduleConfigResponse modifyPropertyScheduleConfigWithOptions(shared_ptr<ModifyPropertyScheduleConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyPropertyScheduleConfigResponse modifyPropertyScheduleConfig(shared_ptr<ModifyPropertyScheduleConfigRequest> request);
  ModifyPushAllTaskResponse modifyPushAllTaskWithOptions(shared_ptr<ModifyPushAllTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyPushAllTaskResponse modifyPushAllTask(shared_ptr<ModifyPushAllTaskRequest> request);
  ModifyRiskCheckStatusResponse modifyRiskCheckStatusWithOptions(shared_ptr<ModifyRiskCheckStatusRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyRiskCheckStatusResponse modifyRiskCheckStatus(shared_ptr<ModifyRiskCheckStatusRequest> request);
  ModifyRiskSingleResultStatusResponse modifyRiskSingleResultStatusWithOptions(shared_ptr<ModifyRiskSingleResultStatusRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyRiskSingleResultStatusResponse modifyRiskSingleResultStatus(shared_ptr<ModifyRiskSingleResultStatusRequest> request);
  ModifySecurityCheckScheduleConfigResponse modifySecurityCheckScheduleConfigWithOptions(shared_ptr<ModifySecurityCheckScheduleConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifySecurityCheckScheduleConfigResponse modifySecurityCheckScheduleConfig(shared_ptr<ModifySecurityCheckScheduleConfigRequest> request);
  ModifyStartVulScanResponse modifyStartVulScanWithOptions(shared_ptr<ModifyStartVulScanRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyStartVulScanResponse modifyStartVulScan(shared_ptr<ModifyStartVulScanRequest> request);
  ModifyTagWithUuidResponse modifyTagWithUuidWithOptions(shared_ptr<ModifyTagWithUuidRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyTagWithUuidResponse modifyTagWithUuid(shared_ptr<ModifyTagWithUuidRequest> request);
  ModifyVpcHoneyPotResponse modifyVpcHoneyPotWithOptions(shared_ptr<ModifyVpcHoneyPotRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyVpcHoneyPotResponse modifyVpcHoneyPot(shared_ptr<ModifyVpcHoneyPotRequest> request);
  ModifyVulTargetConfigResponse modifyVulTargetConfigWithOptions(shared_ptr<ModifyVulTargetConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyVulTargetConfigResponse modifyVulTargetConfig(shared_ptr<ModifyVulTargetConfigRequest> request);
  ModifyWebLockCreateConfigResponse modifyWebLockCreateConfigWithOptions(shared_ptr<ModifyWebLockCreateConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyWebLockCreateConfigResponse modifyWebLockCreateConfig(shared_ptr<ModifyWebLockCreateConfigRequest> request);
  ModifyWebLockDeleteConfigResponse modifyWebLockDeleteConfigWithOptions(shared_ptr<ModifyWebLockDeleteConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyWebLockDeleteConfigResponse modifyWebLockDeleteConfig(shared_ptr<ModifyWebLockDeleteConfigRequest> request);
  ModifyWebLockStartResponse modifyWebLockStartWithOptions(shared_ptr<ModifyWebLockStartRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyWebLockStartResponse modifyWebLockStart(shared_ptr<ModifyWebLockStartRequest> request);
  ModifyWebLockStatusResponse modifyWebLockStatusWithOptions(shared_ptr<ModifyWebLockStatusRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyWebLockStatusResponse modifyWebLockStatus(shared_ptr<ModifyWebLockStatusRequest> request);
  ModifyWebLockUpdateConfigResponse modifyWebLockUpdateConfigWithOptions(shared_ptr<ModifyWebLockUpdateConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ModifyWebLockUpdateConfigResponse modifyWebLockUpdateConfig(shared_ptr<ModifyWebLockUpdateConfigRequest> request);
  OperateAgentClientInstallResponse operateAgentClientInstallWithOptions(shared_ptr<OperateAgentClientInstallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  OperateAgentClientInstallResponse operateAgentClientInstall(shared_ptr<OperateAgentClientInstallRequest> request);
  OperateSuspiciousTargetConfigResponse operateSuspiciousTargetConfigWithOptions(shared_ptr<OperateSuspiciousTargetConfigRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  OperateSuspiciousTargetConfigResponse operateSuspiciousTargetConfig(shared_ptr<OperateSuspiciousTargetConfigRequest> request);
  OperateVulsResponse operateVulsWithOptions(shared_ptr<OperateVulsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  OperateVulsResponse operateVuls(shared_ptr<OperateVulsRequest> request);
  OperationSuspEventsResponse operationSuspEventsWithOptions(shared_ptr<OperationSuspEventsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  OperationSuspEventsResponse operationSuspEvents(shared_ptr<OperationSuspEventsRequest> request);
  PauseClientResponse pauseClientWithOptions(shared_ptr<PauseClientRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  PauseClientResponse pauseClient(shared_ptr<PauseClientRequest> request);
  QueryGroupIdByGroupNameResponse queryGroupIdByGroupNameWithOptions(shared_ptr<QueryGroupIdByGroupNameRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  QueryGroupIdByGroupNameResponse queryGroupIdByGroupName(shared_ptr<QueryGroupIdByGroupNameRequest> request);
  RefreshAssetsResponse refreshAssetsWithOptions(shared_ptr<RefreshAssetsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  RefreshAssetsResponse refreshAssets(shared_ptr<RefreshAssetsRequest> request);
  RefreshContainerAssetsResponse refreshContainerAssetsWithOptions(shared_ptr<RefreshContainerAssetsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  RefreshContainerAssetsResponse refreshContainerAssets(shared_ptr<RefreshContainerAssetsRequest> request);
  RollbackSuspEventQuaraFileResponse rollbackSuspEventQuaraFileWithOptions(shared_ptr<RollbackSuspEventQuaraFileRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  RollbackSuspEventQuaraFileResponse rollbackSuspEventQuaraFile(shared_ptr<RollbackSuspEventQuaraFileRequest> request);
  SasInstallCodeResponse sasInstallCodeWithOptions(shared_ptr<SasInstallCodeRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  SasInstallCodeResponse sasInstallCode(shared_ptr<SasInstallCodeRequest> request);
  StartBaselineSecurityCheckResponse startBaselineSecurityCheckWithOptions(shared_ptr<StartBaselineSecurityCheckRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  StartBaselineSecurityCheckResponse startBaselineSecurityCheck(shared_ptr<StartBaselineSecurityCheckRequest> request);
  StartImageVulScanResponse startImageVulScanWithOptions(shared_ptr<StartImageVulScanRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  StartImageVulScanResponse startImageVulScan(shared_ptr<StartImageVulScanRequest> request);
  StartVirusScanTaskResponse startVirusScanTaskWithOptions(shared_ptr<StartVirusScanTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  StartVirusScanTaskResponse startVirusScanTask(shared_ptr<StartVirusScanTaskRequest> request);
  UnbindAegisResponse unbindAegisWithOptions(shared_ptr<UnbindAegisRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  UnbindAegisResponse unbindAegis(shared_ptr<UnbindAegisRequest> request);
  UninstallBackupClientResponse uninstallBackupClientWithOptions(shared_ptr<UninstallBackupClientRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  UninstallBackupClientResponse uninstallBackupClient(shared_ptr<UninstallBackupClientRequest> request);
  ValidateHcWarningsResponse validateHcWarningsWithOptions(shared_ptr<ValidateHcWarningsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ValidateHcWarningsResponse validateHcWarnings(shared_ptr<ValidateHcWarningsRequest> request);

  virtual ~Client() = default;
};
} // namespace Alibabacloud_Sas20181203

#endif
