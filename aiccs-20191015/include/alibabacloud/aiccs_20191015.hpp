// This file is auto-generated, don't edit it. Thanks.

#ifndef ALIBABACLOUD_AICCS20191015_H_
#define ALIBABACLOUD_AICCS20191015_H_

#include <alibabacloud/open_api.hpp>
#include <boost/any.hpp>
#include <darabonba/core.hpp>
#include <darabonba/util.hpp>
#include <iostream>
#include <map>
#include <vector>

using namespace std;

namespace Alibabacloud_Aiccs20191015 {
class AddHotlineNumberRequestOutboundRangeList : public Darabonba::Model {
public:
  shared_ptr<long> departmentId{};
  shared_ptr<vector<long>> groupIdList{};

  AddHotlineNumberRequestOutboundRangeList() {}

  explicit AddHotlineNumberRequestOutboundRangeList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (groupIdList) {
      res["GroupIdList"] = boost::any(*groupIdList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("GroupIdList") != m.end() && !m["GroupIdList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIdList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIdList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIdList = make_shared<vector<long>>(toVec1);
    }
  }


  virtual ~AddHotlineNumberRequestOutboundRangeList() = default;
};
class AddHotlineNumberRequest : public Darabonba::Model {
public:
  shared_ptr<string> description{};
  shared_ptr<bool> enableInbound{};
  shared_ptr<bool> enableInboundEvaluation{};
  shared_ptr<bool> enableOutbound{};
  shared_ptr<bool> enableOutboundEvaluation{};
  shared_ptr<long> evaluationLevel{};
  shared_ptr<string> hotlineNumber{};
  shared_ptr<long> inboundFlowId{};
  shared_ptr<string> instanceId{};
  shared_ptr<bool> outboundAllDepart{};
  shared_ptr<vector<AddHotlineNumberRequestOutboundRangeList>> outboundRangeList{};

  AddHotlineNumberRequest() {}

  explicit AddHotlineNumberRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (enableInbound) {
      res["EnableInbound"] = boost::any(*enableInbound);
    }
    if (enableInboundEvaluation) {
      res["EnableInboundEvaluation"] = boost::any(*enableInboundEvaluation);
    }
    if (enableOutbound) {
      res["EnableOutbound"] = boost::any(*enableOutbound);
    }
    if (enableOutboundEvaluation) {
      res["EnableOutboundEvaluation"] = boost::any(*enableOutboundEvaluation);
    }
    if (evaluationLevel) {
      res["EvaluationLevel"] = boost::any(*evaluationLevel);
    }
    if (hotlineNumber) {
      res["HotlineNumber"] = boost::any(*hotlineNumber);
    }
    if (inboundFlowId) {
      res["InboundFlowId"] = boost::any(*inboundFlowId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (outboundAllDepart) {
      res["OutboundAllDepart"] = boost::any(*outboundAllDepart);
    }
    if (outboundRangeList) {
      vector<boost::any> temp1;
      for(auto item1:*outboundRangeList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["OutboundRangeList"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("EnableInbound") != m.end() && !m["EnableInbound"].empty()) {
      enableInbound = make_shared<bool>(boost::any_cast<bool>(m["EnableInbound"]));
    }
    if (m.find("EnableInboundEvaluation") != m.end() && !m["EnableInboundEvaluation"].empty()) {
      enableInboundEvaluation = make_shared<bool>(boost::any_cast<bool>(m["EnableInboundEvaluation"]));
    }
    if (m.find("EnableOutbound") != m.end() && !m["EnableOutbound"].empty()) {
      enableOutbound = make_shared<bool>(boost::any_cast<bool>(m["EnableOutbound"]));
    }
    if (m.find("EnableOutboundEvaluation") != m.end() && !m["EnableOutboundEvaluation"].empty()) {
      enableOutboundEvaluation = make_shared<bool>(boost::any_cast<bool>(m["EnableOutboundEvaluation"]));
    }
    if (m.find("EvaluationLevel") != m.end() && !m["EvaluationLevel"].empty()) {
      evaluationLevel = make_shared<long>(boost::any_cast<long>(m["EvaluationLevel"]));
    }
    if (m.find("HotlineNumber") != m.end() && !m["HotlineNumber"].empty()) {
      hotlineNumber = make_shared<string>(boost::any_cast<string>(m["HotlineNumber"]));
    }
    if (m.find("InboundFlowId") != m.end() && !m["InboundFlowId"].empty()) {
      inboundFlowId = make_shared<long>(boost::any_cast<long>(m["InboundFlowId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("OutboundAllDepart") != m.end() && !m["OutboundAllDepart"].empty()) {
      outboundAllDepart = make_shared<bool>(boost::any_cast<bool>(m["OutboundAllDepart"]));
    }
    if (m.find("OutboundRangeList") != m.end() && !m["OutboundRangeList"].empty()) {
      if (typeid(vector<boost::any>) == m["OutboundRangeList"].type()) {
        vector<AddHotlineNumberRequestOutboundRangeList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["OutboundRangeList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            AddHotlineNumberRequestOutboundRangeList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        outboundRangeList = make_shared<vector<AddHotlineNumberRequestOutboundRangeList>>(expect1);
      }
    }
  }


  virtual ~AddHotlineNumberRequest() = default;
};
class AddHotlineNumberShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> description{};
  shared_ptr<bool> enableInbound{};
  shared_ptr<bool> enableInboundEvaluation{};
  shared_ptr<bool> enableOutbound{};
  shared_ptr<bool> enableOutboundEvaluation{};
  shared_ptr<long> evaluationLevel{};
  shared_ptr<string> hotlineNumber{};
  shared_ptr<long> inboundFlowId{};
  shared_ptr<string> instanceId{};
  shared_ptr<bool> outboundAllDepart{};
  shared_ptr<string> outboundRangeListShrink{};

  AddHotlineNumberShrinkRequest() {}

  explicit AddHotlineNumberShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (enableInbound) {
      res["EnableInbound"] = boost::any(*enableInbound);
    }
    if (enableInboundEvaluation) {
      res["EnableInboundEvaluation"] = boost::any(*enableInboundEvaluation);
    }
    if (enableOutbound) {
      res["EnableOutbound"] = boost::any(*enableOutbound);
    }
    if (enableOutboundEvaluation) {
      res["EnableOutboundEvaluation"] = boost::any(*enableOutboundEvaluation);
    }
    if (evaluationLevel) {
      res["EvaluationLevel"] = boost::any(*evaluationLevel);
    }
    if (hotlineNumber) {
      res["HotlineNumber"] = boost::any(*hotlineNumber);
    }
    if (inboundFlowId) {
      res["InboundFlowId"] = boost::any(*inboundFlowId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (outboundAllDepart) {
      res["OutboundAllDepart"] = boost::any(*outboundAllDepart);
    }
    if (outboundRangeListShrink) {
      res["OutboundRangeList"] = boost::any(*outboundRangeListShrink);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("EnableInbound") != m.end() && !m["EnableInbound"].empty()) {
      enableInbound = make_shared<bool>(boost::any_cast<bool>(m["EnableInbound"]));
    }
    if (m.find("EnableInboundEvaluation") != m.end() && !m["EnableInboundEvaluation"].empty()) {
      enableInboundEvaluation = make_shared<bool>(boost::any_cast<bool>(m["EnableInboundEvaluation"]));
    }
    if (m.find("EnableOutbound") != m.end() && !m["EnableOutbound"].empty()) {
      enableOutbound = make_shared<bool>(boost::any_cast<bool>(m["EnableOutbound"]));
    }
    if (m.find("EnableOutboundEvaluation") != m.end() && !m["EnableOutboundEvaluation"].empty()) {
      enableOutboundEvaluation = make_shared<bool>(boost::any_cast<bool>(m["EnableOutboundEvaluation"]));
    }
    if (m.find("EvaluationLevel") != m.end() && !m["EvaluationLevel"].empty()) {
      evaluationLevel = make_shared<long>(boost::any_cast<long>(m["EvaluationLevel"]));
    }
    if (m.find("HotlineNumber") != m.end() && !m["HotlineNumber"].empty()) {
      hotlineNumber = make_shared<string>(boost::any_cast<string>(m["HotlineNumber"]));
    }
    if (m.find("InboundFlowId") != m.end() && !m["InboundFlowId"].empty()) {
      inboundFlowId = make_shared<long>(boost::any_cast<long>(m["InboundFlowId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("OutboundAllDepart") != m.end() && !m["OutboundAllDepart"].empty()) {
      outboundAllDepart = make_shared<bool>(boost::any_cast<bool>(m["OutboundAllDepart"]));
    }
    if (m.find("OutboundRangeList") != m.end() && !m["OutboundRangeList"].empty()) {
      outboundRangeListShrink = make_shared<string>(boost::any_cast<string>(m["OutboundRangeList"]));
    }
  }


  virtual ~AddHotlineNumberShrinkRequest() = default;
};
class AddHotlineNumberResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  AddHotlineNumberResponseBody() {}

  explicit AddHotlineNumberResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~AddHotlineNumberResponseBody() = default;
};
class AddHotlineNumberResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<AddHotlineNumberResponseBody> body{};

  AddHotlineNumberResponse() {}

  explicit AddHotlineNumberResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        AddHotlineNumberResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<AddHotlineNumberResponseBody>(model1);
      }
    }
  }


  virtual ~AddHotlineNumberResponse() = default;
};
class AddOuterAccountRequest : public Darabonba::Model {
public:
  shared_ptr<string> avatar{};
  shared_ptr<string> ext{};
  shared_ptr<string> outerAccountId{};
  shared_ptr<string> outerAccountName{};
  shared_ptr<string> outerAccountType{};
  shared_ptr<string> outerDepartmentId{};
  shared_ptr<string> outerDepartmentType{};
  shared_ptr<string> outerGroupIds{};
  shared_ptr<string> outerGroupType{};
  shared_ptr<string> realName{};

  AddOuterAccountRequest() {}

  explicit AddOuterAccountRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (avatar) {
      res["Avatar"] = boost::any(*avatar);
    }
    if (ext) {
      res["Ext"] = boost::any(*ext);
    }
    if (outerAccountId) {
      res["OuterAccountId"] = boost::any(*outerAccountId);
    }
    if (outerAccountName) {
      res["OuterAccountName"] = boost::any(*outerAccountName);
    }
    if (outerAccountType) {
      res["OuterAccountType"] = boost::any(*outerAccountType);
    }
    if (outerDepartmentId) {
      res["OuterDepartmentId"] = boost::any(*outerDepartmentId);
    }
    if (outerDepartmentType) {
      res["OuterDepartmentType"] = boost::any(*outerDepartmentType);
    }
    if (outerGroupIds) {
      res["OuterGroupIds"] = boost::any(*outerGroupIds);
    }
    if (outerGroupType) {
      res["OuterGroupType"] = boost::any(*outerGroupType);
    }
    if (realName) {
      res["RealName"] = boost::any(*realName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Avatar") != m.end() && !m["Avatar"].empty()) {
      avatar = make_shared<string>(boost::any_cast<string>(m["Avatar"]));
    }
    if (m.find("Ext") != m.end() && !m["Ext"].empty()) {
      ext = make_shared<string>(boost::any_cast<string>(m["Ext"]));
    }
    if (m.find("OuterAccountId") != m.end() && !m["OuterAccountId"].empty()) {
      outerAccountId = make_shared<string>(boost::any_cast<string>(m["OuterAccountId"]));
    }
    if (m.find("OuterAccountName") != m.end() && !m["OuterAccountName"].empty()) {
      outerAccountName = make_shared<string>(boost::any_cast<string>(m["OuterAccountName"]));
    }
    if (m.find("OuterAccountType") != m.end() && !m["OuterAccountType"].empty()) {
      outerAccountType = make_shared<string>(boost::any_cast<string>(m["OuterAccountType"]));
    }
    if (m.find("OuterDepartmentId") != m.end() && !m["OuterDepartmentId"].empty()) {
      outerDepartmentId = make_shared<string>(boost::any_cast<string>(m["OuterDepartmentId"]));
    }
    if (m.find("OuterDepartmentType") != m.end() && !m["OuterDepartmentType"].empty()) {
      outerDepartmentType = make_shared<string>(boost::any_cast<string>(m["OuterDepartmentType"]));
    }
    if (m.find("OuterGroupIds") != m.end() && !m["OuterGroupIds"].empty()) {
      outerGroupIds = make_shared<string>(boost::any_cast<string>(m["OuterGroupIds"]));
    }
    if (m.find("OuterGroupType") != m.end() && !m["OuterGroupType"].empty()) {
      outerGroupType = make_shared<string>(boost::any_cast<string>(m["OuterGroupType"]));
    }
    if (m.find("RealName") != m.end() && !m["RealName"].empty()) {
      realName = make_shared<string>(boost::any_cast<string>(m["RealName"]));
    }
  }


  virtual ~AddOuterAccountRequest() = default;
};
class AddOuterAccountResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  AddOuterAccountResponseBody() {}

  explicit AddOuterAccountResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~AddOuterAccountResponseBody() = default;
};
class AddOuterAccountResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<AddOuterAccountResponseBody> body{};

  AddOuterAccountResponse() {}

  explicit AddOuterAccountResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        AddOuterAccountResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<AddOuterAccountResponseBody>(model1);
      }
    }
  }


  virtual ~AddOuterAccountResponse() = default;
};
class AddSkillGroupRequest : public Darabonba::Model {
public:
  shared_ptr<string> outerDepartmentId{};
  shared_ptr<string> outerDepartmentType{};
  shared_ptr<string> outerGroupId{};
  shared_ptr<string> outerGroupName{};
  shared_ptr<string> outerGroupType{};

  AddSkillGroupRequest() {}

  explicit AddSkillGroupRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (outerDepartmentId) {
      res["OuterDepartmentId"] = boost::any(*outerDepartmentId);
    }
    if (outerDepartmentType) {
      res["OuterDepartmentType"] = boost::any(*outerDepartmentType);
    }
    if (outerGroupId) {
      res["OuterGroupId"] = boost::any(*outerGroupId);
    }
    if (outerGroupName) {
      res["OuterGroupName"] = boost::any(*outerGroupName);
    }
    if (outerGroupType) {
      res["OuterGroupType"] = boost::any(*outerGroupType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("OuterDepartmentId") != m.end() && !m["OuterDepartmentId"].empty()) {
      outerDepartmentId = make_shared<string>(boost::any_cast<string>(m["OuterDepartmentId"]));
    }
    if (m.find("OuterDepartmentType") != m.end() && !m["OuterDepartmentType"].empty()) {
      outerDepartmentType = make_shared<string>(boost::any_cast<string>(m["OuterDepartmentType"]));
    }
    if (m.find("OuterGroupId") != m.end() && !m["OuterGroupId"].empty()) {
      outerGroupId = make_shared<string>(boost::any_cast<string>(m["OuterGroupId"]));
    }
    if (m.find("OuterGroupName") != m.end() && !m["OuterGroupName"].empty()) {
      outerGroupName = make_shared<string>(boost::any_cast<string>(m["OuterGroupName"]));
    }
    if (m.find("OuterGroupType") != m.end() && !m["OuterGroupType"].empty()) {
      outerGroupType = make_shared<string>(boost::any_cast<string>(m["OuterGroupType"]));
    }
  }


  virtual ~AddSkillGroupRequest() = default;
};
class AddSkillGroupResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  AddSkillGroupResponseBody() {}

  explicit AddSkillGroupResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~AddSkillGroupResponseBody() = default;
};
class AddSkillGroupResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<AddSkillGroupResponseBody> body{};

  AddSkillGroupResponse() {}

  explicit AddSkillGroupResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        AddSkillGroupResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<AddSkillGroupResponseBody>(model1);
      }
    }
  }


  virtual ~AddSkillGroupResponse() = default;
};
class AiccsSmartCallRequest : public Darabonba::Model {
public:
  shared_ptr<bool> actionCodeBreak{};
  shared_ptr<long> actionCodeTimeBreak{};
  shared_ptr<string> asrAlsAmId{};
  shared_ptr<string> asrBaseId{};
  shared_ptr<string> asrModelId{};
  shared_ptr<string> asrVocabularyId{};
  shared_ptr<string> backgroundFileCode{};
  shared_ptr<long> backgroundSpeed{};
  shared_ptr<long> backgroundVolume{};
  shared_ptr<string> calledNumber{};
  shared_ptr<string> calledShowNumber{};
  shared_ptr<string> dynamicId{};
  shared_ptr<bool> earlyMediaAsr{};
  shared_ptr<bool> enableITN{};
  shared_ptr<long> muteTime{};
  shared_ptr<string> outId{};
  shared_ptr<long> ownerId{};
  shared_ptr<long> pauseTime{};
  shared_ptr<long> playTimes{};
  shared_ptr<string> prodCode{};
  shared_ptr<bool> recordFlag{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> sessionTimeout{};
  shared_ptr<long> speed{};
  shared_ptr<bool> ttsConf{};
  shared_ptr<long> ttsSpeed{};
  shared_ptr<string> ttsStyle{};
  shared_ptr<long> ttsVolume{};
  shared_ptr<string> voiceCode{};
  shared_ptr<string> voiceCodeParam{};
  shared_ptr<long> volume{};

  AiccsSmartCallRequest() {}

  explicit AiccsSmartCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (actionCodeBreak) {
      res["ActionCodeBreak"] = boost::any(*actionCodeBreak);
    }
    if (actionCodeTimeBreak) {
      res["ActionCodeTimeBreak"] = boost::any(*actionCodeTimeBreak);
    }
    if (asrAlsAmId) {
      res["AsrAlsAmId"] = boost::any(*asrAlsAmId);
    }
    if (asrBaseId) {
      res["AsrBaseId"] = boost::any(*asrBaseId);
    }
    if (asrModelId) {
      res["AsrModelId"] = boost::any(*asrModelId);
    }
    if (asrVocabularyId) {
      res["AsrVocabularyId"] = boost::any(*asrVocabularyId);
    }
    if (backgroundFileCode) {
      res["BackgroundFileCode"] = boost::any(*backgroundFileCode);
    }
    if (backgroundSpeed) {
      res["BackgroundSpeed"] = boost::any(*backgroundSpeed);
    }
    if (backgroundVolume) {
      res["BackgroundVolume"] = boost::any(*backgroundVolume);
    }
    if (calledNumber) {
      res["CalledNumber"] = boost::any(*calledNumber);
    }
    if (calledShowNumber) {
      res["CalledShowNumber"] = boost::any(*calledShowNumber);
    }
    if (dynamicId) {
      res["DynamicId"] = boost::any(*dynamicId);
    }
    if (earlyMediaAsr) {
      res["EarlyMediaAsr"] = boost::any(*earlyMediaAsr);
    }
    if (enableITN) {
      res["EnableITN"] = boost::any(*enableITN);
    }
    if (muteTime) {
      res["MuteTime"] = boost::any(*muteTime);
    }
    if (outId) {
      res["OutId"] = boost::any(*outId);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (pauseTime) {
      res["PauseTime"] = boost::any(*pauseTime);
    }
    if (playTimes) {
      res["PlayTimes"] = boost::any(*playTimes);
    }
    if (prodCode) {
      res["ProdCode"] = boost::any(*prodCode);
    }
    if (recordFlag) {
      res["RecordFlag"] = boost::any(*recordFlag);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sessionTimeout) {
      res["SessionTimeout"] = boost::any(*sessionTimeout);
    }
    if (speed) {
      res["Speed"] = boost::any(*speed);
    }
    if (ttsConf) {
      res["TtsConf"] = boost::any(*ttsConf);
    }
    if (ttsSpeed) {
      res["TtsSpeed"] = boost::any(*ttsSpeed);
    }
    if (ttsStyle) {
      res["TtsStyle"] = boost::any(*ttsStyle);
    }
    if (ttsVolume) {
      res["TtsVolume"] = boost::any(*ttsVolume);
    }
    if (voiceCode) {
      res["VoiceCode"] = boost::any(*voiceCode);
    }
    if (voiceCodeParam) {
      res["VoiceCodeParam"] = boost::any(*voiceCodeParam);
    }
    if (volume) {
      res["Volume"] = boost::any(*volume);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ActionCodeBreak") != m.end() && !m["ActionCodeBreak"].empty()) {
      actionCodeBreak = make_shared<bool>(boost::any_cast<bool>(m["ActionCodeBreak"]));
    }
    if (m.find("ActionCodeTimeBreak") != m.end() && !m["ActionCodeTimeBreak"].empty()) {
      actionCodeTimeBreak = make_shared<long>(boost::any_cast<long>(m["ActionCodeTimeBreak"]));
    }
    if (m.find("AsrAlsAmId") != m.end() && !m["AsrAlsAmId"].empty()) {
      asrAlsAmId = make_shared<string>(boost::any_cast<string>(m["AsrAlsAmId"]));
    }
    if (m.find("AsrBaseId") != m.end() && !m["AsrBaseId"].empty()) {
      asrBaseId = make_shared<string>(boost::any_cast<string>(m["AsrBaseId"]));
    }
    if (m.find("AsrModelId") != m.end() && !m["AsrModelId"].empty()) {
      asrModelId = make_shared<string>(boost::any_cast<string>(m["AsrModelId"]));
    }
    if (m.find("AsrVocabularyId") != m.end() && !m["AsrVocabularyId"].empty()) {
      asrVocabularyId = make_shared<string>(boost::any_cast<string>(m["AsrVocabularyId"]));
    }
    if (m.find("BackgroundFileCode") != m.end() && !m["BackgroundFileCode"].empty()) {
      backgroundFileCode = make_shared<string>(boost::any_cast<string>(m["BackgroundFileCode"]));
    }
    if (m.find("BackgroundSpeed") != m.end() && !m["BackgroundSpeed"].empty()) {
      backgroundSpeed = make_shared<long>(boost::any_cast<long>(m["BackgroundSpeed"]));
    }
    if (m.find("BackgroundVolume") != m.end() && !m["BackgroundVolume"].empty()) {
      backgroundVolume = make_shared<long>(boost::any_cast<long>(m["BackgroundVolume"]));
    }
    if (m.find("CalledNumber") != m.end() && !m["CalledNumber"].empty()) {
      calledNumber = make_shared<string>(boost::any_cast<string>(m["CalledNumber"]));
    }
    if (m.find("CalledShowNumber") != m.end() && !m["CalledShowNumber"].empty()) {
      calledShowNumber = make_shared<string>(boost::any_cast<string>(m["CalledShowNumber"]));
    }
    if (m.find("DynamicId") != m.end() && !m["DynamicId"].empty()) {
      dynamicId = make_shared<string>(boost::any_cast<string>(m["DynamicId"]));
    }
    if (m.find("EarlyMediaAsr") != m.end() && !m["EarlyMediaAsr"].empty()) {
      earlyMediaAsr = make_shared<bool>(boost::any_cast<bool>(m["EarlyMediaAsr"]));
    }
    if (m.find("EnableITN") != m.end() && !m["EnableITN"].empty()) {
      enableITN = make_shared<bool>(boost::any_cast<bool>(m["EnableITN"]));
    }
    if (m.find("MuteTime") != m.end() && !m["MuteTime"].empty()) {
      muteTime = make_shared<long>(boost::any_cast<long>(m["MuteTime"]));
    }
    if (m.find("OutId") != m.end() && !m["OutId"].empty()) {
      outId = make_shared<string>(boost::any_cast<string>(m["OutId"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("PauseTime") != m.end() && !m["PauseTime"].empty()) {
      pauseTime = make_shared<long>(boost::any_cast<long>(m["PauseTime"]));
    }
    if (m.find("PlayTimes") != m.end() && !m["PlayTimes"].empty()) {
      playTimes = make_shared<long>(boost::any_cast<long>(m["PlayTimes"]));
    }
    if (m.find("ProdCode") != m.end() && !m["ProdCode"].empty()) {
      prodCode = make_shared<string>(boost::any_cast<string>(m["ProdCode"]));
    }
    if (m.find("RecordFlag") != m.end() && !m["RecordFlag"].empty()) {
      recordFlag = make_shared<bool>(boost::any_cast<bool>(m["RecordFlag"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SessionTimeout") != m.end() && !m["SessionTimeout"].empty()) {
      sessionTimeout = make_shared<long>(boost::any_cast<long>(m["SessionTimeout"]));
    }
    if (m.find("Speed") != m.end() && !m["Speed"].empty()) {
      speed = make_shared<long>(boost::any_cast<long>(m["Speed"]));
    }
    if (m.find("TtsConf") != m.end() && !m["TtsConf"].empty()) {
      ttsConf = make_shared<bool>(boost::any_cast<bool>(m["TtsConf"]));
    }
    if (m.find("TtsSpeed") != m.end() && !m["TtsSpeed"].empty()) {
      ttsSpeed = make_shared<long>(boost::any_cast<long>(m["TtsSpeed"]));
    }
    if (m.find("TtsStyle") != m.end() && !m["TtsStyle"].empty()) {
      ttsStyle = make_shared<string>(boost::any_cast<string>(m["TtsStyle"]));
    }
    if (m.find("TtsVolume") != m.end() && !m["TtsVolume"].empty()) {
      ttsVolume = make_shared<long>(boost::any_cast<long>(m["TtsVolume"]));
    }
    if (m.find("VoiceCode") != m.end() && !m["VoiceCode"].empty()) {
      voiceCode = make_shared<string>(boost::any_cast<string>(m["VoiceCode"]));
    }
    if (m.find("VoiceCodeParam") != m.end() && !m["VoiceCodeParam"].empty()) {
      voiceCodeParam = make_shared<string>(boost::any_cast<string>(m["VoiceCodeParam"]));
    }
    if (m.find("Volume") != m.end() && !m["Volume"].empty()) {
      volume = make_shared<long>(boost::any_cast<long>(m["Volume"]));
    }
  }


  virtual ~AiccsSmartCallRequest() = default;
};
class AiccsSmartCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};

  AiccsSmartCallResponseBody() {}

  explicit AiccsSmartCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~AiccsSmartCallResponseBody() = default;
};
class AiccsSmartCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<AiccsSmartCallResponseBody> body{};

  AiccsSmartCallResponse() {}

  explicit AiccsSmartCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        AiccsSmartCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<AiccsSmartCallResponseBody>(model1);
      }
    }
  }


  virtual ~AiccsSmartCallResponse() = default;
};
class AiccsSmartCallOperateRequest : public Darabonba::Model {
public:
  shared_ptr<string> callId{};
  shared_ptr<string> command{};
  shared_ptr<long> ownerId{};
  shared_ptr<string> param{};
  shared_ptr<string> prodCode{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};

  AiccsSmartCallOperateRequest() {}

  explicit AiccsSmartCallOperateRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (command) {
      res["Command"] = boost::any(*command);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (param) {
      res["Param"] = boost::any(*param);
    }
    if (prodCode) {
      res["ProdCode"] = boost::any(*prodCode);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("Command") != m.end() && !m["Command"].empty()) {
      command = make_shared<string>(boost::any_cast<string>(m["Command"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("Param") != m.end() && !m["Param"].empty()) {
      param = make_shared<string>(boost::any_cast<string>(m["Param"]));
    }
    if (m.find("ProdCode") != m.end() && !m["ProdCode"].empty()) {
      prodCode = make_shared<string>(boost::any_cast<string>(m["ProdCode"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
  }


  virtual ~AiccsSmartCallOperateRequest() = default;
};
class AiccsSmartCallOperateResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};

  AiccsSmartCallOperateResponseBody() {}

  explicit AiccsSmartCallOperateResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~AiccsSmartCallOperateResponseBody() = default;
};
class AiccsSmartCallOperateResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<AiccsSmartCallOperateResponseBody> body{};

  AiccsSmartCallOperateResponse() {}

  explicit AiccsSmartCallOperateResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        AiccsSmartCallOperateResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<AiccsSmartCallOperateResponseBody>(model1);
      }
    }
  }


  virtual ~AiccsSmartCallOperateResponse() = default;
};
class AnswerCallRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> callId{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> connectionId{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> jobId{};

  AnswerCallRequest() {}

  explicit AnswerCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (connectionId) {
      res["ConnectionId"] = boost::any(*connectionId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (jobId) {
      res["JobId"] = boost::any(*jobId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("ConnectionId") != m.end() && !m["ConnectionId"].empty()) {
      connectionId = make_shared<string>(boost::any_cast<string>(m["ConnectionId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("JobId") != m.end() && !m["JobId"].empty()) {
      jobId = make_shared<string>(boost::any_cast<string>(m["JobId"]));
    }
  }


  virtual ~AnswerCallRequest() = default;
};
class AnswerCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  AnswerCallResponseBody() {}

  explicit AnswerCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~AnswerCallResponseBody() = default;
};
class AnswerCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<AnswerCallResponseBody> body{};

  AnswerCallResponse() {}

  explicit AnswerCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        AnswerCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<AnswerCallResponseBody>(model1);
      }
    }
  }


  virtual ~AnswerCallResponse() = default;
};
class AttachTaskRequest : public Darabonba::Model {
public:
  shared_ptr<string> callString{};
  shared_ptr<long> ownerId{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> taskId{};

  AttachTaskRequest() {}

  explicit AttachTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callString) {
      res["CallString"] = boost::any(*callString);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallString") != m.end() && !m["CallString"].empty()) {
      callString = make_shared<string>(boost::any_cast<string>(m["CallString"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~AttachTaskRequest() = default;
};
class AttachTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  AttachTaskResponseBody() {}

  explicit AttachTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<long>(boost::any_cast<long>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~AttachTaskResponseBody() = default;
};
class AttachTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<AttachTaskResponseBody> body{};

  AttachTaskResponse() {}

  explicit AttachTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        AttachTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<AttachTaskResponseBody>(model1);
      }
    }
  }


  virtual ~AttachTaskResponse() = default;
};
class BatchCreateQualityProjectsRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> analysisIds{};
  shared_ptr<vector<long>> channelTouchType{};
  shared_ptr<long> checkFreqType{};
  shared_ptr<vector<string>> instanceList{};
  shared_ptr<string> projectName{};
  shared_ptr<string> timeRangeEnd{};
  shared_ptr<string> timeRangeStart{};

  BatchCreateQualityProjectsRequest() {}

  explicit BatchCreateQualityProjectsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (analysisIds) {
      res["AnalysisIds"] = boost::any(*analysisIds);
    }
    if (channelTouchType) {
      res["ChannelTouchType"] = boost::any(*channelTouchType);
    }
    if (checkFreqType) {
      res["CheckFreqType"] = boost::any(*checkFreqType);
    }
    if (instanceList) {
      res["InstanceList"] = boost::any(*instanceList);
    }
    if (projectName) {
      res["ProjectName"] = boost::any(*projectName);
    }
    if (timeRangeEnd) {
      res["TimeRangeEnd"] = boost::any(*timeRangeEnd);
    }
    if (timeRangeStart) {
      res["TimeRangeStart"] = boost::any(*timeRangeStart);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AnalysisIds") != m.end() && !m["AnalysisIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["AnalysisIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AnalysisIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      analysisIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("ChannelTouchType") != m.end() && !m["ChannelTouchType"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["ChannelTouchType"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ChannelTouchType"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      channelTouchType = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CheckFreqType") != m.end() && !m["CheckFreqType"].empty()) {
      checkFreqType = make_shared<long>(boost::any_cast<long>(m["CheckFreqType"]));
    }
    if (m.find("InstanceList") != m.end() && !m["InstanceList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["InstanceList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["InstanceList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      instanceList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("ProjectName") != m.end() && !m["ProjectName"].empty()) {
      projectName = make_shared<string>(boost::any_cast<string>(m["ProjectName"]));
    }
    if (m.find("TimeRangeEnd") != m.end() && !m["TimeRangeEnd"].empty()) {
      timeRangeEnd = make_shared<string>(boost::any_cast<string>(m["TimeRangeEnd"]));
    }
    if (m.find("TimeRangeStart") != m.end() && !m["TimeRangeStart"].empty()) {
      timeRangeStart = make_shared<string>(boost::any_cast<string>(m["TimeRangeStart"]));
    }
  }


  virtual ~BatchCreateQualityProjectsRequest() = default;
};
class BatchCreateQualityProjectsResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> projectId{};
  shared_ptr<long> version{};

  BatchCreateQualityProjectsResponseBodyData() {}

  explicit BatchCreateQualityProjectsResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (projectId) {
      res["ProjectId"] = boost::any(*projectId);
    }
    if (version) {
      res["Version"] = boost::any(*version);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("ProjectId") != m.end() && !m["ProjectId"].empty()) {
      projectId = make_shared<long>(boost::any_cast<long>(m["ProjectId"]));
    }
    if (m.find("Version") != m.end() && !m["Version"].empty()) {
      version = make_shared<long>(boost::any_cast<long>(m["Version"]));
    }
  }


  virtual ~BatchCreateQualityProjectsResponseBodyData() = default;
};
class BatchCreateQualityProjectsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<BatchCreateQualityProjectsResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  BatchCreateQualityProjectsResponseBody() {}

  explicit BatchCreateQualityProjectsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<BatchCreateQualityProjectsResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            BatchCreateQualityProjectsResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<BatchCreateQualityProjectsResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~BatchCreateQualityProjectsResponseBody() = default;
};
class BatchCreateQualityProjectsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<BatchCreateQualityProjectsResponseBody> body{};

  BatchCreateQualityProjectsResponse() {}

  explicit BatchCreateQualityProjectsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        BatchCreateQualityProjectsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<BatchCreateQualityProjectsResponseBody>(model1);
      }
    }
  }


  virtual ~BatchCreateQualityProjectsResponse() = default;
};
class CancelTaskRequest : public Darabonba::Model {
public:
  shared_ptr<long> ownerId{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> taskId{};

  CancelTaskRequest() {}

  explicit CancelTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~CancelTaskRequest() = default;
};
class CancelTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<bool> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  CancelTaskResponseBody() {}

  explicit CancelTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<bool>(boost::any_cast<bool>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~CancelTaskResponseBody() = default;
};
class CancelTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<CancelTaskResponseBody> body{};

  CancelTaskResponse() {}

  explicit CancelTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CancelTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CancelTaskResponseBody>(model1);
      }
    }
  }


  virtual ~CancelTaskResponse() = default;
};
class ChangeChatAgentStatusRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> method{};

  ChangeChatAgentStatusRequest() {}

  explicit ChangeChatAgentStatusRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (method) {
      res["Method"] = boost::any(*method);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("Method") != m.end() && !m["Method"].empty()) {
      method = make_shared<string>(boost::any_cast<string>(m["Method"]));
    }
  }


  virtual ~ChangeChatAgentStatusRequest() = default;
};
class ChangeChatAgentStatusResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ChangeChatAgentStatusResponseBody() {}

  explicit ChangeChatAgentStatusResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ChangeChatAgentStatusResponseBody() = default;
};
class ChangeChatAgentStatusResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ChangeChatAgentStatusResponseBody> body{};

  ChangeChatAgentStatusResponse() {}

  explicit ChangeChatAgentStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ChangeChatAgentStatusResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ChangeChatAgentStatusResponseBody>(model1);
      }
    }
  }


  virtual ~ChangeChatAgentStatusResponse() = default;
};
class ChangeQualityProjectStatusRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> projectId{};
  shared_ptr<long> status{};

  ChangeQualityProjectStatusRequest() {}

  explicit ChangeQualityProjectStatusRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (projectId) {
      res["ProjectId"] = boost::any(*projectId);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("ProjectId") != m.end() && !m["ProjectId"].empty()) {
      projectId = make_shared<long>(boost::any_cast<long>(m["ProjectId"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
  }


  virtual ~ChangeQualityProjectStatusRequest() = default;
};
class ChangeQualityProjectStatusResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ChangeQualityProjectStatusResponseBody() {}

  explicit ChangeQualityProjectStatusResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ChangeQualityProjectStatusResponseBody() = default;
};
class ChangeQualityProjectStatusResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ChangeQualityProjectStatusResponseBody> body{};

  ChangeQualityProjectStatusResponse() {}

  explicit ChangeQualityProjectStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ChangeQualityProjectStatusResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ChangeQualityProjectStatusResponseBody>(model1);
      }
    }
  }


  virtual ~ChangeQualityProjectStatusResponse() = default;
};
class CreateAgentRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> displayName{};
  shared_ptr<string> instanceId{};
  shared_ptr<vector<long>> skillGroupId{};
  shared_ptr<vector<long>> skillGroupIdList{};

  CreateAgentRequest() {}

  explicit CreateAgentRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (displayName) {
      res["DisplayName"] = boost::any(*displayName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (skillGroupId) {
      res["SkillGroupId"] = boost::any(*skillGroupId);
    }
    if (skillGroupIdList) {
      res["SkillGroupIdList"] = boost::any(*skillGroupIdList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("DisplayName") != m.end() && !m["DisplayName"].empty()) {
      displayName = make_shared<string>(boost::any_cast<string>(m["DisplayName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("SkillGroupId") != m.end() && !m["SkillGroupId"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["SkillGroupId"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["SkillGroupId"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      skillGroupId = make_shared<vector<long>>(toVec1);
    }
    if (m.find("SkillGroupIdList") != m.end() && !m["SkillGroupIdList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["SkillGroupIdList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["SkillGroupIdList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      skillGroupIdList = make_shared<vector<long>>(toVec1);
    }
  }


  virtual ~CreateAgentRequest() = default;
};
class CreateAgentResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  CreateAgentResponseBody() {}

  explicit CreateAgentResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<long>(boost::any_cast<long>(m["Data"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~CreateAgentResponseBody() = default;
};
class CreateAgentResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<CreateAgentResponseBody> body{};

  CreateAgentResponse() {}

  explicit CreateAgentResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateAgentResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateAgentResponseBody>(model1);
      }
    }
  }


  virtual ~CreateAgentResponse() = default;
};
class CreateAiOutboundTaskRequestRecallRule : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> interval{};

  CreateAiOutboundTaskRequestRecallRule() {}

  explicit CreateAiOutboundTaskRequestRecallRule(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (interval) {
      res["Interval"] = boost::any(*interval);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("Interval") != m.end() && !m["Interval"].empty()) {
      interval = make_shared<long>(boost::any_cast<long>(m["Interval"]));
    }
  }


  virtual ~CreateAiOutboundTaskRequestRecallRule() = default;
};
class CreateAiOutboundTaskRequest : public Darabonba::Model {
public:
  shared_ptr<long> concurrentRate{};
  shared_ptr<string> description{};
  shared_ptr<string> executionTime{};
  shared_ptr<double> forecastCallRate{};
  shared_ptr<long> handlerId{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> name{};
  shared_ptr<long> numRepeated{};
  shared_ptr<vector<string>> outboundNums{};
  shared_ptr<CreateAiOutboundTaskRequestRecallRule> recallRule{};
  shared_ptr<long> type{};

  CreateAiOutboundTaskRequest() {}

  explicit CreateAiOutboundTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (concurrentRate) {
      res["ConcurrentRate"] = boost::any(*concurrentRate);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (executionTime) {
      res["ExecutionTime"] = boost::any(*executionTime);
    }
    if (forecastCallRate) {
      res["ForecastCallRate"] = boost::any(*forecastCallRate);
    }
    if (handlerId) {
      res["HandlerId"] = boost::any(*handlerId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (numRepeated) {
      res["NumRepeated"] = boost::any(*numRepeated);
    }
    if (outboundNums) {
      res["OutboundNums"] = boost::any(*outboundNums);
    }
    if (recallRule) {
      res["RecallRule"] = recallRule ? boost::any(recallRule->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ConcurrentRate") != m.end() && !m["ConcurrentRate"].empty()) {
      concurrentRate = make_shared<long>(boost::any_cast<long>(m["ConcurrentRate"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("ExecutionTime") != m.end() && !m["ExecutionTime"].empty()) {
      executionTime = make_shared<string>(boost::any_cast<string>(m["ExecutionTime"]));
    }
    if (m.find("ForecastCallRate") != m.end() && !m["ForecastCallRate"].empty()) {
      forecastCallRate = make_shared<double>(boost::any_cast<double>(m["ForecastCallRate"]));
    }
    if (m.find("HandlerId") != m.end() && !m["HandlerId"].empty()) {
      handlerId = make_shared<long>(boost::any_cast<long>(m["HandlerId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("NumRepeated") != m.end() && !m["NumRepeated"].empty()) {
      numRepeated = make_shared<long>(boost::any_cast<long>(m["NumRepeated"]));
    }
    if (m.find("OutboundNums") != m.end() && !m["OutboundNums"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["OutboundNums"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["OutboundNums"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      outboundNums = make_shared<vector<string>>(toVec1);
    }
    if (m.find("RecallRule") != m.end() && !m["RecallRule"].empty()) {
      if (typeid(map<string, boost::any>) == m["RecallRule"].type()) {
        CreateAiOutboundTaskRequestRecallRule model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["RecallRule"]));
        recallRule = make_shared<CreateAiOutboundTaskRequestRecallRule>(model1);
      }
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<long>(boost::any_cast<long>(m["Type"]));
    }
  }


  virtual ~CreateAiOutboundTaskRequest() = default;
};
class CreateAiOutboundTaskShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<long> concurrentRate{};
  shared_ptr<string> description{};
  shared_ptr<string> executionTime{};
  shared_ptr<double> forecastCallRate{};
  shared_ptr<long> handlerId{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> name{};
  shared_ptr<long> numRepeated{};
  shared_ptr<string> outboundNumsShrink{};
  shared_ptr<string> recallRuleShrink{};
  shared_ptr<long> type{};

  CreateAiOutboundTaskShrinkRequest() {}

  explicit CreateAiOutboundTaskShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (concurrentRate) {
      res["ConcurrentRate"] = boost::any(*concurrentRate);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (executionTime) {
      res["ExecutionTime"] = boost::any(*executionTime);
    }
    if (forecastCallRate) {
      res["ForecastCallRate"] = boost::any(*forecastCallRate);
    }
    if (handlerId) {
      res["HandlerId"] = boost::any(*handlerId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (numRepeated) {
      res["NumRepeated"] = boost::any(*numRepeated);
    }
    if (outboundNumsShrink) {
      res["OutboundNums"] = boost::any(*outboundNumsShrink);
    }
    if (recallRuleShrink) {
      res["RecallRule"] = boost::any(*recallRuleShrink);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ConcurrentRate") != m.end() && !m["ConcurrentRate"].empty()) {
      concurrentRate = make_shared<long>(boost::any_cast<long>(m["ConcurrentRate"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("ExecutionTime") != m.end() && !m["ExecutionTime"].empty()) {
      executionTime = make_shared<string>(boost::any_cast<string>(m["ExecutionTime"]));
    }
    if (m.find("ForecastCallRate") != m.end() && !m["ForecastCallRate"].empty()) {
      forecastCallRate = make_shared<double>(boost::any_cast<double>(m["ForecastCallRate"]));
    }
    if (m.find("HandlerId") != m.end() && !m["HandlerId"].empty()) {
      handlerId = make_shared<long>(boost::any_cast<long>(m["HandlerId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("NumRepeated") != m.end() && !m["NumRepeated"].empty()) {
      numRepeated = make_shared<long>(boost::any_cast<long>(m["NumRepeated"]));
    }
    if (m.find("OutboundNums") != m.end() && !m["OutboundNums"].empty()) {
      outboundNumsShrink = make_shared<string>(boost::any_cast<string>(m["OutboundNums"]));
    }
    if (m.find("RecallRule") != m.end() && !m["RecallRule"].empty()) {
      recallRuleShrink = make_shared<string>(boost::any_cast<string>(m["RecallRule"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<long>(boost::any_cast<long>(m["Type"]));
    }
  }


  virtual ~CreateAiOutboundTaskShrinkRequest() = default;
};
class CreateAiOutboundTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  CreateAiOutboundTaskResponseBody() {}

  explicit CreateAiOutboundTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<long>(boost::any_cast<long>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~CreateAiOutboundTaskResponseBody() = default;
};
class CreateAiOutboundTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<CreateAiOutboundTaskResponseBody> body{};

  CreateAiOutboundTaskResponse() {}

  explicit CreateAiOutboundTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateAiOutboundTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateAiOutboundTaskResponseBody>(model1);
      }
    }
  }


  virtual ~CreateAiOutboundTaskResponse() = default;
};
class CreateAiOutboundTaskBatchRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> taskId{};

  CreateAiOutboundTaskBatchRequest() {}

  explicit CreateAiOutboundTaskBatchRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~CreateAiOutboundTaskBatchRequest() = default;
};
class CreateAiOutboundTaskBatchResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  CreateAiOutboundTaskBatchResponseBody() {}

  explicit CreateAiOutboundTaskBatchResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<long>(boost::any_cast<long>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~CreateAiOutboundTaskBatchResponseBody() = default;
};
class CreateAiOutboundTaskBatchResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<CreateAiOutboundTaskBatchResponseBody> body{};

  CreateAiOutboundTaskBatchResponse() {}

  explicit CreateAiOutboundTaskBatchResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateAiOutboundTaskBatchResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateAiOutboundTaskBatchResponseBody>(model1);
      }
    }
  }


  virtual ~CreateAiOutboundTaskBatchResponse() = default;
};
class CreateDepartmentRequest : public Darabonba::Model {
public:
  shared_ptr<string> departmentName{};
  shared_ptr<string> instanceId{};

  CreateDepartmentRequest() {}

  explicit CreateDepartmentRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (departmentName) {
      res["DepartmentName"] = boost::any(*departmentName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DepartmentName") != m.end() && !m["DepartmentName"].empty()) {
      departmentName = make_shared<string>(boost::any_cast<string>(m["DepartmentName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~CreateDepartmentRequest() = default;
};
class CreateDepartmentResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  CreateDepartmentResponseBody() {}

  explicit CreateDepartmentResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<long>(boost::any_cast<long>(m["Data"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~CreateDepartmentResponseBody() = default;
};
class CreateDepartmentResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<CreateDepartmentResponseBody> body{};

  CreateDepartmentResponse() {}

  explicit CreateDepartmentResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateDepartmentResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateDepartmentResponseBody>(model1);
      }
    }
  }


  virtual ~CreateDepartmentResponse() = default;
};
class CreateOutboundTaskRequest : public Darabonba::Model {
public:
  shared_ptr<string> ani{};
  shared_ptr<string> callInfos{};
  shared_ptr<long> departmentId{};
  shared_ptr<string> description{};
  shared_ptr<string> endDate{};
  shared_ptr<string> endTime{};
  shared_ptr<string> extAttrs{};
  shared_ptr<string> groupName{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> model{};
  shared_ptr<long> retryInterval{};
  shared_ptr<long> retryTime{};
  shared_ptr<long> skillGroup{};
  shared_ptr<string> startDate{};
  shared_ptr<string> startTime{};
  shared_ptr<string> taskName{};
  shared_ptr<long> taskType{};

  CreateOutboundTaskRequest() {}

  explicit CreateOutboundTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ani) {
      res["Ani"] = boost::any(*ani);
    }
    if (callInfos) {
      res["CallInfos"] = boost::any(*callInfos);
    }
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (extAttrs) {
      res["ExtAttrs"] = boost::any(*extAttrs);
    }
    if (groupName) {
      res["GroupName"] = boost::any(*groupName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (model) {
      res["Model"] = boost::any(*model);
    }
    if (retryInterval) {
      res["RetryInterval"] = boost::any(*retryInterval);
    }
    if (retryTime) {
      res["RetryTime"] = boost::any(*retryTime);
    }
    if (skillGroup) {
      res["SkillGroup"] = boost::any(*skillGroup);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    if (taskName) {
      res["TaskName"] = boost::any(*taskName);
    }
    if (taskType) {
      res["TaskType"] = boost::any(*taskType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Ani") != m.end() && !m["Ani"].empty()) {
      ani = make_shared<string>(boost::any_cast<string>(m["Ani"]));
    }
    if (m.find("CallInfos") != m.end() && !m["CallInfos"].empty()) {
      callInfos = make_shared<string>(boost::any_cast<string>(m["CallInfos"]));
    }
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<string>(boost::any_cast<string>(m["EndDate"]));
    }
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<string>(boost::any_cast<string>(m["EndTime"]));
    }
    if (m.find("ExtAttrs") != m.end() && !m["ExtAttrs"].empty()) {
      extAttrs = make_shared<string>(boost::any_cast<string>(m["ExtAttrs"]));
    }
    if (m.find("GroupName") != m.end() && !m["GroupName"].empty()) {
      groupName = make_shared<string>(boost::any_cast<string>(m["GroupName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("Model") != m.end() && !m["Model"].empty()) {
      model = make_shared<long>(boost::any_cast<long>(m["Model"]));
    }
    if (m.find("RetryInterval") != m.end() && !m["RetryInterval"].empty()) {
      retryInterval = make_shared<long>(boost::any_cast<long>(m["RetryInterval"]));
    }
    if (m.find("RetryTime") != m.end() && !m["RetryTime"].empty()) {
      retryTime = make_shared<long>(boost::any_cast<long>(m["RetryTime"]));
    }
    if (m.find("SkillGroup") != m.end() && !m["SkillGroup"].empty()) {
      skillGroup = make_shared<long>(boost::any_cast<long>(m["SkillGroup"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<string>(boost::any_cast<string>(m["StartDate"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<string>(boost::any_cast<string>(m["StartTime"]));
    }
    if (m.find("TaskName") != m.end() && !m["TaskName"].empty()) {
      taskName = make_shared<string>(boost::any_cast<string>(m["TaskName"]));
    }
    if (m.find("TaskType") != m.end() && !m["TaskType"].empty()) {
      taskType = make_shared<long>(boost::any_cast<long>(m["TaskType"]));
    }
  }


  virtual ~CreateOutboundTaskRequest() = default;
};
class CreateOutboundTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  CreateOutboundTaskResponseBody() {}

  explicit CreateOutboundTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~CreateOutboundTaskResponseBody() = default;
};
class CreateOutboundTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<CreateOutboundTaskResponseBody> body{};

  CreateOutboundTaskResponse() {}

  explicit CreateOutboundTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateOutboundTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateOutboundTaskResponseBody>(model1);
      }
    }
  }


  virtual ~CreateOutboundTaskResponse() = default;
};
class CreateQualityProjectRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> analysisIds{};
  shared_ptr<vector<long>> channelTouchType{};
  shared_ptr<long> checkFreqType{};
  shared_ptr<vector<long>> depList{};
  shared_ptr<vector<long>> groupList{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> projectName{};
  shared_ptr<long> scopeType{};
  shared_ptr<vector<string>> servicerList{};
  shared_ptr<string> timeRangeEnd{};
  shared_ptr<string> timeRangeStart{};

  CreateQualityProjectRequest() {}

  explicit CreateQualityProjectRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (analysisIds) {
      res["AnalysisIds"] = boost::any(*analysisIds);
    }
    if (channelTouchType) {
      res["ChannelTouchType"] = boost::any(*channelTouchType);
    }
    if (checkFreqType) {
      res["CheckFreqType"] = boost::any(*checkFreqType);
    }
    if (depList) {
      res["DepList"] = boost::any(*depList);
    }
    if (groupList) {
      res["GroupList"] = boost::any(*groupList);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (projectName) {
      res["ProjectName"] = boost::any(*projectName);
    }
    if (scopeType) {
      res["ScopeType"] = boost::any(*scopeType);
    }
    if (servicerList) {
      res["ServicerList"] = boost::any(*servicerList);
    }
    if (timeRangeEnd) {
      res["TimeRangeEnd"] = boost::any(*timeRangeEnd);
    }
    if (timeRangeStart) {
      res["TimeRangeStart"] = boost::any(*timeRangeStart);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AnalysisIds") != m.end() && !m["AnalysisIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["AnalysisIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AnalysisIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      analysisIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("ChannelTouchType") != m.end() && !m["ChannelTouchType"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["ChannelTouchType"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ChannelTouchType"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      channelTouchType = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CheckFreqType") != m.end() && !m["CheckFreqType"].empty()) {
      checkFreqType = make_shared<long>(boost::any_cast<long>(m["CheckFreqType"]));
    }
    if (m.find("DepList") != m.end() && !m["DepList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depList = make_shared<vector<long>>(toVec1);
    }
    if (m.find("GroupList") != m.end() && !m["GroupList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupList = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("ProjectName") != m.end() && !m["ProjectName"].empty()) {
      projectName = make_shared<string>(boost::any_cast<string>(m["ProjectName"]));
    }
    if (m.find("ScopeType") != m.end() && !m["ScopeType"].empty()) {
      scopeType = make_shared<long>(boost::any_cast<long>(m["ScopeType"]));
    }
    if (m.find("ServicerList") != m.end() && !m["ServicerList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["ServicerList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ServicerList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      servicerList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("TimeRangeEnd") != m.end() && !m["TimeRangeEnd"].empty()) {
      timeRangeEnd = make_shared<string>(boost::any_cast<string>(m["TimeRangeEnd"]));
    }
    if (m.find("TimeRangeStart") != m.end() && !m["TimeRangeStart"].empty()) {
      timeRangeStart = make_shared<string>(boost::any_cast<string>(m["TimeRangeStart"]));
    }
  }


  virtual ~CreateQualityProjectRequest() = default;
};
class CreateQualityProjectResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> projectId{};
  shared_ptr<long> version{};

  CreateQualityProjectResponseBodyData() {}

  explicit CreateQualityProjectResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (projectId) {
      res["ProjectId"] = boost::any(*projectId);
    }
    if (version) {
      res["Version"] = boost::any(*version);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("ProjectId") != m.end() && !m["ProjectId"].empty()) {
      projectId = make_shared<long>(boost::any_cast<long>(m["ProjectId"]));
    }
    if (m.find("Version") != m.end() && !m["Version"].empty()) {
      version = make_shared<long>(boost::any_cast<long>(m["Version"]));
    }
  }


  virtual ~CreateQualityProjectResponseBodyData() = default;
};
class CreateQualityProjectResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<CreateQualityProjectResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  CreateQualityProjectResponseBody() {}

  explicit CreateQualityProjectResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        CreateQualityProjectResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<CreateQualityProjectResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~CreateQualityProjectResponseBody() = default;
};
class CreateQualityProjectResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<CreateQualityProjectResponseBody> body{};

  CreateQualityProjectResponse() {}

  explicit CreateQualityProjectResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateQualityProjectResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateQualityProjectResponseBody>(model1);
      }
    }
  }


  virtual ~CreateQualityProjectResponse() = default;
};
class CreateQualityRuleRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<vector<string>> keyWords{};
  shared_ptr<long> matchType{};
  shared_ptr<string> name{};
  shared_ptr<long> ruleTag{};

  CreateQualityRuleRequest() {}

  explicit CreateQualityRuleRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (keyWords) {
      res["KeyWords"] = boost::any(*keyWords);
    }
    if (matchType) {
      res["MatchType"] = boost::any(*matchType);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (ruleTag) {
      res["RuleTag"] = boost::any(*ruleTag);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("KeyWords") != m.end() && !m["KeyWords"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["KeyWords"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["KeyWords"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      keyWords = make_shared<vector<string>>(toVec1);
    }
    if (m.find("MatchType") != m.end() && !m["MatchType"].empty()) {
      matchType = make_shared<long>(boost::any_cast<long>(m["MatchType"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("RuleTag") != m.end() && !m["RuleTag"].empty()) {
      ruleTag = make_shared<long>(boost::any_cast<long>(m["RuleTag"]));
    }
  }


  virtual ~CreateQualityRuleRequest() = default;
};
class CreateQualityRuleResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  CreateQualityRuleResponseBody() {}

  explicit CreateQualityRuleResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~CreateQualityRuleResponseBody() = default;
};
class CreateQualityRuleResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<CreateQualityRuleResponseBody> body{};

  CreateQualityRuleResponse() {}

  explicit CreateQualityRuleResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateQualityRuleResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateQualityRuleResponseBody>(model1);
      }
    }
  }


  virtual ~CreateQualityRuleResponse() = default;
};
class CreateSkillGroupRequest : public Darabonba::Model {
public:
  shared_ptr<long> channelType{};
  shared_ptr<string> clientToken{};
  shared_ptr<long> departmentId{};
  shared_ptr<string> description{};
  shared_ptr<string> displayName{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> skillGroupName{};

  CreateSkillGroupRequest() {}

  explicit CreateSkillGroupRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (channelType) {
      res["ChannelType"] = boost::any(*channelType);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (displayName) {
      res["DisplayName"] = boost::any(*displayName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (skillGroupName) {
      res["SkillGroupName"] = boost::any(*skillGroupName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ChannelType") != m.end() && !m["ChannelType"].empty()) {
      channelType = make_shared<long>(boost::any_cast<long>(m["ChannelType"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("DisplayName") != m.end() && !m["DisplayName"].empty()) {
      displayName = make_shared<string>(boost::any_cast<string>(m["DisplayName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("SkillGroupName") != m.end() && !m["SkillGroupName"].empty()) {
      skillGroupName = make_shared<string>(boost::any_cast<string>(m["SkillGroupName"]));
    }
  }


  virtual ~CreateSkillGroupRequest() = default;
};
class CreateSkillGroupResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  CreateSkillGroupResponseBody() {}

  explicit CreateSkillGroupResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<long>(boost::any_cast<long>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~CreateSkillGroupResponseBody() = default;
};
class CreateSkillGroupResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<CreateSkillGroupResponseBody> body{};

  CreateSkillGroupResponse() {}

  explicit CreateSkillGroupResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateSkillGroupResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateSkillGroupResponseBody>(model1);
      }
    }
  }


  virtual ~CreateSkillGroupResponse() = default;
};
class CreateTaskRequest : public Darabonba::Model {
public:
  shared_ptr<string> callString{};
  shared_ptr<string> callStringType{};
  shared_ptr<string> caller{};
  shared_ptr<long> ownerId{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> retryCount{};
  shared_ptr<long> retryFlag{};
  shared_ptr<long> retryInterval{};
  shared_ptr<string> retryStatusCode{};
  shared_ptr<string> robotId{};
  shared_ptr<string> seatCount{};
  shared_ptr<bool> startNow{};
  shared_ptr<string> taskName{};
  shared_ptr<string> workDay{};
  shared_ptr<string> workTimeList{};

  CreateTaskRequest() {}

  explicit CreateTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callString) {
      res["CallString"] = boost::any(*callString);
    }
    if (callStringType) {
      res["CallStringType"] = boost::any(*callStringType);
    }
    if (caller) {
      res["Caller"] = boost::any(*caller);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (retryCount) {
      res["RetryCount"] = boost::any(*retryCount);
    }
    if (retryFlag) {
      res["RetryFlag"] = boost::any(*retryFlag);
    }
    if (retryInterval) {
      res["RetryInterval"] = boost::any(*retryInterval);
    }
    if (retryStatusCode) {
      res["RetryStatusCode"] = boost::any(*retryStatusCode);
    }
    if (robotId) {
      res["RobotId"] = boost::any(*robotId);
    }
    if (seatCount) {
      res["SeatCount"] = boost::any(*seatCount);
    }
    if (startNow) {
      res["StartNow"] = boost::any(*startNow);
    }
    if (taskName) {
      res["TaskName"] = boost::any(*taskName);
    }
    if (workDay) {
      res["WorkDay"] = boost::any(*workDay);
    }
    if (workTimeList) {
      res["WorkTimeList"] = boost::any(*workTimeList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallString") != m.end() && !m["CallString"].empty()) {
      callString = make_shared<string>(boost::any_cast<string>(m["CallString"]));
    }
    if (m.find("CallStringType") != m.end() && !m["CallStringType"].empty()) {
      callStringType = make_shared<string>(boost::any_cast<string>(m["CallStringType"]));
    }
    if (m.find("Caller") != m.end() && !m["Caller"].empty()) {
      caller = make_shared<string>(boost::any_cast<string>(m["Caller"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("RetryCount") != m.end() && !m["RetryCount"].empty()) {
      retryCount = make_shared<long>(boost::any_cast<long>(m["RetryCount"]));
    }
    if (m.find("RetryFlag") != m.end() && !m["RetryFlag"].empty()) {
      retryFlag = make_shared<long>(boost::any_cast<long>(m["RetryFlag"]));
    }
    if (m.find("RetryInterval") != m.end() && !m["RetryInterval"].empty()) {
      retryInterval = make_shared<long>(boost::any_cast<long>(m["RetryInterval"]));
    }
    if (m.find("RetryStatusCode") != m.end() && !m["RetryStatusCode"].empty()) {
      retryStatusCode = make_shared<string>(boost::any_cast<string>(m["RetryStatusCode"]));
    }
    if (m.find("RobotId") != m.end() && !m["RobotId"].empty()) {
      robotId = make_shared<string>(boost::any_cast<string>(m["RobotId"]));
    }
    if (m.find("SeatCount") != m.end() && !m["SeatCount"].empty()) {
      seatCount = make_shared<string>(boost::any_cast<string>(m["SeatCount"]));
    }
    if (m.find("StartNow") != m.end() && !m["StartNow"].empty()) {
      startNow = make_shared<bool>(boost::any_cast<bool>(m["StartNow"]));
    }
    if (m.find("TaskName") != m.end() && !m["TaskName"].empty()) {
      taskName = make_shared<string>(boost::any_cast<string>(m["TaskName"]));
    }
    if (m.find("WorkDay") != m.end() && !m["WorkDay"].empty()) {
      workDay = make_shared<string>(boost::any_cast<string>(m["WorkDay"]));
    }
    if (m.find("WorkTimeList") != m.end() && !m["WorkTimeList"].empty()) {
      workTimeList = make_shared<string>(boost::any_cast<string>(m["WorkTimeList"]));
    }
  }


  virtual ~CreateTaskRequest() = default;
};
class CreateTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  CreateTaskResponseBody() {}

  explicit CreateTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<long>(boost::any_cast<long>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~CreateTaskResponseBody() = default;
};
class CreateTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<CreateTaskResponseBody> body{};

  CreateTaskResponse() {}

  explicit CreateTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateTaskResponseBody>(model1);
      }
    }
  }


  virtual ~CreateTaskResponse() = default;
};
class CreateThirdSsoAgentRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountId{};
  shared_ptr<string> accountName{};
  shared_ptr<string> clientId{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> displayName{};
  shared_ptr<string> instanceId{};
  shared_ptr<vector<long>> roleIds{};
  shared_ptr<vector<long>> skillGroupIds{};

  CreateThirdSsoAgentRequest() {}

  explicit CreateThirdSsoAgentRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountId) {
      res["AccountId"] = boost::any(*accountId);
    }
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientId) {
      res["ClientId"] = boost::any(*clientId);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (displayName) {
      res["DisplayName"] = boost::any(*displayName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (roleIds) {
      res["RoleIds"] = boost::any(*roleIds);
    }
    if (skillGroupIds) {
      res["SkillGroupIds"] = boost::any(*skillGroupIds);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountId") != m.end() && !m["AccountId"].empty()) {
      accountId = make_shared<string>(boost::any_cast<string>(m["AccountId"]));
    }
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientId") != m.end() && !m["ClientId"].empty()) {
      clientId = make_shared<string>(boost::any_cast<string>(m["ClientId"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("DisplayName") != m.end() && !m["DisplayName"].empty()) {
      displayName = make_shared<string>(boost::any_cast<string>(m["DisplayName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("RoleIds") != m.end() && !m["RoleIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["RoleIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["RoleIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      roleIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("SkillGroupIds") != m.end() && !m["SkillGroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["SkillGroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["SkillGroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      skillGroupIds = make_shared<vector<long>>(toVec1);
    }
  }


  virtual ~CreateThirdSsoAgentRequest() = default;
};
class CreateThirdSsoAgentResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  CreateThirdSsoAgentResponseBody() {}

  explicit CreateThirdSsoAgentResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<long>(boost::any_cast<long>(m["Data"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~CreateThirdSsoAgentResponseBody() = default;
};
class CreateThirdSsoAgentResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<CreateThirdSsoAgentResponseBody> body{};

  CreateThirdSsoAgentResponse() {}

  explicit CreateThirdSsoAgentResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        CreateThirdSsoAgentResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<CreateThirdSsoAgentResponseBody>(model1);
      }
    }
  }


  virtual ~CreateThirdSsoAgentResponse() = default;
};
class DeleteAgentRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  DeleteAgentRequest() {}

  explicit DeleteAgentRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~DeleteAgentRequest() = default;
};
class DeleteAgentResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  DeleteAgentResponseBody() {}

  explicit DeleteAgentResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~DeleteAgentResponseBody() = default;
};
class DeleteAgentResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<DeleteAgentResponseBody> body{};

  DeleteAgentResponse() {}

  explicit DeleteAgentResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteAgentResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteAgentResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteAgentResponse() = default;
};
class DeleteAiOutboundTaskRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> taskId{};

  DeleteAiOutboundTaskRequest() {}

  explicit DeleteAiOutboundTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~DeleteAiOutboundTaskRequest() = default;
};
class DeleteAiOutboundTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  DeleteAiOutboundTaskResponseBody() {}

  explicit DeleteAiOutboundTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~DeleteAiOutboundTaskResponseBody() = default;
};
class DeleteAiOutboundTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<DeleteAiOutboundTaskResponseBody> body{};

  DeleteAiOutboundTaskResponse() {}

  explicit DeleteAiOutboundTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteAiOutboundTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteAiOutboundTaskResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteAiOutboundTaskResponse() = default;
};
class DeleteDepartmentRequest : public Darabonba::Model {
public:
  shared_ptr<long> departmentId{};
  shared_ptr<string> instanceId{};

  DeleteDepartmentRequest() {}

  explicit DeleteDepartmentRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~DeleteDepartmentRequest() = default;
};
class DeleteDepartmentResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<bool> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  DeleteDepartmentResponseBody() {}

  explicit DeleteDepartmentResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<bool>(boost::any_cast<bool>(m["Data"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~DeleteDepartmentResponseBody() = default;
};
class DeleteDepartmentResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<DeleteDepartmentResponseBody> body{};

  DeleteDepartmentResponse() {}

  explicit DeleteDepartmentResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteDepartmentResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteDepartmentResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteDepartmentResponse() = default;
};
class DeleteHotlineNumberRequest : public Darabonba::Model {
public:
  shared_ptr<string> hotlineNumber{};
  shared_ptr<string> instanceId{};

  DeleteHotlineNumberRequest() {}

  explicit DeleteHotlineNumberRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (hotlineNumber) {
      res["HotlineNumber"] = boost::any(*hotlineNumber);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("HotlineNumber") != m.end() && !m["HotlineNumber"].empty()) {
      hotlineNumber = make_shared<string>(boost::any_cast<string>(m["HotlineNumber"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~DeleteHotlineNumberRequest() = default;
};
class DeleteHotlineNumberResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  DeleteHotlineNumberResponseBody() {}

  explicit DeleteHotlineNumberResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~DeleteHotlineNumberResponseBody() = default;
};
class DeleteHotlineNumberResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<DeleteHotlineNumberResponseBody> body{};

  DeleteHotlineNumberResponse() {}

  explicit DeleteHotlineNumberResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteHotlineNumberResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteHotlineNumberResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteHotlineNumberResponse() = default;
};
class DeleteOutboundTaskRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> outboundTaskId{};

  DeleteOutboundTaskRequest() {}

  explicit DeleteOutboundTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (outboundTaskId) {
      res["OutboundTaskId"] = boost::any(*outboundTaskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("OutboundTaskId") != m.end() && !m["OutboundTaskId"].empty()) {
      outboundTaskId = make_shared<long>(boost::any_cast<long>(m["OutboundTaskId"]));
    }
  }


  virtual ~DeleteOutboundTaskRequest() = default;
};
class DeleteOutboundTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  DeleteOutboundTaskResponseBody() {}

  explicit DeleteOutboundTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~DeleteOutboundTaskResponseBody() = default;
};
class DeleteOutboundTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<DeleteOutboundTaskResponseBody> body{};

  DeleteOutboundTaskResponse() {}

  explicit DeleteOutboundTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteOutboundTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteOutboundTaskResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteOutboundTaskResponse() = default;
};
class DeleteOuterAccountRequest : public Darabonba::Model {
public:
  shared_ptr<string> outerAccountId{};
  shared_ptr<string> outerAccountType{};

  DeleteOuterAccountRequest() {}

  explicit DeleteOuterAccountRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (outerAccountId) {
      res["OuterAccountId"] = boost::any(*outerAccountId);
    }
    if (outerAccountType) {
      res["OuterAccountType"] = boost::any(*outerAccountType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("OuterAccountId") != m.end() && !m["OuterAccountId"].empty()) {
      outerAccountId = make_shared<string>(boost::any_cast<string>(m["OuterAccountId"]));
    }
    if (m.find("OuterAccountType") != m.end() && !m["OuterAccountType"].empty()) {
      outerAccountType = make_shared<string>(boost::any_cast<string>(m["OuterAccountType"]));
    }
  }


  virtual ~DeleteOuterAccountRequest() = default;
};
class DeleteOuterAccountResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<bool> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  DeleteOuterAccountResponseBody() {}

  explicit DeleteOuterAccountResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<bool>(boost::any_cast<bool>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~DeleteOuterAccountResponseBody() = default;
};
class DeleteOuterAccountResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<DeleteOuterAccountResponseBody> body{};

  DeleteOuterAccountResponse() {}

  explicit DeleteOuterAccountResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteOuterAccountResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteOuterAccountResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteOuterAccountResponse() = default;
};
class DeleteQualityProjectRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> projectId{};

  DeleteQualityProjectRequest() {}

  explicit DeleteQualityProjectRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (projectId) {
      res["ProjectId"] = boost::any(*projectId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("ProjectId") != m.end() && !m["ProjectId"].empty()) {
      projectId = make_shared<long>(boost::any_cast<long>(m["ProjectId"]));
    }
  }


  virtual ~DeleteQualityProjectRequest() = default;
};
class DeleteQualityProjectResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  DeleteQualityProjectResponseBody() {}

  explicit DeleteQualityProjectResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~DeleteQualityProjectResponseBody() = default;
};
class DeleteQualityProjectResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<DeleteQualityProjectResponseBody> body{};

  DeleteQualityProjectResponse() {}

  explicit DeleteQualityProjectResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteQualityProjectResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteQualityProjectResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteQualityProjectResponse() = default;
};
class DeleteQualityRuleRequest : public Darabonba::Model {
public:
  shared_ptr<long> id{};
  shared_ptr<string> instanceId{};

  DeleteQualityRuleRequest() {}

  explicit DeleteQualityRuleRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~DeleteQualityRuleRequest() = default;
};
class DeleteQualityRuleResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  DeleteQualityRuleResponseBody() {}

  explicit DeleteQualityRuleResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~DeleteQualityRuleResponseBody() = default;
};
class DeleteQualityRuleResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<DeleteQualityRuleResponseBody> body{};

  DeleteQualityRuleResponse() {}

  explicit DeleteQualityRuleResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteQualityRuleResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteQualityRuleResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteQualityRuleResponse() = default;
};
class DeleteSkillGroupRequest : public Darabonba::Model {
public:
  shared_ptr<string> outerGroupId{};
  shared_ptr<string> outerGroupType{};

  DeleteSkillGroupRequest() {}

  explicit DeleteSkillGroupRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (outerGroupId) {
      res["OuterGroupId"] = boost::any(*outerGroupId);
    }
    if (outerGroupType) {
      res["OuterGroupType"] = boost::any(*outerGroupType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("OuterGroupId") != m.end() && !m["OuterGroupId"].empty()) {
      outerGroupId = make_shared<string>(boost::any_cast<string>(m["OuterGroupId"]));
    }
    if (m.find("OuterGroupType") != m.end() && !m["OuterGroupType"].empty()) {
      outerGroupType = make_shared<string>(boost::any_cast<string>(m["OuterGroupType"]));
    }
  }


  virtual ~DeleteSkillGroupRequest() = default;
};
class DeleteSkillGroupResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<bool> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  DeleteSkillGroupResponseBody() {}

  explicit DeleteSkillGroupResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<bool>(boost::any_cast<bool>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~DeleteSkillGroupResponseBody() = default;
};
class DeleteSkillGroupResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<DeleteSkillGroupResponseBody> body{};

  DeleteSkillGroupResponse() {}

  explicit DeleteSkillGroupResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DeleteSkillGroupResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DeleteSkillGroupResponseBody>(model1);
      }
    }
  }


  virtual ~DeleteSkillGroupResponse() = default;
};
class DescribeRecordDataRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountId{};
  shared_ptr<string> accountType{};
  shared_ptr<string> acid{};
  shared_ptr<long> ownerId{};
  shared_ptr<string> prodCode{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> secLevel{};

  DescribeRecordDataRequest() {}

  explicit DescribeRecordDataRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountId) {
      res["AccountId"] = boost::any(*accountId);
    }
    if (accountType) {
      res["AccountType"] = boost::any(*accountType);
    }
    if (acid) {
      res["Acid"] = boost::any(*acid);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (prodCode) {
      res["ProdCode"] = boost::any(*prodCode);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (secLevel) {
      res["SecLevel"] = boost::any(*secLevel);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountId") != m.end() && !m["AccountId"].empty()) {
      accountId = make_shared<string>(boost::any_cast<string>(m["AccountId"]));
    }
    if (m.find("AccountType") != m.end() && !m["AccountType"].empty()) {
      accountType = make_shared<string>(boost::any_cast<string>(m["AccountType"]));
    }
    if (m.find("Acid") != m.end() && !m["Acid"].empty()) {
      acid = make_shared<string>(boost::any_cast<string>(m["Acid"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ProdCode") != m.end() && !m["ProdCode"].empty()) {
      prodCode = make_shared<string>(boost::any_cast<string>(m["ProdCode"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SecLevel") != m.end() && !m["SecLevel"].empty()) {
      secLevel = make_shared<long>(boost::any_cast<long>(m["SecLevel"]));
    }
  }


  virtual ~DescribeRecordDataRequest() = default;
};
class DescribeRecordDataResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> acid{};
  shared_ptr<string> agentId{};
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> ossLink{};
  shared_ptr<string> requestId{};

  DescribeRecordDataResponseBody() {}

  explicit DescribeRecordDataResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (acid) {
      res["Acid"] = boost::any(*acid);
    }
    if (agentId) {
      res["AgentId"] = boost::any(*agentId);
    }
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (ossLink) {
      res["OssLink"] = boost::any(*ossLink);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Acid") != m.end() && !m["Acid"].empty()) {
      acid = make_shared<string>(boost::any_cast<string>(m["Acid"]));
    }
    if (m.find("AgentId") != m.end() && !m["AgentId"].empty()) {
      agentId = make_shared<string>(boost::any_cast<string>(m["AgentId"]));
    }
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("OssLink") != m.end() && !m["OssLink"].empty()) {
      ossLink = make_shared<string>(boost::any_cast<string>(m["OssLink"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~DescribeRecordDataResponseBody() = default;
};
class DescribeRecordDataResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<DescribeRecordDataResponseBody> body{};

  DescribeRecordDataResponse() {}

  explicit DescribeRecordDataResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        DescribeRecordDataResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<DescribeRecordDataResponseBody>(model1);
      }
    }
  }


  virtual ~DescribeRecordDataResponse() = default;
};
class EditQualityProjectRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> analysisIds{};
  shared_ptr<vector<long>> channelTouchType{};
  shared_ptr<long> checkFreqType{};
  shared_ptr<vector<long>> depList{};
  shared_ptr<vector<long>> groupList{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> projectId{};
  shared_ptr<string> projectName{};
  shared_ptr<long> projectVersion{};
  shared_ptr<long> scopeType{};
  shared_ptr<vector<string>> servicerList{};
  shared_ptr<string> timeRangeEnd{};
  shared_ptr<string> timeRangeStart{};

  EditQualityProjectRequest() {}

  explicit EditQualityProjectRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (analysisIds) {
      res["AnalysisIds"] = boost::any(*analysisIds);
    }
    if (channelTouchType) {
      res["ChannelTouchType"] = boost::any(*channelTouchType);
    }
    if (checkFreqType) {
      res["CheckFreqType"] = boost::any(*checkFreqType);
    }
    if (depList) {
      res["DepList"] = boost::any(*depList);
    }
    if (groupList) {
      res["GroupList"] = boost::any(*groupList);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (projectId) {
      res["ProjectId"] = boost::any(*projectId);
    }
    if (projectName) {
      res["ProjectName"] = boost::any(*projectName);
    }
    if (projectVersion) {
      res["ProjectVersion"] = boost::any(*projectVersion);
    }
    if (scopeType) {
      res["ScopeType"] = boost::any(*scopeType);
    }
    if (servicerList) {
      res["ServicerList"] = boost::any(*servicerList);
    }
    if (timeRangeEnd) {
      res["TimeRangeEnd"] = boost::any(*timeRangeEnd);
    }
    if (timeRangeStart) {
      res["TimeRangeStart"] = boost::any(*timeRangeStart);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AnalysisIds") != m.end() && !m["AnalysisIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["AnalysisIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AnalysisIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      analysisIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("ChannelTouchType") != m.end() && !m["ChannelTouchType"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["ChannelTouchType"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ChannelTouchType"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      channelTouchType = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CheckFreqType") != m.end() && !m["CheckFreqType"].empty()) {
      checkFreqType = make_shared<long>(boost::any_cast<long>(m["CheckFreqType"]));
    }
    if (m.find("DepList") != m.end() && !m["DepList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depList = make_shared<vector<long>>(toVec1);
    }
    if (m.find("GroupList") != m.end() && !m["GroupList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupList = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("ProjectId") != m.end() && !m["ProjectId"].empty()) {
      projectId = make_shared<long>(boost::any_cast<long>(m["ProjectId"]));
    }
    if (m.find("ProjectName") != m.end() && !m["ProjectName"].empty()) {
      projectName = make_shared<string>(boost::any_cast<string>(m["ProjectName"]));
    }
    if (m.find("ProjectVersion") != m.end() && !m["ProjectVersion"].empty()) {
      projectVersion = make_shared<long>(boost::any_cast<long>(m["ProjectVersion"]));
    }
    if (m.find("ScopeType") != m.end() && !m["ScopeType"].empty()) {
      scopeType = make_shared<long>(boost::any_cast<long>(m["ScopeType"]));
    }
    if (m.find("ServicerList") != m.end() && !m["ServicerList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["ServicerList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ServicerList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      servicerList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("TimeRangeEnd") != m.end() && !m["TimeRangeEnd"].empty()) {
      timeRangeEnd = make_shared<string>(boost::any_cast<string>(m["TimeRangeEnd"]));
    }
    if (m.find("TimeRangeStart") != m.end() && !m["TimeRangeStart"].empty()) {
      timeRangeStart = make_shared<string>(boost::any_cast<string>(m["TimeRangeStart"]));
    }
  }


  virtual ~EditQualityProjectRequest() = default;
};
class EditQualityProjectResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> projectId{};
  shared_ptr<long> version{};

  EditQualityProjectResponseBodyData() {}

  explicit EditQualityProjectResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (projectId) {
      res["ProjectId"] = boost::any(*projectId);
    }
    if (version) {
      res["Version"] = boost::any(*version);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("ProjectId") != m.end() && !m["ProjectId"].empty()) {
      projectId = make_shared<long>(boost::any_cast<long>(m["ProjectId"]));
    }
    if (m.find("Version") != m.end() && !m["Version"].empty()) {
      version = make_shared<long>(boost::any_cast<long>(m["Version"]));
    }
  }


  virtual ~EditQualityProjectResponseBodyData() = default;
};
class EditQualityProjectResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<EditQualityProjectResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  EditQualityProjectResponseBody() {}

  explicit EditQualityProjectResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<EditQualityProjectResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            EditQualityProjectResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<EditQualityProjectResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~EditQualityProjectResponseBody() = default;
};
class EditQualityProjectResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<EditQualityProjectResponseBody> body{};

  EditQualityProjectResponse() {}

  explicit EditQualityProjectResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        EditQualityProjectResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<EditQualityProjectResponseBody>(model1);
      }
    }
  }


  virtual ~EditQualityProjectResponse() = default;
};
class EditQualityRuleRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<vector<string>> keyWords{};
  shared_ptr<long> matchType{};
  shared_ptr<string> name{};
  shared_ptr<long> qualityRuleId{};
  shared_ptr<long> ruleTag{};

  EditQualityRuleRequest() {}

  explicit EditQualityRuleRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (keyWords) {
      res["KeyWords"] = boost::any(*keyWords);
    }
    if (matchType) {
      res["MatchType"] = boost::any(*matchType);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (qualityRuleId) {
      res["QualityRuleId"] = boost::any(*qualityRuleId);
    }
    if (ruleTag) {
      res["RuleTag"] = boost::any(*ruleTag);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("KeyWords") != m.end() && !m["KeyWords"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["KeyWords"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["KeyWords"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      keyWords = make_shared<vector<string>>(toVec1);
    }
    if (m.find("MatchType") != m.end() && !m["MatchType"].empty()) {
      matchType = make_shared<long>(boost::any_cast<long>(m["MatchType"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("QualityRuleId") != m.end() && !m["QualityRuleId"].empty()) {
      qualityRuleId = make_shared<long>(boost::any_cast<long>(m["QualityRuleId"]));
    }
    if (m.find("RuleTag") != m.end() && !m["RuleTag"].empty()) {
      ruleTag = make_shared<long>(boost::any_cast<long>(m["RuleTag"]));
    }
  }


  virtual ~EditQualityRuleRequest() = default;
};
class EditQualityRuleResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  EditQualityRuleResponseBody() {}

  explicit EditQualityRuleResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~EditQualityRuleResponseBody() = default;
};
class EditQualityRuleResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<EditQualityRuleResponseBody> body{};

  EditQualityRuleResponse() {}

  explicit EditQualityRuleResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        EditQualityRuleResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<EditQualityRuleResponseBody>(model1);
      }
    }
  }


  virtual ~EditQualityRuleResponse() = default;
};
class EditQualityRuleTagRequestAnalysisTypes : public Darabonba::Model {
public:
  shared_ptr<long> id{};
  shared_ptr<string> name{};

  EditQualityRuleTagRequestAnalysisTypes() {}

  explicit EditQualityRuleTagRequestAnalysisTypes(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
  }


  virtual ~EditQualityRuleTagRequestAnalysisTypes() = default;
};
class EditQualityRuleTagRequest : public Darabonba::Model {
public:
  shared_ptr<vector<EditQualityRuleTagRequestAnalysisTypes>> analysisTypes{};
  shared_ptr<string> instanceId{};

  EditQualityRuleTagRequest() {}

  explicit EditQualityRuleTagRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (analysisTypes) {
      vector<boost::any> temp1;
      for(auto item1:*analysisTypes){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["AnalysisTypes"] = boost::any(temp1);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AnalysisTypes") != m.end() && !m["AnalysisTypes"].empty()) {
      if (typeid(vector<boost::any>) == m["AnalysisTypes"].type()) {
        vector<EditQualityRuleTagRequestAnalysisTypes> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["AnalysisTypes"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            EditQualityRuleTagRequestAnalysisTypes model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        analysisTypes = make_shared<vector<EditQualityRuleTagRequestAnalysisTypes>>(expect1);
      }
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~EditQualityRuleTagRequest() = default;
};
class EditQualityRuleTagResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  EditQualityRuleTagResponseBody() {}

  explicit EditQualityRuleTagResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~EditQualityRuleTagResponseBody() = default;
};
class EditQualityRuleTagResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<EditQualityRuleTagResponseBody> body{};

  EditQualityRuleTagResponse() {}

  explicit EditQualityRuleTagResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        EditQualityRuleTagResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<EditQualityRuleTagResponseBody>(model1);
      }
    }
  }


  virtual ~EditQualityRuleTagResponse() = default;
};
class EncryptPhoneNumRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<string> phoneNum{};

  EncryptPhoneNumRequest() {}

  explicit EncryptPhoneNumRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (phoneNum) {
      res["PhoneNum"] = boost::any(*phoneNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PhoneNum") != m.end() && !m["PhoneNum"].empty()) {
      phoneNum = make_shared<string>(boost::any_cast<string>(m["PhoneNum"]));
    }
  }


  virtual ~EncryptPhoneNumRequest() = default;
};
class EncryptPhoneNumResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  EncryptPhoneNumResponseBody() {}

  explicit EncryptPhoneNumResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~EncryptPhoneNumResponseBody() = default;
};
class EncryptPhoneNumResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<EncryptPhoneNumResponseBody> body{};

  EncryptPhoneNumResponse() {}

  explicit EncryptPhoneNumResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        EncryptPhoneNumResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<EncryptPhoneNumResponseBody>(model1);
      }
    }
  }


  virtual ~EncryptPhoneNumResponse() = default;
};
class FetchCallRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> callId{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> connectionId{};
  shared_ptr<string> holdConnectionId{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> jobId{};

  FetchCallRequest() {}

  explicit FetchCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (connectionId) {
      res["ConnectionId"] = boost::any(*connectionId);
    }
    if (holdConnectionId) {
      res["HoldConnectionId"] = boost::any(*holdConnectionId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (jobId) {
      res["JobId"] = boost::any(*jobId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("ConnectionId") != m.end() && !m["ConnectionId"].empty()) {
      connectionId = make_shared<string>(boost::any_cast<string>(m["ConnectionId"]));
    }
    if (m.find("HoldConnectionId") != m.end() && !m["HoldConnectionId"].empty()) {
      holdConnectionId = make_shared<string>(boost::any_cast<string>(m["HoldConnectionId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("JobId") != m.end() && !m["JobId"].empty()) {
      jobId = make_shared<string>(boost::any_cast<string>(m["JobId"]));
    }
  }


  virtual ~FetchCallRequest() = default;
};
class FetchCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  FetchCallResponseBody() {}

  explicit FetchCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~FetchCallResponseBody() = default;
};
class FetchCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<FetchCallResponseBody> body{};

  FetchCallResponse() {}

  explicit FetchCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        FetchCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<FetchCallResponseBody>(model1);
      }
    }
  }


  virtual ~FetchCallResponse() = default;
};
class FinishHotlineServiceRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  FinishHotlineServiceRequest() {}

  explicit FinishHotlineServiceRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~FinishHotlineServiceRequest() = default;
};
class FinishHotlineServiceResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  FinishHotlineServiceResponseBody() {}

  explicit FinishHotlineServiceResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~FinishHotlineServiceResponseBody() = default;
};
class FinishHotlineServiceResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<FinishHotlineServiceResponseBody> body{};

  FinishHotlineServiceResponse() {}

  explicit FinishHotlineServiceResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        FinishHotlineServiceResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<FinishHotlineServiceResponseBody>(model1);
      }
    }
  }


  virtual ~FinishHotlineServiceResponse() = default;
};
class GenerateWebSocketSignRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  GenerateWebSocketSignRequest() {}

  explicit GenerateWebSocketSignRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GenerateWebSocketSignRequest() = default;
};
class GenerateWebSocketSignResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GenerateWebSocketSignResponseBody() {}

  explicit GenerateWebSocketSignResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GenerateWebSocketSignResponseBody() = default;
};
class GenerateWebSocketSignResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GenerateWebSocketSignResponseBody> body{};

  GenerateWebSocketSignResponse() {}

  explicit GenerateWebSocketSignResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GenerateWebSocketSignResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GenerateWebSocketSignResponseBody>(model1);
      }
    }
  }


  virtual ~GenerateWebSocketSignResponse() = default;
};
class GetAgentRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  GetAgentRequest() {}

  explicit GetAgentRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetAgentRequest() = default;
};
class GetAgentResponseBodyDataGroupList : public Darabonba::Model {
public:
  shared_ptr<long> channelType{};
  shared_ptr<string> description{};
  shared_ptr<string> displayName{};
  shared_ptr<string> name{};
  shared_ptr<long> skillGroupId{};

  GetAgentResponseBodyDataGroupList() {}

  explicit GetAgentResponseBodyDataGroupList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (channelType) {
      res["ChannelType"] = boost::any(*channelType);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (displayName) {
      res["DisplayName"] = boost::any(*displayName);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (skillGroupId) {
      res["SkillGroupId"] = boost::any(*skillGroupId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ChannelType") != m.end() && !m["ChannelType"].empty()) {
      channelType = make_shared<long>(boost::any_cast<long>(m["ChannelType"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("DisplayName") != m.end() && !m["DisplayName"].empty()) {
      displayName = make_shared<string>(boost::any_cast<string>(m["DisplayName"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("SkillGroupId") != m.end() && !m["SkillGroupId"].empty()) {
      skillGroupId = make_shared<long>(boost::any_cast<long>(m["SkillGroupId"]));
    }
  }


  virtual ~GetAgentResponseBodyDataGroupList() = default;
};
class GetAgentResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<long> agentId{};
  shared_ptr<string> displayName{};
  shared_ptr<vector<GetAgentResponseBodyDataGroupList>> groupList{};
  shared_ptr<long> status{};
  shared_ptr<long> tenantId{};

  GetAgentResponseBodyData() {}

  explicit GetAgentResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (agentId) {
      res["AgentId"] = boost::any(*agentId);
    }
    if (displayName) {
      res["DisplayName"] = boost::any(*displayName);
    }
    if (groupList) {
      vector<boost::any> temp1;
      for(auto item1:*groupList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["GroupList"] = boost::any(temp1);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (tenantId) {
      res["TenantId"] = boost::any(*tenantId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("AgentId") != m.end() && !m["AgentId"].empty()) {
      agentId = make_shared<long>(boost::any_cast<long>(m["AgentId"]));
    }
    if (m.find("DisplayName") != m.end() && !m["DisplayName"].empty()) {
      displayName = make_shared<string>(boost::any_cast<string>(m["DisplayName"]));
    }
    if (m.find("GroupList") != m.end() && !m["GroupList"].empty()) {
      if (typeid(vector<boost::any>) == m["GroupList"].type()) {
        vector<GetAgentResponseBodyDataGroupList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["GroupList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetAgentResponseBodyDataGroupList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        groupList = make_shared<vector<GetAgentResponseBodyDataGroupList>>(expect1);
      }
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("TenantId") != m.end() && !m["TenantId"].empty()) {
      tenantId = make_shared<long>(boost::any_cast<long>(m["TenantId"]));
    }
  }


  virtual ~GetAgentResponseBodyData() = default;
};
class GetAgentResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetAgentResponseBodyData> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetAgentResponseBody() {}

  explicit GetAgentResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetAgentResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetAgentResponseBodyData>(model1);
      }
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetAgentResponseBody() = default;
};
class GetAgentResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetAgentResponseBody> body{};

  GetAgentResponse() {}

  explicit GetAgentResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetAgentResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetAgentResponseBody>(model1);
      }
    }
  }


  virtual ~GetAgentResponse() = default;
};
class GetAgentBasisStatusRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> agentIds{};
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetAgentBasisStatusRequest() {}

  explicit GetAgentBasisStatusRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIds) {
      res["AgentIds"] = boost::any(*agentIds);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["AgentIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AgentIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      agentIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetAgentBasisStatusRequest() = default;
};
class GetAgentBasisStatusShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> agentIdsShrink{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetAgentBasisStatusShrinkRequest() {}

  explicit GetAgentBasisStatusShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIdsShrink) {
      res["AgentIds"] = boost::any(*agentIdsShrink);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      agentIdsShrink = make_shared<string>(boost::any_cast<string>(m["AgentIds"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetAgentBasisStatusShrinkRequest() = default;
};
class GetAgentBasisStatusResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetAgentBasisStatusResponseBodyData() {}

  explicit GetAgentBasisStatusResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetAgentBasisStatusResponseBodyData() = default;
};
class GetAgentBasisStatusResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetAgentBasisStatusResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetAgentBasisStatusResponseBody() {}

  explicit GetAgentBasisStatusResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetAgentBasisStatusResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetAgentBasisStatusResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetAgentBasisStatusResponseBody() = default;
};
class GetAgentBasisStatusResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetAgentBasisStatusResponseBody> body{};

  GetAgentBasisStatusResponse() {}

  explicit GetAgentBasisStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetAgentBasisStatusResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetAgentBasisStatusResponseBody>(model1);
      }
    }
  }


  virtual ~GetAgentBasisStatusResponse() = default;
};
class GetAgentByIdRequest : public Darabonba::Model {
public:
  shared_ptr<long> agentId{};
  shared_ptr<string> instanceId{};

  GetAgentByIdRequest() {}

  explicit GetAgentByIdRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentId) {
      res["AgentId"] = boost::any(*agentId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentId") != m.end() && !m["AgentId"].empty()) {
      agentId = make_shared<long>(boost::any_cast<long>(m["AgentId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetAgentByIdRequest() = default;
};
class GetAgentByIdResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> agentId{};
  shared_ptr<string> createUserName{};
  shared_ptr<string> foreignKey{};
  shared_ptr<string> foreignNick{};
  shared_ptr<string> realName{};
  shared_ptr<long> servicerType{};
  shared_ptr<string> showName{};

  GetAgentByIdResponseBodyData() {}

  explicit GetAgentByIdResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentId) {
      res["AgentId"] = boost::any(*agentId);
    }
    if (createUserName) {
      res["CreateUserName"] = boost::any(*createUserName);
    }
    if (foreignKey) {
      res["ForeignKey"] = boost::any(*foreignKey);
    }
    if (foreignNick) {
      res["ForeignNick"] = boost::any(*foreignNick);
    }
    if (realName) {
      res["RealName"] = boost::any(*realName);
    }
    if (servicerType) {
      res["ServicerType"] = boost::any(*servicerType);
    }
    if (showName) {
      res["ShowName"] = boost::any(*showName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentId") != m.end() && !m["AgentId"].empty()) {
      agentId = make_shared<long>(boost::any_cast<long>(m["AgentId"]));
    }
    if (m.find("CreateUserName") != m.end() && !m["CreateUserName"].empty()) {
      createUserName = make_shared<string>(boost::any_cast<string>(m["CreateUserName"]));
    }
    if (m.find("ForeignKey") != m.end() && !m["ForeignKey"].empty()) {
      foreignKey = make_shared<string>(boost::any_cast<string>(m["ForeignKey"]));
    }
    if (m.find("ForeignNick") != m.end() && !m["ForeignNick"].empty()) {
      foreignNick = make_shared<string>(boost::any_cast<string>(m["ForeignNick"]));
    }
    if (m.find("RealName") != m.end() && !m["RealName"].empty()) {
      realName = make_shared<string>(boost::any_cast<string>(m["RealName"]));
    }
    if (m.find("ServicerType") != m.end() && !m["ServicerType"].empty()) {
      servicerType = make_shared<long>(boost::any_cast<long>(m["ServicerType"]));
    }
    if (m.find("ShowName") != m.end() && !m["ShowName"].empty()) {
      showName = make_shared<string>(boost::any_cast<string>(m["ShowName"]));
    }
  }


  virtual ~GetAgentByIdResponseBodyData() = default;
};
class GetAgentByIdResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetAgentByIdResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetAgentByIdResponseBody() {}

  explicit GetAgentByIdResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetAgentByIdResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetAgentByIdResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetAgentByIdResponseBody() = default;
};
class GetAgentByIdResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetAgentByIdResponseBody> body{};

  GetAgentByIdResponse() {}

  explicit GetAgentByIdResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetAgentByIdResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetAgentByIdResponseBody>(model1);
      }
    }
  }


  virtual ~GetAgentByIdResponse() = default;
};
class GetAgentDetailReportRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> agentIds{};
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetAgentDetailReportRequest() {}

  explicit GetAgentDetailReportRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIds) {
      res["AgentIds"] = boost::any(*agentIds);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["AgentIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AgentIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      agentIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetAgentDetailReportRequest() = default;
};
class GetAgentDetailReportShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> agentIdsShrink{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetAgentDetailReportShrinkRequest() {}

  explicit GetAgentDetailReportShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIdsShrink) {
      res["AgentIds"] = boost::any(*agentIdsShrink);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      agentIdsShrink = make_shared<string>(boost::any_cast<string>(m["AgentIds"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetAgentDetailReportShrinkRequest() = default;
};
class GetAgentDetailReportResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetAgentDetailReportResponseBodyData() {}

  explicit GetAgentDetailReportResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetAgentDetailReportResponseBodyData() = default;
};
class GetAgentDetailReportResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetAgentDetailReportResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetAgentDetailReportResponseBody() {}

  explicit GetAgentDetailReportResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetAgentDetailReportResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetAgentDetailReportResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetAgentDetailReportResponseBody() = default;
};
class GetAgentDetailReportResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetAgentDetailReportResponseBody> body{};

  GetAgentDetailReportResponse() {}

  explicit GetAgentDetailReportResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetAgentDetailReportResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetAgentDetailReportResponseBody>(model1);
      }
    }
  }


  virtual ~GetAgentDetailReportResponse() = default;
};
class GetAgentIndexRealTimeRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};

  GetAgentIndexRealTimeRequest() {}

  explicit GetAgentIndexRealTimeRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
  }


  virtual ~GetAgentIndexRealTimeRequest() = default;
};
class GetAgentIndexRealTimeResponseBodyDataColumns : public Darabonba::Model {
public:
  shared_ptr<string> key{};
  shared_ptr<string> title{};

  GetAgentIndexRealTimeResponseBodyDataColumns() {}

  explicit GetAgentIndexRealTimeResponseBodyDataColumns(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (key) {
      res["Key"] = boost::any(*key);
    }
    if (title) {
      res["Title"] = boost::any(*title);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Key") != m.end() && !m["Key"].empty()) {
      key = make_shared<string>(boost::any_cast<string>(m["Key"]));
    }
    if (m.find("Title") != m.end() && !m["Title"].empty()) {
      title = make_shared<string>(boost::any_cast<string>(m["Title"]));
    }
  }


  virtual ~GetAgentIndexRealTimeResponseBodyDataColumns() = default;
};
class GetAgentIndexRealTimeResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<vector<GetAgentIndexRealTimeResponseBodyDataColumns>> columns{};
  shared_ptr<long> page{};
  shared_ptr<long> pageSize{};
  shared_ptr<vector<map<string, boost::any>>> rows{};
  shared_ptr<long> total{};

  GetAgentIndexRealTimeResponseBodyData() {}

  explicit GetAgentIndexRealTimeResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (columns) {
      vector<boost::any> temp1;
      for(auto item1:*columns){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Columns"] = boost::any(temp1);
    }
    if (page) {
      res["Page"] = boost::any(*page);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (total) {
      res["Total"] = boost::any(*total);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Columns") != m.end() && !m["Columns"].empty()) {
      if (typeid(vector<boost::any>) == m["Columns"].type()) {
        vector<GetAgentIndexRealTimeResponseBodyDataColumns> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Columns"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetAgentIndexRealTimeResponseBodyDataColumns model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        columns = make_shared<vector<GetAgentIndexRealTimeResponseBodyDataColumns>>(expect1);
      }
    }
    if (m.find("Page") != m.end() && !m["Page"].empty()) {
      page = make_shared<long>(boost::any_cast<long>(m["Page"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      vector<map<string, boost::any>> toVec1;
      if (typeid(vector<boost::any>) == m["Rows"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["Rows"]);
        for (auto item:vec1) {
          map<string, boost::any> map2 = boost::any_cast<map<string, boost::any>>(item);
          map<string, boost::any> toMap2;
          for (auto item:map2) {
             toMap2[item.first] = item.second;
          }
           toVec1.push_back(toMap2);
        }
      }
      rows = make_shared<vector<map<string, boost::any>>>(toVec1);
    }
    if (m.find("Total") != m.end() && !m["Total"].empty()) {
      total = make_shared<long>(boost::any_cast<long>(m["Total"]));
    }
  }


  virtual ~GetAgentIndexRealTimeResponseBodyData() = default;
};
class GetAgentIndexRealTimeResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetAgentIndexRealTimeResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetAgentIndexRealTimeResponseBody() {}

  explicit GetAgentIndexRealTimeResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetAgentIndexRealTimeResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetAgentIndexRealTimeResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetAgentIndexRealTimeResponseBody() = default;
};
class GetAgentIndexRealTimeResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetAgentIndexRealTimeResponseBody> body{};

  GetAgentIndexRealTimeResponse() {}

  explicit GetAgentIndexRealTimeResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetAgentIndexRealTimeResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetAgentIndexRealTimeResponseBody>(model1);
      }
    }
  }


  virtual ~GetAgentIndexRealTimeResponse() = default;
};
class GetAgentServiceStatusRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> agentIds{};
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetAgentServiceStatusRequest() {}

  explicit GetAgentServiceStatusRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIds) {
      res["AgentIds"] = boost::any(*agentIds);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["AgentIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AgentIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      agentIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetAgentServiceStatusRequest() = default;
};
class GetAgentServiceStatusShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> agentIdsShrink{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetAgentServiceStatusShrinkRequest() {}

  explicit GetAgentServiceStatusShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIdsShrink) {
      res["AgentIds"] = boost::any(*agentIdsShrink);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      agentIdsShrink = make_shared<string>(boost::any_cast<string>(m["AgentIds"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetAgentServiceStatusShrinkRequest() = default;
};
class GetAgentServiceStatusResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetAgentServiceStatusResponseBodyData() {}

  explicit GetAgentServiceStatusResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetAgentServiceStatusResponseBodyData() = default;
};
class GetAgentServiceStatusResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetAgentServiceStatusResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetAgentServiceStatusResponseBody() {}

  explicit GetAgentServiceStatusResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetAgentServiceStatusResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetAgentServiceStatusResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetAgentServiceStatusResponseBody() = default;
};
class GetAgentServiceStatusResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetAgentServiceStatusResponseBody> body{};

  GetAgentServiceStatusResponse() {}

  explicit GetAgentServiceStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetAgentServiceStatusResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetAgentServiceStatusResponseBody>(model1);
      }
    }
  }


  virtual ~GetAgentServiceStatusResponse() = default;
};
class GetAgentStatisticsRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> agentIds{};
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetAgentStatisticsRequest() {}

  explicit GetAgentStatisticsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIds) {
      res["AgentIds"] = boost::any(*agentIds);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["AgentIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AgentIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      agentIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetAgentStatisticsRequest() = default;
};
class GetAgentStatisticsShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> agentIdsShrink{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetAgentStatisticsShrinkRequest() {}

  explicit GetAgentStatisticsShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIdsShrink) {
      res["AgentIds"] = boost::any(*agentIdsShrink);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      agentIdsShrink = make_shared<string>(boost::any_cast<string>(m["AgentIds"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetAgentStatisticsShrinkRequest() = default;
};
class GetAgentStatisticsResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetAgentStatisticsResponseBodyData() {}

  explicit GetAgentStatisticsResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetAgentStatisticsResponseBodyData() = default;
};
class GetAgentStatisticsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetAgentStatisticsResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetAgentStatisticsResponseBody() {}

  explicit GetAgentStatisticsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetAgentStatisticsResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetAgentStatisticsResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetAgentStatisticsResponseBody() = default;
};
class GetAgentStatisticsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetAgentStatisticsResponseBody> body{};

  GetAgentStatisticsResponse() {}

  explicit GetAgentStatisticsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetAgentStatisticsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetAgentStatisticsResponseBody>(model1);
      }
    }
  }


  virtual ~GetAgentStatisticsResponse() = default;
};
class GetAiOutboundTaskBizDataRequest : public Darabonba::Model {
public:
  shared_ptr<string> channelId{};
  shared_ptr<string> instanceId{};

  GetAiOutboundTaskBizDataRequest() {}

  explicit GetAiOutboundTaskBizDataRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (channelId) {
      res["ChannelId"] = boost::any(*channelId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ChannelId") != m.end() && !m["ChannelId"].empty()) {
      channelId = make_shared<string>(boost::any_cast<string>(m["ChannelId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetAiOutboundTaskBizDataRequest() = default;
};
class GetAiOutboundTaskBizDataResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> bizData{};
  shared_ptr<long> caseId{};
  shared_ptr<string> phoneNum{};
  shared_ptr<long> taskId{};

  GetAiOutboundTaskBizDataResponseBodyData() {}

  explicit GetAiOutboundTaskBizDataResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (bizData) {
      res["BizData"] = boost::any(*bizData);
    }
    if (caseId) {
      res["CaseId"] = boost::any(*caseId);
    }
    if (phoneNum) {
      res["PhoneNum"] = boost::any(*phoneNum);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BizData") != m.end() && !m["BizData"].empty()) {
      bizData = make_shared<string>(boost::any_cast<string>(m["BizData"]));
    }
    if (m.find("CaseId") != m.end() && !m["CaseId"].empty()) {
      caseId = make_shared<long>(boost::any_cast<long>(m["CaseId"]));
    }
    if (m.find("PhoneNum") != m.end() && !m["PhoneNum"].empty()) {
      phoneNum = make_shared<string>(boost::any_cast<string>(m["PhoneNum"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~GetAiOutboundTaskBizDataResponseBodyData() = default;
};
class GetAiOutboundTaskBizDataResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetAiOutboundTaskBizDataResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetAiOutboundTaskBizDataResponseBody() {}

  explicit GetAiOutboundTaskBizDataResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetAiOutboundTaskBizDataResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetAiOutboundTaskBizDataResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetAiOutboundTaskBizDataResponseBody() = default;
};
class GetAiOutboundTaskBizDataResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetAiOutboundTaskBizDataResponseBody> body{};

  GetAiOutboundTaskBizDataResponse() {}

  explicit GetAiOutboundTaskBizDataResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetAiOutboundTaskBizDataResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetAiOutboundTaskBizDataResponseBody>(model1);
      }
    }
  }


  virtual ~GetAiOutboundTaskBizDataResponse() = default;
};
class GetAiOutboundTaskDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> taskId{};

  GetAiOutboundTaskDetailRequest() {}

  explicit GetAiOutboundTaskDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~GetAiOutboundTaskDetailRequest() = default;
};
class GetAiOutboundTaskDetailResponseBodyDataRecallRule : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> interval{};

  GetAiOutboundTaskDetailResponseBodyDataRecallRule() {}

  explicit GetAiOutboundTaskDetailResponseBodyDataRecallRule(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (interval) {
      res["Interval"] = boost::any(*interval);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("Interval") != m.end() && !m["Interval"].empty()) {
      interval = make_shared<long>(boost::any_cast<long>(m["Interval"]));
    }
  }


  virtual ~GetAiOutboundTaskDetailResponseBodyDataRecallRule() = default;
};
class GetAiOutboundTaskDetailResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> concurrentRate{};
  shared_ptr<string> description{};
  shared_ptr<string> executionTime{};
  shared_ptr<double> forecastCallRate{};
  shared_ptr<long> handlerId{};
  shared_ptr<string> handlerName{};
  shared_ptr<string> name{};
  shared_ptr<long> numRepeated{};
  shared_ptr<vector<string>> outboundNums{};
  shared_ptr<GetAiOutboundTaskDetailResponseBodyDataRecallRule> recallRule{};
  shared_ptr<long> status{};
  shared_ptr<string> statusDesc{};
  shared_ptr<long> taskId{};
  shared_ptr<long> type{};

  GetAiOutboundTaskDetailResponseBodyData() {}

  explicit GetAiOutboundTaskDetailResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (concurrentRate) {
      res["ConcurrentRate"] = boost::any(*concurrentRate);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (executionTime) {
      res["ExecutionTime"] = boost::any(*executionTime);
    }
    if (forecastCallRate) {
      res["ForecastCallRate"] = boost::any(*forecastCallRate);
    }
    if (handlerId) {
      res["HandlerId"] = boost::any(*handlerId);
    }
    if (handlerName) {
      res["HandlerName"] = boost::any(*handlerName);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (numRepeated) {
      res["NumRepeated"] = boost::any(*numRepeated);
    }
    if (outboundNums) {
      res["OutboundNums"] = boost::any(*outboundNums);
    }
    if (recallRule) {
      res["RecallRule"] = recallRule ? boost::any(recallRule->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (statusDesc) {
      res["StatusDesc"] = boost::any(*statusDesc);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ConcurrentRate") != m.end() && !m["ConcurrentRate"].empty()) {
      concurrentRate = make_shared<long>(boost::any_cast<long>(m["ConcurrentRate"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("ExecutionTime") != m.end() && !m["ExecutionTime"].empty()) {
      executionTime = make_shared<string>(boost::any_cast<string>(m["ExecutionTime"]));
    }
    if (m.find("ForecastCallRate") != m.end() && !m["ForecastCallRate"].empty()) {
      forecastCallRate = make_shared<double>(boost::any_cast<double>(m["ForecastCallRate"]));
    }
    if (m.find("HandlerId") != m.end() && !m["HandlerId"].empty()) {
      handlerId = make_shared<long>(boost::any_cast<long>(m["HandlerId"]));
    }
    if (m.find("HandlerName") != m.end() && !m["HandlerName"].empty()) {
      handlerName = make_shared<string>(boost::any_cast<string>(m["HandlerName"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("NumRepeated") != m.end() && !m["NumRepeated"].empty()) {
      numRepeated = make_shared<long>(boost::any_cast<long>(m["NumRepeated"]));
    }
    if (m.find("OutboundNums") != m.end() && !m["OutboundNums"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["OutboundNums"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["OutboundNums"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      outboundNums = make_shared<vector<string>>(toVec1);
    }
    if (m.find("RecallRule") != m.end() && !m["RecallRule"].empty()) {
      if (typeid(map<string, boost::any>) == m["RecallRule"].type()) {
        GetAiOutboundTaskDetailResponseBodyDataRecallRule model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["RecallRule"]));
        recallRule = make_shared<GetAiOutboundTaskDetailResponseBodyDataRecallRule>(model1);
      }
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("StatusDesc") != m.end() && !m["StatusDesc"].empty()) {
      statusDesc = make_shared<string>(boost::any_cast<string>(m["StatusDesc"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<long>(boost::any_cast<long>(m["Type"]));
    }
  }


  virtual ~GetAiOutboundTaskDetailResponseBodyData() = default;
};
class GetAiOutboundTaskDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetAiOutboundTaskDetailResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetAiOutboundTaskDetailResponseBody() {}

  explicit GetAiOutboundTaskDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetAiOutboundTaskDetailResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetAiOutboundTaskDetailResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetAiOutboundTaskDetailResponseBody() = default;
};
class GetAiOutboundTaskDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetAiOutboundTaskDetailResponseBody> body{};

  GetAiOutboundTaskDetailResponse() {}

  explicit GetAiOutboundTaskDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetAiOutboundTaskDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetAiOutboundTaskDetailResponseBody>(model1);
      }
    }
  }


  virtual ~GetAiOutboundTaskDetailResponse() = default;
};
class GetAiOutboundTaskExecDetailRequest : public Darabonba::Model {
public:
  shared_ptr<long> batchVersion{};
  shared_ptr<long> caseId{};
  shared_ptr<long> caseStatus{};
  shared_ptr<long> createTimeEnd{};
  shared_ptr<long> createTimeStart{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> phoneNum{};
  shared_ptr<long> taskId{};

  GetAiOutboundTaskExecDetailRequest() {}

  explicit GetAiOutboundTaskExecDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (batchVersion) {
      res["BatchVersion"] = boost::any(*batchVersion);
    }
    if (caseId) {
      res["CaseId"] = boost::any(*caseId);
    }
    if (caseStatus) {
      res["CaseStatus"] = boost::any(*caseStatus);
    }
    if (createTimeEnd) {
      res["CreateTimeEnd"] = boost::any(*createTimeEnd);
    }
    if (createTimeStart) {
      res["CreateTimeStart"] = boost::any(*createTimeStart);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (phoneNum) {
      res["PhoneNum"] = boost::any(*phoneNum);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BatchVersion") != m.end() && !m["BatchVersion"].empty()) {
      batchVersion = make_shared<long>(boost::any_cast<long>(m["BatchVersion"]));
    }
    if (m.find("CaseId") != m.end() && !m["CaseId"].empty()) {
      caseId = make_shared<long>(boost::any_cast<long>(m["CaseId"]));
    }
    if (m.find("CaseStatus") != m.end() && !m["CaseStatus"].empty()) {
      caseStatus = make_shared<long>(boost::any_cast<long>(m["CaseStatus"]));
    }
    if (m.find("CreateTimeEnd") != m.end() && !m["CreateTimeEnd"].empty()) {
      createTimeEnd = make_shared<long>(boost::any_cast<long>(m["CreateTimeEnd"]));
    }
    if (m.find("CreateTimeStart") != m.end() && !m["CreateTimeStart"].empty()) {
      createTimeStart = make_shared<long>(boost::any_cast<long>(m["CreateTimeStart"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("PhoneNum") != m.end() && !m["PhoneNum"].empty()) {
      phoneNum = make_shared<string>(boost::any_cast<string>(m["PhoneNum"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~GetAiOutboundTaskExecDetailRequest() = default;
};
class GetAiOutboundTaskExecDetailResponseBodyDataList : public Darabonba::Model {
public:
  shared_ptr<long> batchVersion{};
  shared_ptr<string> bizData{};
  shared_ptr<long> callCount{};
  shared_ptr<long> caseId{};
  shared_ptr<long> createTime{};
  shared_ptr<string> lastCallResult{};
  shared_ptr<string> phoneNum{};
  shared_ptr<long> status{};
  shared_ptr<long> statusDesc{};

  GetAiOutboundTaskExecDetailResponseBodyDataList() {}

  explicit GetAiOutboundTaskExecDetailResponseBodyDataList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (batchVersion) {
      res["BatchVersion"] = boost::any(*batchVersion);
    }
    if (bizData) {
      res["BizData"] = boost::any(*bizData);
    }
    if (callCount) {
      res["CallCount"] = boost::any(*callCount);
    }
    if (caseId) {
      res["CaseId"] = boost::any(*caseId);
    }
    if (createTime) {
      res["CreateTime"] = boost::any(*createTime);
    }
    if (lastCallResult) {
      res["LastCallResult"] = boost::any(*lastCallResult);
    }
    if (phoneNum) {
      res["PhoneNum"] = boost::any(*phoneNum);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (statusDesc) {
      res["StatusDesc"] = boost::any(*statusDesc);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BatchVersion") != m.end() && !m["BatchVersion"].empty()) {
      batchVersion = make_shared<long>(boost::any_cast<long>(m["BatchVersion"]));
    }
    if (m.find("BizData") != m.end() && !m["BizData"].empty()) {
      bizData = make_shared<string>(boost::any_cast<string>(m["BizData"]));
    }
    if (m.find("CallCount") != m.end() && !m["CallCount"].empty()) {
      callCount = make_shared<long>(boost::any_cast<long>(m["CallCount"]));
    }
    if (m.find("CaseId") != m.end() && !m["CaseId"].empty()) {
      caseId = make_shared<long>(boost::any_cast<long>(m["CaseId"]));
    }
    if (m.find("CreateTime") != m.end() && !m["CreateTime"].empty()) {
      createTime = make_shared<long>(boost::any_cast<long>(m["CreateTime"]));
    }
    if (m.find("LastCallResult") != m.end() && !m["LastCallResult"].empty()) {
      lastCallResult = make_shared<string>(boost::any_cast<string>(m["LastCallResult"]));
    }
    if (m.find("PhoneNum") != m.end() && !m["PhoneNum"].empty()) {
      phoneNum = make_shared<string>(boost::any_cast<string>(m["PhoneNum"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("StatusDesc") != m.end() && !m["StatusDesc"].empty()) {
      statusDesc = make_shared<long>(boost::any_cast<long>(m["StatusDesc"]));
    }
  }


  virtual ~GetAiOutboundTaskExecDetailResponseBodyDataList() = default;
};
class GetAiOutboundTaskExecDetailResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<bool> hasNextPage{};
  shared_ptr<vector<GetAiOutboundTaskExecDetailResponseBodyDataList>> list{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalResults{};

  GetAiOutboundTaskExecDetailResponseBodyData() {}

  explicit GetAiOutboundTaskExecDetailResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (hasNextPage) {
      res["HasNextPage"] = boost::any(*hasNextPage);
    }
    if (list) {
      vector<boost::any> temp1;
      for(auto item1:*list){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["List"] = boost::any(temp1);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalResults) {
      res["TotalResults"] = boost::any(*totalResults);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("HasNextPage") != m.end() && !m["HasNextPage"].empty()) {
      hasNextPage = make_shared<bool>(boost::any_cast<bool>(m["HasNextPage"]));
    }
    if (m.find("List") != m.end() && !m["List"].empty()) {
      if (typeid(vector<boost::any>) == m["List"].type()) {
        vector<GetAiOutboundTaskExecDetailResponseBodyDataList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["List"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetAiOutboundTaskExecDetailResponseBodyDataList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        list = make_shared<vector<GetAiOutboundTaskExecDetailResponseBodyDataList>>(expect1);
      }
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalResults") != m.end() && !m["TotalResults"].empty()) {
      totalResults = make_shared<long>(boost::any_cast<long>(m["TotalResults"]));
    }
  }


  virtual ~GetAiOutboundTaskExecDetailResponseBodyData() = default;
};
class GetAiOutboundTaskExecDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetAiOutboundTaskExecDetailResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetAiOutboundTaskExecDetailResponseBody() {}

  explicit GetAiOutboundTaskExecDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetAiOutboundTaskExecDetailResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetAiOutboundTaskExecDetailResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetAiOutboundTaskExecDetailResponseBody() = default;
};
class GetAiOutboundTaskExecDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetAiOutboundTaskExecDetailResponseBody> body{};

  GetAiOutboundTaskExecDetailResponse() {}

  explicit GetAiOutboundTaskExecDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetAiOutboundTaskExecDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetAiOutboundTaskExecDetailResponseBody>(model1);
      }
    }
  }


  virtual ~GetAiOutboundTaskExecDetailResponse() = default;
};
class GetAiOutboundTaskListRequest : public Darabonba::Model {
public:
  shared_ptr<long> createTimeEnd{};
  shared_ptr<long> createTimeStart{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> searchKey{};
  shared_ptr<long> status{};
  shared_ptr<long> type{};

  GetAiOutboundTaskListRequest() {}

  explicit GetAiOutboundTaskListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (createTimeEnd) {
      res["CreateTimeEnd"] = boost::any(*createTimeEnd);
    }
    if (createTimeStart) {
      res["CreateTimeStart"] = boost::any(*createTimeStart);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (searchKey) {
      res["SearchKey"] = boost::any(*searchKey);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CreateTimeEnd") != m.end() && !m["CreateTimeEnd"].empty()) {
      createTimeEnd = make_shared<long>(boost::any_cast<long>(m["CreateTimeEnd"]));
    }
    if (m.find("CreateTimeStart") != m.end() && !m["CreateTimeStart"].empty()) {
      createTimeStart = make_shared<long>(boost::any_cast<long>(m["CreateTimeStart"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("SearchKey") != m.end() && !m["SearchKey"].empty()) {
      searchKey = make_shared<string>(boost::any_cast<string>(m["SearchKey"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<long>(boost::any_cast<long>(m["Type"]));
    }
  }


  virtual ~GetAiOutboundTaskListRequest() = default;
};
class GetAiOutboundTaskListResponseBodyDataList : public Darabonba::Model {
public:
  shared_ptr<long> concurrentRate{};
  shared_ptr<long> createTime{};
  shared_ptr<string> description{};
  shared_ptr<long> finishCount{};
  shared_ptr<double> finishRate{};
  shared_ptr<long> handlerId{};
  shared_ptr<string> handlerName{};
  shared_ptr<string> name{};
  shared_ptr<long> status{};
  shared_ptr<string> statusDesc{};
  shared_ptr<long> taskId{};
  shared_ptr<long> totalCount{};

  GetAiOutboundTaskListResponseBodyDataList() {}

  explicit GetAiOutboundTaskListResponseBodyDataList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (concurrentRate) {
      res["ConcurrentRate"] = boost::any(*concurrentRate);
    }
    if (createTime) {
      res["CreateTime"] = boost::any(*createTime);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (finishCount) {
      res["FinishCount"] = boost::any(*finishCount);
    }
    if (finishRate) {
      res["FinishRate"] = boost::any(*finishRate);
    }
    if (handlerId) {
      res["HandlerId"] = boost::any(*handlerId);
    }
    if (handlerName) {
      res["HandlerName"] = boost::any(*handlerName);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (statusDesc) {
      res["StatusDesc"] = boost::any(*statusDesc);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ConcurrentRate") != m.end() && !m["ConcurrentRate"].empty()) {
      concurrentRate = make_shared<long>(boost::any_cast<long>(m["ConcurrentRate"]));
    }
    if (m.find("CreateTime") != m.end() && !m["CreateTime"].empty()) {
      createTime = make_shared<long>(boost::any_cast<long>(m["CreateTime"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("FinishCount") != m.end() && !m["FinishCount"].empty()) {
      finishCount = make_shared<long>(boost::any_cast<long>(m["FinishCount"]));
    }
    if (m.find("FinishRate") != m.end() && !m["FinishRate"].empty()) {
      finishRate = make_shared<double>(boost::any_cast<double>(m["FinishRate"]));
    }
    if (m.find("HandlerId") != m.end() && !m["HandlerId"].empty()) {
      handlerId = make_shared<long>(boost::any_cast<long>(m["HandlerId"]));
    }
    if (m.find("HandlerName") != m.end() && !m["HandlerName"].empty()) {
      handlerName = make_shared<string>(boost::any_cast<string>(m["HandlerName"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("StatusDesc") != m.end() && !m["StatusDesc"].empty()) {
      statusDesc = make_shared<string>(boost::any_cast<string>(m["StatusDesc"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~GetAiOutboundTaskListResponseBodyDataList() = default;
};
class GetAiOutboundTaskListResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<bool> hasNextPage{};
  shared_ptr<vector<GetAiOutboundTaskListResponseBodyDataList>> list{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalResults{};

  GetAiOutboundTaskListResponseBodyData() {}

  explicit GetAiOutboundTaskListResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (hasNextPage) {
      res["HasNextPage"] = boost::any(*hasNextPage);
    }
    if (list) {
      vector<boost::any> temp1;
      for(auto item1:*list){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["List"] = boost::any(temp1);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalResults) {
      res["TotalResults"] = boost::any(*totalResults);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("HasNextPage") != m.end() && !m["HasNextPage"].empty()) {
      hasNextPage = make_shared<bool>(boost::any_cast<bool>(m["HasNextPage"]));
    }
    if (m.find("List") != m.end() && !m["List"].empty()) {
      if (typeid(vector<boost::any>) == m["List"].type()) {
        vector<GetAiOutboundTaskListResponseBodyDataList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["List"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetAiOutboundTaskListResponseBodyDataList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        list = make_shared<vector<GetAiOutboundTaskListResponseBodyDataList>>(expect1);
      }
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalResults") != m.end() && !m["TotalResults"].empty()) {
      totalResults = make_shared<long>(boost::any_cast<long>(m["TotalResults"]));
    }
  }


  virtual ~GetAiOutboundTaskListResponseBodyData() = default;
};
class GetAiOutboundTaskListResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetAiOutboundTaskListResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetAiOutboundTaskListResponseBody() {}

  explicit GetAiOutboundTaskListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetAiOutboundTaskListResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetAiOutboundTaskListResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetAiOutboundTaskListResponseBody() = default;
};
class GetAiOutboundTaskListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetAiOutboundTaskListResponseBody> body{};

  GetAiOutboundTaskListResponse() {}

  explicit GetAiOutboundTaskListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetAiOutboundTaskListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetAiOutboundTaskListResponseBody>(model1);
      }
    }
  }


  virtual ~GetAiOutboundTaskListResponse() = default;
};
class GetAiOutboundTaskProgressRequest : public Darabonba::Model {
public:
  shared_ptr<long> batchVersion{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> taskId{};

  GetAiOutboundTaskProgressRequest() {}

  explicit GetAiOutboundTaskProgressRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (batchVersion) {
      res["BatchVersion"] = boost::any(*batchVersion);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BatchVersion") != m.end() && !m["BatchVersion"].empty()) {
      batchVersion = make_shared<long>(boost::any_cast<long>(m["BatchVersion"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~GetAiOutboundTaskProgressRequest() = default;
};
class GetAiOutboundTaskProgressResponseBodyDataCalloutProgress : public Darabonba::Model {
public:
  shared_ptr<long> callLossCount{};
  shared_ptr<double> callLossRate{};
  shared_ptr<long> callOutConnectCount{};
  shared_ptr<double> callOutConnectRate{};
  shared_ptr<long> callOutCount{};
  shared_ptr<long> callOutServicerPickupCount{};
  shared_ptr<double> callOutServicerPickupRate{};
  shared_ptr<long> callOutUserPickupCount{};
  shared_ptr<double> callOutUserPickupRate{};

  GetAiOutboundTaskProgressResponseBodyDataCalloutProgress() {}

  explicit GetAiOutboundTaskProgressResponseBodyDataCalloutProgress(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callLossCount) {
      res["CallLossCount"] = boost::any(*callLossCount);
    }
    if (callLossRate) {
      res["CallLossRate"] = boost::any(*callLossRate);
    }
    if (callOutConnectCount) {
      res["CallOutConnectCount"] = boost::any(*callOutConnectCount);
    }
    if (callOutConnectRate) {
      res["CallOutConnectRate"] = boost::any(*callOutConnectRate);
    }
    if (callOutCount) {
      res["CallOutCount"] = boost::any(*callOutCount);
    }
    if (callOutServicerPickupCount) {
      res["CallOutServicerPickupCount"] = boost::any(*callOutServicerPickupCount);
    }
    if (callOutServicerPickupRate) {
      res["CallOutServicerPickupRate"] = boost::any(*callOutServicerPickupRate);
    }
    if (callOutUserPickupCount) {
      res["CallOutUserPickupCount"] = boost::any(*callOutUserPickupCount);
    }
    if (callOutUserPickupRate) {
      res["CallOutUserPickupRate"] = boost::any(*callOutUserPickupRate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallLossCount") != m.end() && !m["CallLossCount"].empty()) {
      callLossCount = make_shared<long>(boost::any_cast<long>(m["CallLossCount"]));
    }
    if (m.find("CallLossRate") != m.end() && !m["CallLossRate"].empty()) {
      callLossRate = make_shared<double>(boost::any_cast<double>(m["CallLossRate"]));
    }
    if (m.find("CallOutConnectCount") != m.end() && !m["CallOutConnectCount"].empty()) {
      callOutConnectCount = make_shared<long>(boost::any_cast<long>(m["CallOutConnectCount"]));
    }
    if (m.find("CallOutConnectRate") != m.end() && !m["CallOutConnectRate"].empty()) {
      callOutConnectRate = make_shared<double>(boost::any_cast<double>(m["CallOutConnectRate"]));
    }
    if (m.find("CallOutCount") != m.end() && !m["CallOutCount"].empty()) {
      callOutCount = make_shared<long>(boost::any_cast<long>(m["CallOutCount"]));
    }
    if (m.find("CallOutServicerPickupCount") != m.end() && !m["CallOutServicerPickupCount"].empty()) {
      callOutServicerPickupCount = make_shared<long>(boost::any_cast<long>(m["CallOutServicerPickupCount"]));
    }
    if (m.find("CallOutServicerPickupRate") != m.end() && !m["CallOutServicerPickupRate"].empty()) {
      callOutServicerPickupRate = make_shared<double>(boost::any_cast<double>(m["CallOutServicerPickupRate"]));
    }
    if (m.find("CallOutUserPickupCount") != m.end() && !m["CallOutUserPickupCount"].empty()) {
      callOutUserPickupCount = make_shared<long>(boost::any_cast<long>(m["CallOutUserPickupCount"]));
    }
    if (m.find("CallOutUserPickupRate") != m.end() && !m["CallOutUserPickupRate"].empty()) {
      callOutUserPickupRate = make_shared<double>(boost::any_cast<double>(m["CallOutUserPickupRate"]));
    }
  }


  virtual ~GetAiOutboundTaskProgressResponseBodyDataCalloutProgress() = default;
};
class GetAiOutboundTaskProgressResponseBodyDataTaskProgress : public Darabonba::Model {
public:
  shared_ptr<long> callingCount{};
  shared_ptr<long> connectCount{};
  shared_ptr<double> connectRate{};
  shared_ptr<long> finishCount{};
  shared_ptr<double> finishRate{};
  shared_ptr<long> servicerPickupCount{};
  shared_ptr<double> servicerPickupRate{};
  shared_ptr<long> terminateCount{};
  shared_ptr<long> totalCount{};
  shared_ptr<long> userPickupCount{};
  shared_ptr<double> userPickupRate{};
  shared_ptr<long> waitingCallCount{};
  shared_ptr<long> waitingRecallCount{};

  GetAiOutboundTaskProgressResponseBodyDataTaskProgress() {}

  explicit GetAiOutboundTaskProgressResponseBodyDataTaskProgress(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callingCount) {
      res["CallingCount"] = boost::any(*callingCount);
    }
    if (connectCount) {
      res["ConnectCount"] = boost::any(*connectCount);
    }
    if (connectRate) {
      res["ConnectRate"] = boost::any(*connectRate);
    }
    if (finishCount) {
      res["FinishCount"] = boost::any(*finishCount);
    }
    if (finishRate) {
      res["FinishRate"] = boost::any(*finishRate);
    }
    if (servicerPickupCount) {
      res["ServicerPickupCount"] = boost::any(*servicerPickupCount);
    }
    if (servicerPickupRate) {
      res["ServicerPickupRate"] = boost::any(*servicerPickupRate);
    }
    if (terminateCount) {
      res["TerminateCount"] = boost::any(*terminateCount);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    if (userPickupCount) {
      res["UserPickupCount"] = boost::any(*userPickupCount);
    }
    if (userPickupRate) {
      res["UserPickupRate"] = boost::any(*userPickupRate);
    }
    if (waitingCallCount) {
      res["WaitingCallCount"] = boost::any(*waitingCallCount);
    }
    if (waitingRecallCount) {
      res["WaitingRecallCount"] = boost::any(*waitingRecallCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallingCount") != m.end() && !m["CallingCount"].empty()) {
      callingCount = make_shared<long>(boost::any_cast<long>(m["CallingCount"]));
    }
    if (m.find("ConnectCount") != m.end() && !m["ConnectCount"].empty()) {
      connectCount = make_shared<long>(boost::any_cast<long>(m["ConnectCount"]));
    }
    if (m.find("ConnectRate") != m.end() && !m["ConnectRate"].empty()) {
      connectRate = make_shared<double>(boost::any_cast<double>(m["ConnectRate"]));
    }
    if (m.find("FinishCount") != m.end() && !m["FinishCount"].empty()) {
      finishCount = make_shared<long>(boost::any_cast<long>(m["FinishCount"]));
    }
    if (m.find("FinishRate") != m.end() && !m["FinishRate"].empty()) {
      finishRate = make_shared<double>(boost::any_cast<double>(m["FinishRate"]));
    }
    if (m.find("ServicerPickupCount") != m.end() && !m["ServicerPickupCount"].empty()) {
      servicerPickupCount = make_shared<long>(boost::any_cast<long>(m["ServicerPickupCount"]));
    }
    if (m.find("ServicerPickupRate") != m.end() && !m["ServicerPickupRate"].empty()) {
      servicerPickupRate = make_shared<double>(boost::any_cast<double>(m["ServicerPickupRate"]));
    }
    if (m.find("TerminateCount") != m.end() && !m["TerminateCount"].empty()) {
      terminateCount = make_shared<long>(boost::any_cast<long>(m["TerminateCount"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
    if (m.find("UserPickupCount") != m.end() && !m["UserPickupCount"].empty()) {
      userPickupCount = make_shared<long>(boost::any_cast<long>(m["UserPickupCount"]));
    }
    if (m.find("UserPickupRate") != m.end() && !m["UserPickupRate"].empty()) {
      userPickupRate = make_shared<double>(boost::any_cast<double>(m["UserPickupRate"]));
    }
    if (m.find("WaitingCallCount") != m.end() && !m["WaitingCallCount"].empty()) {
      waitingCallCount = make_shared<long>(boost::any_cast<long>(m["WaitingCallCount"]));
    }
    if (m.find("WaitingRecallCount") != m.end() && !m["WaitingRecallCount"].empty()) {
      waitingRecallCount = make_shared<long>(boost::any_cast<long>(m["WaitingRecallCount"]));
    }
  }


  virtual ~GetAiOutboundTaskProgressResponseBodyDataTaskProgress() = default;
};
class GetAiOutboundTaskProgressResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<GetAiOutboundTaskProgressResponseBodyDataCalloutProgress> calloutProgress{};
  shared_ptr<long> taskId{};
  shared_ptr<GetAiOutboundTaskProgressResponseBodyDataTaskProgress> taskProgress{};
  shared_ptr<long> type{};

  GetAiOutboundTaskProgressResponseBodyData() {}

  explicit GetAiOutboundTaskProgressResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (calloutProgress) {
      res["CalloutProgress"] = calloutProgress ? boost::any(calloutProgress->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    if (taskProgress) {
      res["TaskProgress"] = taskProgress ? boost::any(taskProgress->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CalloutProgress") != m.end() && !m["CalloutProgress"].empty()) {
      if (typeid(map<string, boost::any>) == m["CalloutProgress"].type()) {
        GetAiOutboundTaskProgressResponseBodyDataCalloutProgress model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["CalloutProgress"]));
        calloutProgress = make_shared<GetAiOutboundTaskProgressResponseBodyDataCalloutProgress>(model1);
      }
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
    if (m.find("TaskProgress") != m.end() && !m["TaskProgress"].empty()) {
      if (typeid(map<string, boost::any>) == m["TaskProgress"].type()) {
        GetAiOutboundTaskProgressResponseBodyDataTaskProgress model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["TaskProgress"]));
        taskProgress = make_shared<GetAiOutboundTaskProgressResponseBodyDataTaskProgress>(model1);
      }
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<long>(boost::any_cast<long>(m["Type"]));
    }
  }


  virtual ~GetAiOutboundTaskProgressResponseBodyData() = default;
};
class GetAiOutboundTaskProgressResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetAiOutboundTaskProgressResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetAiOutboundTaskProgressResponseBody() {}

  explicit GetAiOutboundTaskProgressResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetAiOutboundTaskProgressResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetAiOutboundTaskProgressResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetAiOutboundTaskProgressResponseBody() = default;
};
class GetAiOutboundTaskProgressResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetAiOutboundTaskProgressResponseBody> body{};

  GetAiOutboundTaskProgressResponse() {}

  explicit GetAiOutboundTaskProgressResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetAiOutboundTaskProgressResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetAiOutboundTaskProgressResponseBody>(model1);
      }
    }
  }


  virtual ~GetAiOutboundTaskProgressResponse() = default;
};
class GetAllDepartmentRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};

  GetAllDepartmentRequest() {}

  explicit GetAllDepartmentRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetAllDepartmentRequest() = default;
};
class GetAllDepartmentResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> departmentId{};
  shared_ptr<string> departmentName{};

  GetAllDepartmentResponseBodyData() {}

  explicit GetAllDepartmentResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (departmentName) {
      res["DepartmentName"] = boost::any(*departmentName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("DepartmentName") != m.end() && !m["DepartmentName"].empty()) {
      departmentName = make_shared<string>(boost::any_cast<string>(m["DepartmentName"]));
    }
  }


  virtual ~GetAllDepartmentResponseBodyData() = default;
};
class GetAllDepartmentResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<GetAllDepartmentResponseBodyData>> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetAllDepartmentResponseBody() {}

  explicit GetAllDepartmentResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<GetAllDepartmentResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetAllDepartmentResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<GetAllDepartmentResponseBodyData>>(expect1);
      }
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetAllDepartmentResponseBody() = default;
};
class GetAllDepartmentResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetAllDepartmentResponseBody> body{};

  GetAllDepartmentResponse() {}

  explicit GetAllDepartmentResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetAllDepartmentResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetAllDepartmentResponseBody>(model1);
      }
    }
  }


  virtual ~GetAllDepartmentResponse() = default;
};
class GetCallSoundRecordRequest : public Darabonba::Model {
public:
  shared_ptr<string> callId{};
  shared_ptr<string> createTime{};
  shared_ptr<long> ownerId{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};

  GetCallSoundRecordRequest() {}

  explicit GetCallSoundRecordRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (createTime) {
      res["CreateTime"] = boost::any(*createTime);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("CreateTime") != m.end() && !m["CreateTime"].empty()) {
      createTime = make_shared<string>(boost::any_cast<string>(m["CreateTime"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
  }


  virtual ~GetCallSoundRecordRequest() = default;
};
class GetCallSoundRecordResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetCallSoundRecordResponseBody() {}

  explicit GetCallSoundRecordResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetCallSoundRecordResponseBody() = default;
};
class GetCallSoundRecordResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetCallSoundRecordResponseBody> body{};

  GetCallSoundRecordResponse() {}

  explicit GetCallSoundRecordResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetCallSoundRecordResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetCallSoundRecordResponseBody>(model1);
      }
    }
  }


  virtual ~GetCallSoundRecordResponse() = default;
};
class GetConfigNumListRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<long> departmentId{};
  shared_ptr<string> instanceId{};

  GetConfigNumListRequest() {}

  explicit GetConfigNumListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetConfigNumListRequest() = default;
};
class GetConfigNumListResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<string>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetConfigNumListResponseBody() {}

  explicit GetConfigNumListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["Data"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      data = make_shared<vector<string>>(toVec1);
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetConfigNumListResponseBody() = default;
};
class GetConfigNumListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetConfigNumListResponseBody> body{};

  GetConfigNumListResponse() {}

  explicit GetConfigNumListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetConfigNumListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetConfigNumListResponseBody>(model1);
      }
    }
  }


  virtual ~GetConfigNumListResponse() = default;
};
class GetCustomerInfoRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> memberId{};

  GetCustomerInfoRequest() {}

  explicit GetCustomerInfoRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (memberId) {
      res["MemberId"] = boost::any(*memberId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("MemberId") != m.end() && !m["MemberId"].empty()) {
      memberId = make_shared<long>(boost::any_cast<long>(m["MemberId"]));
    }
  }


  virtual ~GetCustomerInfoRequest() = default;
};
class GetCustomerInfoResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<map<string, boost::any>> customizeFields{};
  shared_ptr<string> nick{};
  shared_ptr<string> outerId{};
  shared_ptr<string> photo{};
  shared_ptr<string> realName{};
  shared_ptr<long> userId{};

  GetCustomerInfoResponseBodyData() {}

  explicit GetCustomerInfoResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (customizeFields) {
      res["CustomizeFields"] = boost::any(*customizeFields);
    }
    if (nick) {
      res["Nick"] = boost::any(*nick);
    }
    if (outerId) {
      res["OuterId"] = boost::any(*outerId);
    }
    if (photo) {
      res["Photo"] = boost::any(*photo);
    }
    if (realName) {
      res["RealName"] = boost::any(*realName);
    }
    if (userId) {
      res["UserId"] = boost::any(*userId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CustomizeFields") != m.end() && !m["CustomizeFields"].empty()) {
      map<string, boost::any> map1 = boost::any_cast<map<string, boost::any>>(m["CustomizeFields"]);
      map<string, boost::any> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      customizeFields = make_shared<map<string, boost::any>>(toMap1);
    }
    if (m.find("Nick") != m.end() && !m["Nick"].empty()) {
      nick = make_shared<string>(boost::any_cast<string>(m["Nick"]));
    }
    if (m.find("OuterId") != m.end() && !m["OuterId"].empty()) {
      outerId = make_shared<string>(boost::any_cast<string>(m["OuterId"]));
    }
    if (m.find("Photo") != m.end() && !m["Photo"].empty()) {
      photo = make_shared<string>(boost::any_cast<string>(m["Photo"]));
    }
    if (m.find("RealName") != m.end() && !m["RealName"].empty()) {
      realName = make_shared<string>(boost::any_cast<string>(m["RealName"]));
    }
    if (m.find("UserId") != m.end() && !m["UserId"].empty()) {
      userId = make_shared<long>(boost::any_cast<long>(m["UserId"]));
    }
  }


  virtual ~GetCustomerInfoResponseBodyData() = default;
};
class GetCustomerInfoResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetCustomerInfoResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetCustomerInfoResponseBody() {}

  explicit GetCustomerInfoResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetCustomerInfoResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetCustomerInfoResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetCustomerInfoResponseBody() = default;
};
class GetCustomerInfoResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetCustomerInfoResponseBody> body{};

  GetCustomerInfoResponse() {}

  explicit GetCustomerInfoResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetCustomerInfoResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetCustomerInfoResponseBody>(model1);
      }
    }
  }


  virtual ~GetCustomerInfoResponse() = default;
};
class GetDepGroupTreeDataRequest : public Darabonba::Model {
public:
  shared_ptr<long> agentId{};
  shared_ptr<string> instanceId{};

  GetDepGroupTreeDataRequest() {}

  explicit GetDepGroupTreeDataRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentId) {
      res["AgentId"] = boost::any(*agentId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentId") != m.end() && !m["AgentId"].empty()) {
      agentId = make_shared<long>(boost::any_cast<long>(m["AgentId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetDepGroupTreeDataRequest() = default;
};
class GetDepGroupTreeDataResponseBodyDataGroupDTOS : public Darabonba::Model {
public:
  shared_ptr<string> name{};
  shared_ptr<long> skillGroupId{};

  GetDepGroupTreeDataResponseBodyDataGroupDTOS() {}

  explicit GetDepGroupTreeDataResponseBodyDataGroupDTOS(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (skillGroupId) {
      res["SkillGroupId"] = boost::any(*skillGroupId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("SkillGroupId") != m.end() && !m["SkillGroupId"].empty()) {
      skillGroupId = make_shared<long>(boost::any_cast<long>(m["SkillGroupId"]));
    }
  }


  virtual ~GetDepGroupTreeDataResponseBodyDataGroupDTOS() = default;
};
class GetDepGroupTreeDataResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> depGroupId{};
  shared_ptr<string> depGroupName{};
  shared_ptr<vector<GetDepGroupTreeDataResponseBodyDataGroupDTOS>> groupDTOS{};

  GetDepGroupTreeDataResponseBodyData() {}

  explicit GetDepGroupTreeDataResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (depGroupId) {
      res["DepGroupId"] = boost::any(*depGroupId);
    }
    if (depGroupName) {
      res["DepGroupName"] = boost::any(*depGroupName);
    }
    if (groupDTOS) {
      vector<boost::any> temp1;
      for(auto item1:*groupDTOS){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["GroupDTOS"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DepGroupId") != m.end() && !m["DepGroupId"].empty()) {
      depGroupId = make_shared<string>(boost::any_cast<string>(m["DepGroupId"]));
    }
    if (m.find("DepGroupName") != m.end() && !m["DepGroupName"].empty()) {
      depGroupName = make_shared<string>(boost::any_cast<string>(m["DepGroupName"]));
    }
    if (m.find("GroupDTOS") != m.end() && !m["GroupDTOS"].empty()) {
      if (typeid(vector<boost::any>) == m["GroupDTOS"].type()) {
        vector<GetDepGroupTreeDataResponseBodyDataGroupDTOS> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["GroupDTOS"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetDepGroupTreeDataResponseBodyDataGroupDTOS model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        groupDTOS = make_shared<vector<GetDepGroupTreeDataResponseBodyDataGroupDTOS>>(expect1);
      }
    }
  }


  virtual ~GetDepGroupTreeDataResponseBodyData() = default;
};
class GetDepGroupTreeDataResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<GetDepGroupTreeDataResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetDepGroupTreeDataResponseBody() {}

  explicit GetDepGroupTreeDataResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<GetDepGroupTreeDataResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetDepGroupTreeDataResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<GetDepGroupTreeDataResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetDepGroupTreeDataResponseBody() = default;
};
class GetDepGroupTreeDataResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetDepGroupTreeDataResponseBody> body{};

  GetDepGroupTreeDataResponse() {}

  explicit GetDepGroupTreeDataResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetDepGroupTreeDataResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetDepGroupTreeDataResponseBody>(model1);
      }
    }
  }


  virtual ~GetDepGroupTreeDataResponse() = default;
};
class GetDepartmentalLatitudeAgentStatusRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetDepartmentalLatitudeAgentStatusRequest() {}

  explicit GetDepartmentalLatitudeAgentStatusRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetDepartmentalLatitudeAgentStatusRequest() = default;
};
class GetDepartmentalLatitudeAgentStatusShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetDepartmentalLatitudeAgentStatusShrinkRequest() {}

  explicit GetDepartmentalLatitudeAgentStatusShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetDepartmentalLatitudeAgentStatusShrinkRequest() = default;
};
class GetDepartmentalLatitudeAgentStatusResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetDepartmentalLatitudeAgentStatusResponseBodyData() {}

  explicit GetDepartmentalLatitudeAgentStatusResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetDepartmentalLatitudeAgentStatusResponseBodyData() = default;
};
class GetDepartmentalLatitudeAgentStatusResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetDepartmentalLatitudeAgentStatusResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetDepartmentalLatitudeAgentStatusResponseBody() {}

  explicit GetDepartmentalLatitudeAgentStatusResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetDepartmentalLatitudeAgentStatusResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetDepartmentalLatitudeAgentStatusResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetDepartmentalLatitudeAgentStatusResponseBody() = default;
};
class GetDepartmentalLatitudeAgentStatusResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetDepartmentalLatitudeAgentStatusResponseBody> body{};

  GetDepartmentalLatitudeAgentStatusResponse() {}

  explicit GetDepartmentalLatitudeAgentStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetDepartmentalLatitudeAgentStatusResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetDepartmentalLatitudeAgentStatusResponseBody>(model1);
      }
    }
  }


  virtual ~GetDepartmentalLatitudeAgentStatusResponse() = default;
};
class GetHotlineAgentDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  GetHotlineAgentDetailRequest() {}

  explicit GetHotlineAgentDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetHotlineAgentDetailRequest() = default;
};
class GetHotlineAgentDetailResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> agentId{};
  shared_ptr<long> agentStatus{};
  shared_ptr<string> agentStatusCode{};
  shared_ptr<bool> assigned{};
  shared_ptr<long> restType{};
  shared_ptr<long> tenantId{};
  shared_ptr<string> token{};

  GetHotlineAgentDetailResponseBodyData() {}

  explicit GetHotlineAgentDetailResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentId) {
      res["AgentId"] = boost::any(*agentId);
    }
    if (agentStatus) {
      res["AgentStatus"] = boost::any(*agentStatus);
    }
    if (agentStatusCode) {
      res["AgentStatusCode"] = boost::any(*agentStatusCode);
    }
    if (assigned) {
      res["Assigned"] = boost::any(*assigned);
    }
    if (restType) {
      res["RestType"] = boost::any(*restType);
    }
    if (tenantId) {
      res["TenantId"] = boost::any(*tenantId);
    }
    if (token) {
      res["Token"] = boost::any(*token);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentId") != m.end() && !m["AgentId"].empty()) {
      agentId = make_shared<long>(boost::any_cast<long>(m["AgentId"]));
    }
    if (m.find("AgentStatus") != m.end() && !m["AgentStatus"].empty()) {
      agentStatus = make_shared<long>(boost::any_cast<long>(m["AgentStatus"]));
    }
    if (m.find("AgentStatusCode") != m.end() && !m["AgentStatusCode"].empty()) {
      agentStatusCode = make_shared<string>(boost::any_cast<string>(m["AgentStatusCode"]));
    }
    if (m.find("Assigned") != m.end() && !m["Assigned"].empty()) {
      assigned = make_shared<bool>(boost::any_cast<bool>(m["Assigned"]));
    }
    if (m.find("RestType") != m.end() && !m["RestType"].empty()) {
      restType = make_shared<long>(boost::any_cast<long>(m["RestType"]));
    }
    if (m.find("TenantId") != m.end() && !m["TenantId"].empty()) {
      tenantId = make_shared<long>(boost::any_cast<long>(m["TenantId"]));
    }
    if (m.find("Token") != m.end() && !m["Token"].empty()) {
      token = make_shared<string>(boost::any_cast<string>(m["Token"]));
    }
  }


  virtual ~GetHotlineAgentDetailResponseBodyData() = default;
};
class GetHotlineAgentDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetHotlineAgentDetailResponseBodyData> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetHotlineAgentDetailResponseBody() {}

  explicit GetHotlineAgentDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetHotlineAgentDetailResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetHotlineAgentDetailResponseBodyData>(model1);
      }
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetHotlineAgentDetailResponseBody() = default;
};
class GetHotlineAgentDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetHotlineAgentDetailResponseBody> body{};

  GetHotlineAgentDetailResponse() {}

  explicit GetHotlineAgentDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetHotlineAgentDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetHotlineAgentDetailResponseBody>(model1);
      }
    }
  }


  virtual ~GetHotlineAgentDetailResponse() = default;
};
class GetHotlineAgentDetailReportRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetHotlineAgentDetailReportRequest() {}

  explicit GetHotlineAgentDetailReportRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetHotlineAgentDetailReportRequest() = default;
};
class GetHotlineAgentDetailReportResponseBodyDataColumns : public Darabonba::Model {
public:
  shared_ptr<string> key{};
  shared_ptr<string> title{};

  GetHotlineAgentDetailReportResponseBodyDataColumns() {}

  explicit GetHotlineAgentDetailReportResponseBodyDataColumns(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (key) {
      res["Key"] = boost::any(*key);
    }
    if (title) {
      res["Title"] = boost::any(*title);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Key") != m.end() && !m["Key"].empty()) {
      key = make_shared<string>(boost::any_cast<string>(m["Key"]));
    }
    if (m.find("Title") != m.end() && !m["Title"].empty()) {
      title = make_shared<string>(boost::any_cast<string>(m["Title"]));
    }
  }


  virtual ~GetHotlineAgentDetailReportResponseBodyDataColumns() = default;
};
class GetHotlineAgentDetailReportResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<vector<GetHotlineAgentDetailReportResponseBodyDataColumns>> columns{};
  shared_ptr<long> page{};
  shared_ptr<long> pageSize{};
  shared_ptr<vector<map<string, boost::any>>> rows{};
  shared_ptr<long> total{};

  GetHotlineAgentDetailReportResponseBodyData() {}

  explicit GetHotlineAgentDetailReportResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (columns) {
      vector<boost::any> temp1;
      for(auto item1:*columns){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Columns"] = boost::any(temp1);
    }
    if (page) {
      res["Page"] = boost::any(*page);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (total) {
      res["Total"] = boost::any(*total);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Columns") != m.end() && !m["Columns"].empty()) {
      if (typeid(vector<boost::any>) == m["Columns"].type()) {
        vector<GetHotlineAgentDetailReportResponseBodyDataColumns> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Columns"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetHotlineAgentDetailReportResponseBodyDataColumns model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        columns = make_shared<vector<GetHotlineAgentDetailReportResponseBodyDataColumns>>(expect1);
      }
    }
    if (m.find("Page") != m.end() && !m["Page"].empty()) {
      page = make_shared<long>(boost::any_cast<long>(m["Page"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      vector<map<string, boost::any>> toVec1;
      if (typeid(vector<boost::any>) == m["Rows"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["Rows"]);
        for (auto item:vec1) {
          map<string, boost::any> map2 = boost::any_cast<map<string, boost::any>>(item);
          map<string, boost::any> toMap2;
          for (auto item:map2) {
             toMap2[item.first] = item.second;
          }
           toVec1.push_back(toMap2);
        }
      }
      rows = make_shared<vector<map<string, boost::any>>>(toVec1);
    }
    if (m.find("Total") != m.end() && !m["Total"].empty()) {
      total = make_shared<long>(boost::any_cast<long>(m["Total"]));
    }
  }


  virtual ~GetHotlineAgentDetailReportResponseBodyData() = default;
};
class GetHotlineAgentDetailReportResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetHotlineAgentDetailReportResponseBodyData> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetHotlineAgentDetailReportResponseBody() {}

  explicit GetHotlineAgentDetailReportResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetHotlineAgentDetailReportResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetHotlineAgentDetailReportResponseBodyData>(model1);
      }
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetHotlineAgentDetailReportResponseBody() = default;
};
class GetHotlineAgentDetailReportResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetHotlineAgentDetailReportResponseBody> body{};

  GetHotlineAgentDetailReportResponse() {}

  explicit GetHotlineAgentDetailReportResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetHotlineAgentDetailReportResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetHotlineAgentDetailReportResponseBody>(model1);
      }
    }
  }


  virtual ~GetHotlineAgentDetailReportResponse() = default;
};
class GetHotlineAgentStatusRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> instanceId{};

  GetHotlineAgentStatusRequest() {}

  explicit GetHotlineAgentStatusRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetHotlineAgentStatusRequest() = default;
};
class GetHotlineAgentStatusResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetHotlineAgentStatusResponseBody() {}

  explicit GetHotlineAgentStatusResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetHotlineAgentStatusResponseBody() = default;
};
class GetHotlineAgentStatusResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetHotlineAgentStatusResponseBody> body{};

  GetHotlineAgentStatusResponse() {}

  explicit GetHotlineAgentStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetHotlineAgentStatusResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetHotlineAgentStatusResponseBody>(model1);
      }
    }
  }


  virtual ~GetHotlineAgentStatusResponse() = default;
};
class GetHotlineCallActionRequest : public Darabonba::Model {
public:
  shared_ptr<string> acc{};
  shared_ptr<string> accountName{};
  shared_ptr<long> act{};
  shared_ptr<string> biz{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> fromSource{};
  shared_ptr<string> instanceId{};

  GetHotlineCallActionRequest() {}

  explicit GetHotlineCallActionRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (acc) {
      res["Acc"] = boost::any(*acc);
    }
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (act) {
      res["Act"] = boost::any(*act);
    }
    if (biz) {
      res["Biz"] = boost::any(*biz);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (fromSource) {
      res["FromSource"] = boost::any(*fromSource);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Acc") != m.end() && !m["Acc"].empty()) {
      acc = make_shared<string>(boost::any_cast<string>(m["Acc"]));
    }
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("Act") != m.end() && !m["Act"].empty()) {
      act = make_shared<long>(boost::any_cast<long>(m["Act"]));
    }
    if (m.find("Biz") != m.end() && !m["Biz"].empty()) {
      biz = make_shared<string>(boost::any_cast<string>(m["Biz"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("FromSource") != m.end() && !m["FromSource"].empty()) {
      fromSource = make_shared<string>(boost::any_cast<string>(m["FromSource"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetHotlineCallActionRequest() = default;
};
class GetHotlineCallActionResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> actionId{};
  shared_ptr<long> buId{};
  shared_ptr<long> calloutId{};
  shared_ptr<string> calloutName{};
  shared_ptr<long> caseId{};
  shared_ptr<string> channelId{};
  shared_ptr<long> channelType{};
  shared_ptr<long> depId{};
  shared_ptr<string> isTransfer{};
  shared_ptr<long> memberId{};
  shared_ptr<string> memberList{};
  shared_ptr<string> memberName{};
  shared_ptr<long> servicerId{};
  shared_ptr<string> servicerName{};
  shared_ptr<long> subTouchId{};
  shared_ptr<long> taskId{};
  shared_ptr<long> touchId{};

  GetHotlineCallActionResponseBodyData() {}

  explicit GetHotlineCallActionResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (actionId) {
      res["ActionId"] = boost::any(*actionId);
    }
    if (buId) {
      res["BuId"] = boost::any(*buId);
    }
    if (calloutId) {
      res["CalloutId"] = boost::any(*calloutId);
    }
    if (calloutName) {
      res["CalloutName"] = boost::any(*calloutName);
    }
    if (caseId) {
      res["CaseId"] = boost::any(*caseId);
    }
    if (channelId) {
      res["ChannelId"] = boost::any(*channelId);
    }
    if (channelType) {
      res["ChannelType"] = boost::any(*channelType);
    }
    if (depId) {
      res["DepId"] = boost::any(*depId);
    }
    if (isTransfer) {
      res["IsTransfer"] = boost::any(*isTransfer);
    }
    if (memberId) {
      res["MemberId"] = boost::any(*memberId);
    }
    if (memberList) {
      res["MemberList"] = boost::any(*memberList);
    }
    if (memberName) {
      res["MemberName"] = boost::any(*memberName);
    }
    if (servicerId) {
      res["ServicerId"] = boost::any(*servicerId);
    }
    if (servicerName) {
      res["ServicerName"] = boost::any(*servicerName);
    }
    if (subTouchId) {
      res["SubTouchId"] = boost::any(*subTouchId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    if (touchId) {
      res["TouchId"] = boost::any(*touchId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ActionId") != m.end() && !m["ActionId"].empty()) {
      actionId = make_shared<long>(boost::any_cast<long>(m["ActionId"]));
    }
    if (m.find("BuId") != m.end() && !m["BuId"].empty()) {
      buId = make_shared<long>(boost::any_cast<long>(m["BuId"]));
    }
    if (m.find("CalloutId") != m.end() && !m["CalloutId"].empty()) {
      calloutId = make_shared<long>(boost::any_cast<long>(m["CalloutId"]));
    }
    if (m.find("CalloutName") != m.end() && !m["CalloutName"].empty()) {
      calloutName = make_shared<string>(boost::any_cast<string>(m["CalloutName"]));
    }
    if (m.find("CaseId") != m.end() && !m["CaseId"].empty()) {
      caseId = make_shared<long>(boost::any_cast<long>(m["CaseId"]));
    }
    if (m.find("ChannelId") != m.end() && !m["ChannelId"].empty()) {
      channelId = make_shared<string>(boost::any_cast<string>(m["ChannelId"]));
    }
    if (m.find("ChannelType") != m.end() && !m["ChannelType"].empty()) {
      channelType = make_shared<long>(boost::any_cast<long>(m["ChannelType"]));
    }
    if (m.find("DepId") != m.end() && !m["DepId"].empty()) {
      depId = make_shared<long>(boost::any_cast<long>(m["DepId"]));
    }
    if (m.find("IsTransfer") != m.end() && !m["IsTransfer"].empty()) {
      isTransfer = make_shared<string>(boost::any_cast<string>(m["IsTransfer"]));
    }
    if (m.find("MemberId") != m.end() && !m["MemberId"].empty()) {
      memberId = make_shared<long>(boost::any_cast<long>(m["MemberId"]));
    }
    if (m.find("MemberList") != m.end() && !m["MemberList"].empty()) {
      memberList = make_shared<string>(boost::any_cast<string>(m["MemberList"]));
    }
    if (m.find("MemberName") != m.end() && !m["MemberName"].empty()) {
      memberName = make_shared<string>(boost::any_cast<string>(m["MemberName"]));
    }
    if (m.find("ServicerId") != m.end() && !m["ServicerId"].empty()) {
      servicerId = make_shared<long>(boost::any_cast<long>(m["ServicerId"]));
    }
    if (m.find("ServicerName") != m.end() && !m["ServicerName"].empty()) {
      servicerName = make_shared<string>(boost::any_cast<string>(m["ServicerName"]));
    }
    if (m.find("SubTouchId") != m.end() && !m["SubTouchId"].empty()) {
      subTouchId = make_shared<long>(boost::any_cast<long>(m["SubTouchId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
    if (m.find("TouchId") != m.end() && !m["TouchId"].empty()) {
      touchId = make_shared<long>(boost::any_cast<long>(m["TouchId"]));
    }
  }


  virtual ~GetHotlineCallActionResponseBodyData() = default;
};
class GetHotlineCallActionResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetHotlineCallActionResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetHotlineCallActionResponseBody() {}

  explicit GetHotlineCallActionResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetHotlineCallActionResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetHotlineCallActionResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetHotlineCallActionResponseBody() = default;
};
class GetHotlineCallActionResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetHotlineCallActionResponseBody> body{};

  GetHotlineCallActionResponse() {}

  explicit GetHotlineCallActionResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetHotlineCallActionResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetHotlineCallActionResponseBody>(model1);
      }
    }
  }


  virtual ~GetHotlineCallActionResponse() = default;
};
class GetHotlineGroupDetailReportRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetHotlineGroupDetailReportRequest() {}

  explicit GetHotlineGroupDetailReportRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetHotlineGroupDetailReportRequest() = default;
};
class GetHotlineGroupDetailReportResponseBodyDataColumns : public Darabonba::Model {
public:
  shared_ptr<string> key{};
  shared_ptr<string> title{};

  GetHotlineGroupDetailReportResponseBodyDataColumns() {}

  explicit GetHotlineGroupDetailReportResponseBodyDataColumns(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (key) {
      res["Key"] = boost::any(*key);
    }
    if (title) {
      res["Title"] = boost::any(*title);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Key") != m.end() && !m["Key"].empty()) {
      key = make_shared<string>(boost::any_cast<string>(m["Key"]));
    }
    if (m.find("Title") != m.end() && !m["Title"].empty()) {
      title = make_shared<string>(boost::any_cast<string>(m["Title"]));
    }
  }


  virtual ~GetHotlineGroupDetailReportResponseBodyDataColumns() = default;
};
class GetHotlineGroupDetailReportResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<vector<GetHotlineGroupDetailReportResponseBodyDataColumns>> columns{};
  shared_ptr<long> page{};
  shared_ptr<long> pageSize{};
  shared_ptr<vector<map<string, boost::any>>> rows{};
  shared_ptr<long> total{};

  GetHotlineGroupDetailReportResponseBodyData() {}

  explicit GetHotlineGroupDetailReportResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (columns) {
      vector<boost::any> temp1;
      for(auto item1:*columns){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Columns"] = boost::any(temp1);
    }
    if (page) {
      res["Page"] = boost::any(*page);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (total) {
      res["Total"] = boost::any(*total);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Columns") != m.end() && !m["Columns"].empty()) {
      if (typeid(vector<boost::any>) == m["Columns"].type()) {
        vector<GetHotlineGroupDetailReportResponseBodyDataColumns> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Columns"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetHotlineGroupDetailReportResponseBodyDataColumns model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        columns = make_shared<vector<GetHotlineGroupDetailReportResponseBodyDataColumns>>(expect1);
      }
    }
    if (m.find("Page") != m.end() && !m["Page"].empty()) {
      page = make_shared<long>(boost::any_cast<long>(m["Page"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      vector<map<string, boost::any>> toVec1;
      if (typeid(vector<boost::any>) == m["Rows"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["Rows"]);
        for (auto item:vec1) {
          map<string, boost::any> map2 = boost::any_cast<map<string, boost::any>>(item);
          map<string, boost::any> toMap2;
          for (auto item:map2) {
             toMap2[item.first] = item.second;
          }
           toVec1.push_back(toMap2);
        }
      }
      rows = make_shared<vector<map<string, boost::any>>>(toVec1);
    }
    if (m.find("Total") != m.end() && !m["Total"].empty()) {
      total = make_shared<long>(boost::any_cast<long>(m["Total"]));
    }
  }


  virtual ~GetHotlineGroupDetailReportResponseBodyData() = default;
};
class GetHotlineGroupDetailReportResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetHotlineGroupDetailReportResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetHotlineGroupDetailReportResponseBody() {}

  explicit GetHotlineGroupDetailReportResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetHotlineGroupDetailReportResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetHotlineGroupDetailReportResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetHotlineGroupDetailReportResponseBody() = default;
};
class GetHotlineGroupDetailReportResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetHotlineGroupDetailReportResponseBody> body{};

  GetHotlineGroupDetailReportResponse() {}

  explicit GetHotlineGroupDetailReportResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetHotlineGroupDetailReportResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetHotlineGroupDetailReportResponseBody>(model1);
      }
    }
  }


  virtual ~GetHotlineGroupDetailReportResponse() = default;
};
class GetHotlineMessageLogRequest : public Darabonba::Model {
public:
  shared_ptr<string> acid{};
  shared_ptr<string> instanceId{};

  GetHotlineMessageLogRequest() {}

  explicit GetHotlineMessageLogRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (acid) {
      res["Acid"] = boost::any(*acid);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Acid") != m.end() && !m["Acid"].empty()) {
      acid = make_shared<string>(boost::any_cast<string>(m["Acid"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetHotlineMessageLogRequest() = default;
};
class GetHotlineMessageLogResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> acid{};
  shared_ptr<string> content{};
  shared_ptr<long> endTime{};
  shared_ptr<string> mid{};
  shared_ptr<long> senderType{};
  shared_ptr<long> startTime{};

  GetHotlineMessageLogResponseBodyData() {}

  explicit GetHotlineMessageLogResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (acid) {
      res["Acid"] = boost::any(*acid);
    }
    if (content) {
      res["Content"] = boost::any(*content);
    }
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (mid) {
      res["Mid"] = boost::any(*mid);
    }
    if (senderType) {
      res["SenderType"] = boost::any(*senderType);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Acid") != m.end() && !m["Acid"].empty()) {
      acid = make_shared<string>(boost::any_cast<string>(m["Acid"]));
    }
    if (m.find("Content") != m.end() && !m["Content"].empty()) {
      content = make_shared<string>(boost::any_cast<string>(m["Content"]));
    }
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<long>(boost::any_cast<long>(m["EndTime"]));
    }
    if (m.find("Mid") != m.end() && !m["Mid"].empty()) {
      mid = make_shared<string>(boost::any_cast<string>(m["Mid"]));
    }
    if (m.find("SenderType") != m.end() && !m["SenderType"].empty()) {
      senderType = make_shared<long>(boost::any_cast<long>(m["SenderType"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<long>(boost::any_cast<long>(m["StartTime"]));
    }
  }


  virtual ~GetHotlineMessageLogResponseBodyData() = default;
};
class GetHotlineMessageLogResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<GetHotlineMessageLogResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetHotlineMessageLogResponseBody() {}

  explicit GetHotlineMessageLogResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<GetHotlineMessageLogResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetHotlineMessageLogResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<GetHotlineMessageLogResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetHotlineMessageLogResponseBody() = default;
};
class GetHotlineMessageLogResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetHotlineMessageLogResponseBody> body{};

  GetHotlineMessageLogResponse() {}

  explicit GetHotlineMessageLogResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetHotlineMessageLogResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetHotlineMessageLogResponseBody>(model1);
      }
    }
  }


  virtual ~GetHotlineMessageLogResponse() = default;
};
class GetHotlineRuntimeInfoRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> instanceId{};

  GetHotlineRuntimeInfoRequest() {}

  explicit GetHotlineRuntimeInfoRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetHotlineRuntimeInfoRequest() = default;
};
class GetHotlineRuntimeInfoResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<map<string, boost::any>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetHotlineRuntimeInfoResponseBody() {}

  explicit GetHotlineRuntimeInfoResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      map<string, boost::any> map1 = boost::any_cast<map<string, boost::any>>(m["Data"]);
      map<string, boost::any> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      data = make_shared<map<string, boost::any>>(toMap1);
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetHotlineRuntimeInfoResponseBody() = default;
};
class GetHotlineRuntimeInfoResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetHotlineRuntimeInfoResponseBody> body{};

  GetHotlineRuntimeInfoResponse() {}

  explicit GetHotlineRuntimeInfoResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetHotlineRuntimeInfoResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetHotlineRuntimeInfoResponseBody>(model1);
      }
    }
  }


  virtual ~GetHotlineRuntimeInfoResponse() = default;
};
class GetHotlineServiceStatisticsRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> agentIds{};
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetHotlineServiceStatisticsRequest() {}

  explicit GetHotlineServiceStatisticsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIds) {
      res["AgentIds"] = boost::any(*agentIds);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["AgentIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AgentIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      agentIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetHotlineServiceStatisticsRequest() = default;
};
class GetHotlineServiceStatisticsShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> agentIdsShrink{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<string> groupIdsShrink{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetHotlineServiceStatisticsShrinkRequest() {}

  explicit GetHotlineServiceStatisticsShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIdsShrink) {
      res["AgentIds"] = boost::any(*agentIdsShrink);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIdsShrink) {
      res["GroupIds"] = boost::any(*groupIdsShrink);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      agentIdsShrink = make_shared<string>(boost::any_cast<string>(m["AgentIds"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      groupIdsShrink = make_shared<string>(boost::any_cast<string>(m["GroupIds"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetHotlineServiceStatisticsShrinkRequest() = default;
};
class GetHotlineServiceStatisticsResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetHotlineServiceStatisticsResponseBodyData() {}

  explicit GetHotlineServiceStatisticsResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetHotlineServiceStatisticsResponseBodyData() = default;
};
class GetHotlineServiceStatisticsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetHotlineServiceStatisticsResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetHotlineServiceStatisticsResponseBody() {}

  explicit GetHotlineServiceStatisticsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetHotlineServiceStatisticsResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetHotlineServiceStatisticsResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetHotlineServiceStatisticsResponseBody() = default;
};
class GetHotlineServiceStatisticsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetHotlineServiceStatisticsResponseBody> body{};

  GetHotlineServiceStatisticsResponse() {}

  explicit GetHotlineServiceStatisticsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetHotlineServiceStatisticsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetHotlineServiceStatisticsResponseBody>(model1);
      }
    }
  }


  virtual ~GetHotlineServiceStatisticsResponse() = default;
};
class GetHotlineWaitingNumberRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  GetHotlineWaitingNumberRequest() {}

  explicit GetHotlineWaitingNumberRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetHotlineWaitingNumberRequest() = default;
};
class GetHotlineWaitingNumberResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetHotlineWaitingNumberResponseBody() {}

  explicit GetHotlineWaitingNumberResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<long>(boost::any_cast<long>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetHotlineWaitingNumberResponseBody() = default;
};
class GetHotlineWaitingNumberResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetHotlineWaitingNumberResponseBody> body{};

  GetHotlineWaitingNumberResponse() {}

  explicit GetHotlineWaitingNumberResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetHotlineWaitingNumberResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetHotlineWaitingNumberResponseBody>(model1);
      }
    }
  }


  virtual ~GetHotlineWaitingNumberResponse() = default;
};
class GetIndexCurrentValueRequest : public Darabonba::Model {
public:
  shared_ptr<string> depIds{};
  shared_ptr<string> groupIds{};
  shared_ptr<string> instanceId{};

  GetIndexCurrentValueRequest() {}

  explicit GetIndexCurrentValueRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIds = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      groupIds = make_shared<string>(boost::any_cast<string>(m["GroupIds"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetIndexCurrentValueRequest() = default;
};
class GetIndexCurrentValueResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<map<string, boost::any>>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetIndexCurrentValueResponseBody() {}

  explicit GetIndexCurrentValueResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      vector<map<string, boost::any>> toVec1;
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["Data"]);
        for (auto item:vec1) {
          map<string, boost::any> map2 = boost::any_cast<map<string, boost::any>>(item);
          map<string, boost::any> toMap2;
          for (auto item:map2) {
             toMap2[item.first] = item.second;
          }
           toVec1.push_back(toMap2);
        }
      }
      data = make_shared<vector<map<string, boost::any>>>(toVec1);
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetIndexCurrentValueResponseBody() = default;
};
class GetIndexCurrentValueResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetIndexCurrentValueResponseBody> body{};

  GetIndexCurrentValueResponse() {}

  explicit GetIndexCurrentValueResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetIndexCurrentValueResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetIndexCurrentValueResponseBody>(model1);
      }
    }
  }


  virtual ~GetIndexCurrentValueResponse() = default;
};
class GetInstanceListRequest : public Darabonba::Model {
public:
  shared_ptr<string> name{};
  shared_ptr<long> pageNumber{};
  shared_ptr<long> pageSize{};

  GetInstanceListRequest() {}

  explicit GetInstanceListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (pageNumber) {
      res["PageNumber"] = boost::any(*pageNumber);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("PageNumber") != m.end() && !m["PageNumber"].empty()) {
      pageNumber = make_shared<long>(boost::any_cast<long>(m["PageNumber"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
  }


  virtual ~GetInstanceListRequest() = default;
};
class GetInstanceListResponseBodyCommodityInstances : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<string> name{};

  GetInstanceListResponseBodyCommodityInstances() {}

  explicit GetInstanceListResponseBodyCommodityInstances(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
  }


  virtual ~GetInstanceListResponseBodyCommodityInstances() = default;
};
class GetInstanceListResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<GetInstanceListResponseBodyCommodityInstances>> commodityInstances{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<long> pageNumber{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};
  shared_ptr<long> totalCount{};

  GetInstanceListResponseBody() {}

  explicit GetInstanceListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (commodityInstances) {
      vector<boost::any> temp1;
      for(auto item1:*commodityInstances){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["CommodityInstances"] = boost::any(temp1);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (pageNumber) {
      res["PageNumber"] = boost::any(*pageNumber);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("CommodityInstances") != m.end() && !m["CommodityInstances"].empty()) {
      if (typeid(vector<boost::any>) == m["CommodityInstances"].type()) {
        vector<GetInstanceListResponseBodyCommodityInstances> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["CommodityInstances"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetInstanceListResponseBodyCommodityInstances model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        commodityInstances = make_shared<vector<GetInstanceListResponseBodyCommodityInstances>>(expect1);
      }
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("PageNumber") != m.end() && !m["PageNumber"].empty()) {
      pageNumber = make_shared<long>(boost::any_cast<long>(m["PageNumber"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~GetInstanceListResponseBody() = default;
};
class GetInstanceListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetInstanceListResponseBody> body{};

  GetInstanceListResponse() {}

  explicit GetInstanceListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetInstanceListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetInstanceListResponseBody>(model1);
      }
    }
  }


  virtual ~GetInstanceListResponse() = default;
};
class GetMcuLvsIpRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};

  GetMcuLvsIpRequest() {}

  explicit GetMcuLvsIpRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetMcuLvsIpRequest() = default;
};
class GetMcuLvsIpResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetMcuLvsIpResponseBody() {}

  explicit GetMcuLvsIpResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetMcuLvsIpResponseBody() = default;
};
class GetMcuLvsIpResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetMcuLvsIpResponseBody> body{};

  GetMcuLvsIpResponse() {}

  explicit GetMcuLvsIpResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetMcuLvsIpResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetMcuLvsIpResponseBody>(model1);
      }
    }
  }


  virtual ~GetMcuLvsIpResponse() = default;
};
class GetNumLocationRequest : public Darabonba::Model {
public:
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> phoneNum{};

  GetNumLocationRequest() {}

  explicit GetNumLocationRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (phoneNum) {
      res["PhoneNum"] = boost::any(*phoneNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PhoneNum") != m.end() && !m["PhoneNum"].empty()) {
      phoneNum = make_shared<string>(boost::any_cast<string>(m["PhoneNum"]));
    }
  }


  virtual ~GetNumLocationRequest() = default;
};
class GetNumLocationResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetNumLocationResponseBody() {}

  explicit GetNumLocationResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetNumLocationResponseBody() = default;
};
class GetNumLocationResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetNumLocationResponseBody> body{};

  GetNumLocationResponse() {}

  explicit GetNumLocationResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetNumLocationResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetNumLocationResponseBody>(model1);
      }
    }
  }


  virtual ~GetNumLocationResponse() = default;
};
class GetOnlineSeatInformationRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> agentIds{};
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetOnlineSeatInformationRequest() {}

  explicit GetOnlineSeatInformationRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIds) {
      res["AgentIds"] = boost::any(*agentIds);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["AgentIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AgentIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      agentIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetOnlineSeatInformationRequest() = default;
};
class GetOnlineSeatInformationShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> agentIdsShrink{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetOnlineSeatInformationShrinkRequest() {}

  explicit GetOnlineSeatInformationShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIdsShrink) {
      res["AgentIds"] = boost::any(*agentIdsShrink);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      agentIdsShrink = make_shared<string>(boost::any_cast<string>(m["AgentIds"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetOnlineSeatInformationShrinkRequest() = default;
};
class GetOnlineSeatInformationResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetOnlineSeatInformationResponseBodyData() {}

  explicit GetOnlineSeatInformationResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetOnlineSeatInformationResponseBodyData() = default;
};
class GetOnlineSeatInformationResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetOnlineSeatInformationResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetOnlineSeatInformationResponseBody() {}

  explicit GetOnlineSeatInformationResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetOnlineSeatInformationResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetOnlineSeatInformationResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetOnlineSeatInformationResponseBody() = default;
};
class GetOnlineSeatInformationResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetOnlineSeatInformationResponseBody> body{};

  GetOnlineSeatInformationResponse() {}

  explicit GetOnlineSeatInformationResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetOnlineSeatInformationResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetOnlineSeatInformationResponseBody>(model1);
      }
    }
  }


  virtual ~GetOnlineSeatInformationResponse() = default;
};
class GetOnlineServiceVolumeRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> agentIds{};
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetOnlineServiceVolumeRequest() {}

  explicit GetOnlineServiceVolumeRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIds) {
      res["AgentIds"] = boost::any(*agentIds);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["AgentIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AgentIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      agentIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetOnlineServiceVolumeRequest() = default;
};
class GetOnlineServiceVolumeShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> agentIdsShrink{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<string> groupIdsShrink{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetOnlineServiceVolumeShrinkRequest() {}

  explicit GetOnlineServiceVolumeShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIdsShrink) {
      res["AgentIds"] = boost::any(*agentIdsShrink);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIdsShrink) {
      res["GroupIds"] = boost::any(*groupIdsShrink);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      agentIdsShrink = make_shared<string>(boost::any_cast<string>(m["AgentIds"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      groupIdsShrink = make_shared<string>(boost::any_cast<string>(m["GroupIds"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetOnlineServiceVolumeShrinkRequest() = default;
};
class GetOnlineServiceVolumeResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetOnlineServiceVolumeResponseBodyData() {}

  explicit GetOnlineServiceVolumeResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetOnlineServiceVolumeResponseBodyData() = default;
};
class GetOnlineServiceVolumeResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetOnlineServiceVolumeResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetOnlineServiceVolumeResponseBody() {}

  explicit GetOnlineServiceVolumeResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetOnlineServiceVolumeResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetOnlineServiceVolumeResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetOnlineServiceVolumeResponseBody() = default;
};
class GetOnlineServiceVolumeResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetOnlineServiceVolumeResponseBody> body{};

  GetOnlineServiceVolumeResponse() {}

  explicit GetOnlineServiceVolumeResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetOnlineServiceVolumeResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetOnlineServiceVolumeResponseBody>(model1);
      }
    }
  }


  virtual ~GetOnlineServiceVolumeResponse() = default;
};
class GetOutbounNumListRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  GetOutbounNumListRequest() {}

  explicit GetOutbounNumListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetOutbounNumListRequest() = default;
};
class GetOutbounNumListResponseBodyDataNum : public Darabonba::Model {
public:
  shared_ptr<string> description{};
  shared_ptr<long> type{};
  shared_ptr<string> value{};

  GetOutbounNumListResponseBodyDataNum() {}

  explicit GetOutbounNumListResponseBodyDataNum(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (value) {
      res["Value"] = boost::any(*value);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<long>(boost::any_cast<long>(m["Type"]));
    }
    if (m.find("Value") != m.end() && !m["Value"].empty()) {
      value = make_shared<string>(boost::any_cast<string>(m["Value"]));
    }
  }


  virtual ~GetOutbounNumListResponseBodyDataNum() = default;
};
class GetOutbounNumListResponseBodyDataNumGroup : public Darabonba::Model {
public:
  shared_ptr<string> description{};
  shared_ptr<long> type{};
  shared_ptr<string> value{};

  GetOutbounNumListResponseBodyDataNumGroup() {}

  explicit GetOutbounNumListResponseBodyDataNumGroup(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    if (value) {
      res["Value"] = boost::any(*value);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<long>(boost::any_cast<long>(m["Type"]));
    }
    if (m.find("Value") != m.end() && !m["Value"].empty()) {
      value = make_shared<string>(boost::any_cast<string>(m["Value"]));
    }
  }


  virtual ~GetOutbounNumListResponseBodyDataNumGroup() = default;
};
class GetOutbounNumListResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<vector<GetOutbounNumListResponseBodyDataNum>> num{};
  shared_ptr<vector<GetOutbounNumListResponseBodyDataNumGroup>> numGroup{};

  GetOutbounNumListResponseBodyData() {}

  explicit GetOutbounNumListResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (num) {
      vector<boost::any> temp1;
      for(auto item1:*num){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Num"] = boost::any(temp1);
    }
    if (numGroup) {
      vector<boost::any> temp1;
      for(auto item1:*numGroup){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["NumGroup"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Num") != m.end() && !m["Num"].empty()) {
      if (typeid(vector<boost::any>) == m["Num"].type()) {
        vector<GetOutbounNumListResponseBodyDataNum> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Num"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetOutbounNumListResponseBodyDataNum model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        num = make_shared<vector<GetOutbounNumListResponseBodyDataNum>>(expect1);
      }
    }
    if (m.find("NumGroup") != m.end() && !m["NumGroup"].empty()) {
      if (typeid(vector<boost::any>) == m["NumGroup"].type()) {
        vector<GetOutbounNumListResponseBodyDataNumGroup> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["NumGroup"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetOutbounNumListResponseBodyDataNumGroup model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        numGroup = make_shared<vector<GetOutbounNumListResponseBodyDataNumGroup>>(expect1);
      }
    }
  }


  virtual ~GetOutbounNumListResponseBodyData() = default;
};
class GetOutbounNumListResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetOutbounNumListResponseBodyData> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetOutbounNumListResponseBody() {}

  explicit GetOutbounNumListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetOutbounNumListResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetOutbounNumListResponseBodyData>(model1);
      }
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetOutbounNumListResponseBody() = default;
};
class GetOutbounNumListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetOutbounNumListResponseBody> body{};

  GetOutbounNumListResponse() {}

  explicit GetOutbounNumListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetOutbounNumListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetOutbounNumListResponseBody>(model1);
      }
    }
  }


  virtual ~GetOutbounNumListResponse() = default;
};
class GetQualityProjectDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> projectId{};

  GetQualityProjectDetailRequest() {}

  explicit GetQualityProjectDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (projectId) {
      res["ProjectId"] = boost::any(*projectId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("ProjectId") != m.end() && !m["ProjectId"].empty()) {
      projectId = make_shared<long>(boost::any_cast<long>(m["ProjectId"]));
    }
  }


  virtual ~GetQualityProjectDetailRequest() = default;
};
class GetQualityProjectDetailResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> checkFreqType{};
  shared_ptr<string> createTime{};
  shared_ptr<vector<long>> depList{};
  shared_ptr<vector<long>> groupList{};
  shared_ptr<long> id{};
  shared_ptr<string> modifyTime{};
  shared_ptr<string> projectName{};
  shared_ptr<vector<long>> qualityRuleIds{};
  shared_ptr<long> qualityType{};
  shared_ptr<vector<long>> servicerList{};
  shared_ptr<long> status{};
  shared_ptr<long> version{};

  GetQualityProjectDetailResponseBodyData() {}

  explicit GetQualityProjectDetailResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (checkFreqType) {
      res["CheckFreqType"] = boost::any(*checkFreqType);
    }
    if (createTime) {
      res["CreateTime"] = boost::any(*createTime);
    }
    if (depList) {
      res["DepList"] = boost::any(*depList);
    }
    if (groupList) {
      res["GroupList"] = boost::any(*groupList);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (modifyTime) {
      res["ModifyTime"] = boost::any(*modifyTime);
    }
    if (projectName) {
      res["ProjectName"] = boost::any(*projectName);
    }
    if (qualityRuleIds) {
      res["QualityRuleIds"] = boost::any(*qualityRuleIds);
    }
    if (qualityType) {
      res["QualityType"] = boost::any(*qualityType);
    }
    if (servicerList) {
      res["ServicerList"] = boost::any(*servicerList);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (version) {
      res["Version"] = boost::any(*version);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CheckFreqType") != m.end() && !m["CheckFreqType"].empty()) {
      checkFreqType = make_shared<long>(boost::any_cast<long>(m["CheckFreqType"]));
    }
    if (m.find("CreateTime") != m.end() && !m["CreateTime"].empty()) {
      createTime = make_shared<string>(boost::any_cast<string>(m["CreateTime"]));
    }
    if (m.find("DepList") != m.end() && !m["DepList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depList = make_shared<vector<long>>(toVec1);
    }
    if (m.find("GroupList") != m.end() && !m["GroupList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupList = make_shared<vector<long>>(toVec1);
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("ModifyTime") != m.end() && !m["ModifyTime"].empty()) {
      modifyTime = make_shared<string>(boost::any_cast<string>(m["ModifyTime"]));
    }
    if (m.find("ProjectName") != m.end() && !m["ProjectName"].empty()) {
      projectName = make_shared<string>(boost::any_cast<string>(m["ProjectName"]));
    }
    if (m.find("QualityRuleIds") != m.end() && !m["QualityRuleIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["QualityRuleIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["QualityRuleIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      qualityRuleIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("QualityType") != m.end() && !m["QualityType"].empty()) {
      qualityType = make_shared<long>(boost::any_cast<long>(m["QualityType"]));
    }
    if (m.find("ServicerList") != m.end() && !m["ServicerList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["ServicerList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ServicerList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      servicerList = make_shared<vector<long>>(toVec1);
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("Version") != m.end() && !m["Version"].empty()) {
      version = make_shared<long>(boost::any_cast<long>(m["Version"]));
    }
  }


  virtual ~GetQualityProjectDetailResponseBodyData() = default;
};
class GetQualityProjectDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetQualityProjectDetailResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetQualityProjectDetailResponseBody() {}

  explicit GetQualityProjectDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetQualityProjectDetailResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetQualityProjectDetailResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetQualityProjectDetailResponseBody() = default;
};
class GetQualityProjectDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetQualityProjectDetailResponseBody> body{};

  GetQualityProjectDetailResponse() {}

  explicit GetQualityProjectDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetQualityProjectDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetQualityProjectDetailResponseBody>(model1);
      }
    }
  }


  virtual ~GetQualityProjectDetailResponse() = default;
};
class GetQualityProjectListRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageNo{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> projectId{};
  shared_ptr<string> projectName{};
  shared_ptr<long> status{};
  shared_ptr<long> checkFreqType{};

  GetQualityProjectListRequest() {}

  explicit GetQualityProjectListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageNo) {
      res["PageNo"] = boost::any(*pageNo);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (projectId) {
      res["ProjectId"] = boost::any(*projectId);
    }
    if (projectName) {
      res["ProjectName"] = boost::any(*projectName);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (checkFreqType) {
      res["checkFreqType"] = boost::any(*checkFreqType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageNo") != m.end() && !m["PageNo"].empty()) {
      pageNo = make_shared<long>(boost::any_cast<long>(m["PageNo"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("ProjectId") != m.end() && !m["ProjectId"].empty()) {
      projectId = make_shared<long>(boost::any_cast<long>(m["ProjectId"]));
    }
    if (m.find("ProjectName") != m.end() && !m["ProjectName"].empty()) {
      projectName = make_shared<string>(boost::any_cast<string>(m["ProjectName"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("checkFreqType") != m.end() && !m["checkFreqType"].empty()) {
      checkFreqType = make_shared<long>(boost::any_cast<long>(m["checkFreqType"]));
    }
  }


  virtual ~GetQualityProjectListRequest() = default;
};
class GetQualityProjectListResponseBodyDataQualityProjectList : public Darabonba::Model {
public:
  shared_ptr<long> checkFreqType{};
  shared_ptr<string> createTime{};
  shared_ptr<vector<long>> depList{};
  shared_ptr<vector<long>> groupList{};
  shared_ptr<long> id{};
  shared_ptr<string> modifyTime{};
  shared_ptr<string> projectName{};
  shared_ptr<vector<long>> qualityRuleIds{};
  shared_ptr<long> qualityType{};
  shared_ptr<vector<long>> servicerList{};
  shared_ptr<long> status{};
  shared_ptr<long> version{};

  GetQualityProjectListResponseBodyDataQualityProjectList() {}

  explicit GetQualityProjectListResponseBodyDataQualityProjectList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (checkFreqType) {
      res["CheckFreqType"] = boost::any(*checkFreqType);
    }
    if (createTime) {
      res["CreateTime"] = boost::any(*createTime);
    }
    if (depList) {
      res["DepList"] = boost::any(*depList);
    }
    if (groupList) {
      res["GroupList"] = boost::any(*groupList);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (modifyTime) {
      res["ModifyTime"] = boost::any(*modifyTime);
    }
    if (projectName) {
      res["ProjectName"] = boost::any(*projectName);
    }
    if (qualityRuleIds) {
      res["QualityRuleIds"] = boost::any(*qualityRuleIds);
    }
    if (qualityType) {
      res["QualityType"] = boost::any(*qualityType);
    }
    if (servicerList) {
      res["ServicerList"] = boost::any(*servicerList);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (version) {
      res["Version"] = boost::any(*version);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CheckFreqType") != m.end() && !m["CheckFreqType"].empty()) {
      checkFreqType = make_shared<long>(boost::any_cast<long>(m["CheckFreqType"]));
    }
    if (m.find("CreateTime") != m.end() && !m["CreateTime"].empty()) {
      createTime = make_shared<string>(boost::any_cast<string>(m["CreateTime"]));
    }
    if (m.find("DepList") != m.end() && !m["DepList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depList = make_shared<vector<long>>(toVec1);
    }
    if (m.find("GroupList") != m.end() && !m["GroupList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupList = make_shared<vector<long>>(toVec1);
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("ModifyTime") != m.end() && !m["ModifyTime"].empty()) {
      modifyTime = make_shared<string>(boost::any_cast<string>(m["ModifyTime"]));
    }
    if (m.find("ProjectName") != m.end() && !m["ProjectName"].empty()) {
      projectName = make_shared<string>(boost::any_cast<string>(m["ProjectName"]));
    }
    if (m.find("QualityRuleIds") != m.end() && !m["QualityRuleIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["QualityRuleIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["QualityRuleIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      qualityRuleIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("QualityType") != m.end() && !m["QualityType"].empty()) {
      qualityType = make_shared<long>(boost::any_cast<long>(m["QualityType"]));
    }
    if (m.find("ServicerList") != m.end() && !m["ServicerList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["ServicerList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ServicerList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      servicerList = make_shared<vector<long>>(toVec1);
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("Version") != m.end() && !m["Version"].empty()) {
      version = make_shared<long>(boost::any_cast<long>(m["Version"]));
    }
  }


  virtual ~GetQualityProjectListResponseBodyDataQualityProjectList() = default;
};
class GetQualityProjectListResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNo{};
  shared_ptr<long> pageSize{};
  shared_ptr<vector<GetQualityProjectListResponseBodyDataQualityProjectList>> qualityProjectList{};
  shared_ptr<long> total{};

  GetQualityProjectListResponseBodyData() {}

  explicit GetQualityProjectListResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNo) {
      res["PageNo"] = boost::any(*pageNo);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (qualityProjectList) {
      vector<boost::any> temp1;
      for(auto item1:*qualityProjectList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["QualityProjectList"] = boost::any(temp1);
    }
    if (total) {
      res["Total"] = boost::any(*total);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNo") != m.end() && !m["PageNo"].empty()) {
      pageNo = make_shared<long>(boost::any_cast<long>(m["PageNo"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("QualityProjectList") != m.end() && !m["QualityProjectList"].empty()) {
      if (typeid(vector<boost::any>) == m["QualityProjectList"].type()) {
        vector<GetQualityProjectListResponseBodyDataQualityProjectList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["QualityProjectList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetQualityProjectListResponseBodyDataQualityProjectList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        qualityProjectList = make_shared<vector<GetQualityProjectListResponseBodyDataQualityProjectList>>(expect1);
      }
    }
    if (m.find("Total") != m.end() && !m["Total"].empty()) {
      total = make_shared<long>(boost::any_cast<long>(m["Total"]));
    }
  }


  virtual ~GetQualityProjectListResponseBodyData() = default;
};
class GetQualityProjectListResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetQualityProjectListResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetQualityProjectListResponseBody() {}

  explicit GetQualityProjectListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetQualityProjectListResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetQualityProjectListResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetQualityProjectListResponseBody() = default;
};
class GetQualityProjectListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetQualityProjectListResponseBody> body{};

  GetQualityProjectListResponse() {}

  explicit GetQualityProjectListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetQualityProjectListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetQualityProjectListResponseBody>(model1);
      }
    }
  }


  virtual ~GetQualityProjectListResponse() = default;
};
class GetQualityProjectLogRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> projectId{};

  GetQualityProjectLogRequest() {}

  explicit GetQualityProjectLogRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (projectId) {
      res["ProjectId"] = boost::any(*projectId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("ProjectId") != m.end() && !m["ProjectId"].empty()) {
      projectId = make_shared<long>(boost::any_cast<long>(m["ProjectId"]));
    }
  }


  virtual ~GetQualityProjectLogRequest() = default;
};
class GetQualityProjectLogResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> actionData{};
  shared_ptr<string> actionTime{};
  shared_ptr<string> actionType{};
  shared_ptr<string> projectCreateTime{};
  shared_ptr<long> projectId{};

  GetQualityProjectLogResponseBodyData() {}

  explicit GetQualityProjectLogResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (actionData) {
      res["ActionData"] = boost::any(*actionData);
    }
    if (actionTime) {
      res["ActionTime"] = boost::any(*actionTime);
    }
    if (actionType) {
      res["ActionType"] = boost::any(*actionType);
    }
    if (projectCreateTime) {
      res["ProjectCreateTime"] = boost::any(*projectCreateTime);
    }
    if (projectId) {
      res["ProjectId"] = boost::any(*projectId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ActionData") != m.end() && !m["ActionData"].empty()) {
      actionData = make_shared<string>(boost::any_cast<string>(m["ActionData"]));
    }
    if (m.find("ActionTime") != m.end() && !m["ActionTime"].empty()) {
      actionTime = make_shared<string>(boost::any_cast<string>(m["ActionTime"]));
    }
    if (m.find("ActionType") != m.end() && !m["ActionType"].empty()) {
      actionType = make_shared<string>(boost::any_cast<string>(m["ActionType"]));
    }
    if (m.find("ProjectCreateTime") != m.end() && !m["ProjectCreateTime"].empty()) {
      projectCreateTime = make_shared<string>(boost::any_cast<string>(m["ProjectCreateTime"]));
    }
    if (m.find("ProjectId") != m.end() && !m["ProjectId"].empty()) {
      projectId = make_shared<long>(boost::any_cast<long>(m["ProjectId"]));
    }
  }


  virtual ~GetQualityProjectLogResponseBodyData() = default;
};
class GetQualityProjectLogResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<GetQualityProjectLogResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetQualityProjectLogResponseBody() {}

  explicit GetQualityProjectLogResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<GetQualityProjectLogResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetQualityProjectLogResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<GetQualityProjectLogResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetQualityProjectLogResponseBody() = default;
};
class GetQualityProjectLogResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetQualityProjectLogResponseBody> body{};

  GetQualityProjectLogResponse() {}

  explicit GetQualityProjectLogResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetQualityProjectLogResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetQualityProjectLogResponseBody>(model1);
      }
    }
  }


  virtual ~GetQualityProjectLogResponse() = default;
};
class GetQualityResultRequest : public Darabonba::Model {
public:
  shared_ptr<string> channelType{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<long> hitStatus{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageNo{};
  shared_ptr<long> pageSize{};
  shared_ptr<vector<long>> projectIds{};
  shared_ptr<vector<long>> qualityRuleIds{};
  shared_ptr<string> touchEndTime{};
  shared_ptr<string> touchStartTime{};

  GetQualityResultRequest() {}

  explicit GetQualityResultRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (channelType) {
      res["ChannelType"] = boost::any(*channelType);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (hitStatus) {
      res["HitStatus"] = boost::any(*hitStatus);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageNo) {
      res["PageNo"] = boost::any(*pageNo);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (projectIds) {
      res["ProjectIds"] = boost::any(*projectIds);
    }
    if (qualityRuleIds) {
      res["QualityRuleIds"] = boost::any(*qualityRuleIds);
    }
    if (touchEndTime) {
      res["TouchEndTime"] = boost::any(*touchEndTime);
    }
    if (touchStartTime) {
      res["TouchStartTime"] = boost::any(*touchStartTime);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ChannelType") != m.end() && !m["ChannelType"].empty()) {
      channelType = make_shared<string>(boost::any_cast<string>(m["ChannelType"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("HitStatus") != m.end() && !m["HitStatus"].empty()) {
      hitStatus = make_shared<long>(boost::any_cast<long>(m["HitStatus"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageNo") != m.end() && !m["PageNo"].empty()) {
      pageNo = make_shared<long>(boost::any_cast<long>(m["PageNo"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("ProjectIds") != m.end() && !m["ProjectIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["ProjectIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ProjectIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      projectIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("QualityRuleIds") != m.end() && !m["QualityRuleIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["QualityRuleIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["QualityRuleIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      qualityRuleIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("TouchEndTime") != m.end() && !m["TouchEndTime"].empty()) {
      touchEndTime = make_shared<string>(boost::any_cast<string>(m["TouchEndTime"]));
    }
    if (m.find("TouchStartTime") != m.end() && !m["TouchStartTime"].empty()) {
      touchStartTime = make_shared<string>(boost::any_cast<string>(m["TouchStartTime"]));
    }
  }


  virtual ~GetQualityResultRequest() = default;
};
class GetQualityResultResponseBodyDataQualityResultResponseList : public Darabonba::Model {
public:
  shared_ptr<string> channelType{};
  shared_ptr<string> channelTypeName{};
  shared_ptr<string> groupId{};
  shared_ptr<string> groupName{};
  shared_ptr<string> hitDetail{};
  shared_ptr<bool> hitStatus{};
  shared_ptr<string> instanceName{};
  shared_ptr<string> memberName{};
  shared_ptr<string> projectId{};
  shared_ptr<string> projectName{};
  shared_ptr<string> ruleId{};
  shared_ptr<string> ruleName{};
  shared_ptr<string> servicerId{};
  shared_ptr<string> servicerName{};
  shared_ptr<string> touchId{};
  shared_ptr<string> touchStartTime{};

  GetQualityResultResponseBodyDataQualityResultResponseList() {}

  explicit GetQualityResultResponseBodyDataQualityResultResponseList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (channelType) {
      res["ChannelType"] = boost::any(*channelType);
    }
    if (channelTypeName) {
      res["ChannelTypeName"] = boost::any(*channelTypeName);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (groupName) {
      res["GroupName"] = boost::any(*groupName);
    }
    if (hitDetail) {
      res["HitDetail"] = boost::any(*hitDetail);
    }
    if (hitStatus) {
      res["HitStatus"] = boost::any(*hitStatus);
    }
    if (instanceName) {
      res["InstanceName"] = boost::any(*instanceName);
    }
    if (memberName) {
      res["MemberName"] = boost::any(*memberName);
    }
    if (projectId) {
      res["ProjectId"] = boost::any(*projectId);
    }
    if (projectName) {
      res["ProjectName"] = boost::any(*projectName);
    }
    if (ruleId) {
      res["RuleId"] = boost::any(*ruleId);
    }
    if (ruleName) {
      res["RuleName"] = boost::any(*ruleName);
    }
    if (servicerId) {
      res["ServicerId"] = boost::any(*servicerId);
    }
    if (servicerName) {
      res["ServicerName"] = boost::any(*servicerName);
    }
    if (touchId) {
      res["TouchId"] = boost::any(*touchId);
    }
    if (touchStartTime) {
      res["TouchStartTime"] = boost::any(*touchStartTime);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ChannelType") != m.end() && !m["ChannelType"].empty()) {
      channelType = make_shared<string>(boost::any_cast<string>(m["ChannelType"]));
    }
    if (m.find("ChannelTypeName") != m.end() && !m["ChannelTypeName"].empty()) {
      channelTypeName = make_shared<string>(boost::any_cast<string>(m["ChannelTypeName"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<string>(boost::any_cast<string>(m["GroupId"]));
    }
    if (m.find("GroupName") != m.end() && !m["GroupName"].empty()) {
      groupName = make_shared<string>(boost::any_cast<string>(m["GroupName"]));
    }
    if (m.find("HitDetail") != m.end() && !m["HitDetail"].empty()) {
      hitDetail = make_shared<string>(boost::any_cast<string>(m["HitDetail"]));
    }
    if (m.find("HitStatus") != m.end() && !m["HitStatus"].empty()) {
      hitStatus = make_shared<bool>(boost::any_cast<bool>(m["HitStatus"]));
    }
    if (m.find("InstanceName") != m.end() && !m["InstanceName"].empty()) {
      instanceName = make_shared<string>(boost::any_cast<string>(m["InstanceName"]));
    }
    if (m.find("MemberName") != m.end() && !m["MemberName"].empty()) {
      memberName = make_shared<string>(boost::any_cast<string>(m["MemberName"]));
    }
    if (m.find("ProjectId") != m.end() && !m["ProjectId"].empty()) {
      projectId = make_shared<string>(boost::any_cast<string>(m["ProjectId"]));
    }
    if (m.find("ProjectName") != m.end() && !m["ProjectName"].empty()) {
      projectName = make_shared<string>(boost::any_cast<string>(m["ProjectName"]));
    }
    if (m.find("RuleId") != m.end() && !m["RuleId"].empty()) {
      ruleId = make_shared<string>(boost::any_cast<string>(m["RuleId"]));
    }
    if (m.find("RuleName") != m.end() && !m["RuleName"].empty()) {
      ruleName = make_shared<string>(boost::any_cast<string>(m["RuleName"]));
    }
    if (m.find("ServicerId") != m.end() && !m["ServicerId"].empty()) {
      servicerId = make_shared<string>(boost::any_cast<string>(m["ServicerId"]));
    }
    if (m.find("ServicerName") != m.end() && !m["ServicerName"].empty()) {
      servicerName = make_shared<string>(boost::any_cast<string>(m["ServicerName"]));
    }
    if (m.find("TouchId") != m.end() && !m["TouchId"].empty()) {
      touchId = make_shared<string>(boost::any_cast<string>(m["TouchId"]));
    }
    if (m.find("TouchStartTime") != m.end() && !m["TouchStartTime"].empty()) {
      touchStartTime = make_shared<string>(boost::any_cast<string>(m["TouchStartTime"]));
    }
  }


  virtual ~GetQualityResultResponseBodyDataQualityResultResponseList() = default;
};
class GetQualityResultResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNo{};
  shared_ptr<long> pageSize{};
  shared_ptr<vector<GetQualityResultResponseBodyDataQualityResultResponseList>> qualityResultResponseList{};
  shared_ptr<long> totalNum{};

  GetQualityResultResponseBodyData() {}

  explicit GetQualityResultResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNo) {
      res["PageNo"] = boost::any(*pageNo);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (qualityResultResponseList) {
      vector<boost::any> temp1;
      for(auto item1:*qualityResultResponseList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["QualityResultResponseList"] = boost::any(temp1);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNo") != m.end() && !m["PageNo"].empty()) {
      pageNo = make_shared<long>(boost::any_cast<long>(m["PageNo"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("QualityResultResponseList") != m.end() && !m["QualityResultResponseList"].empty()) {
      if (typeid(vector<boost::any>) == m["QualityResultResponseList"].type()) {
        vector<GetQualityResultResponseBodyDataQualityResultResponseList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["QualityResultResponseList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetQualityResultResponseBodyDataQualityResultResponseList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        qualityResultResponseList = make_shared<vector<GetQualityResultResponseBodyDataQualityResultResponseList>>(expect1);
      }
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetQualityResultResponseBodyData() = default;
};
class GetQualityResultResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> channelTypeName{};
  shared_ptr<string> code{};
  shared_ptr<GetQualityResultResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetQualityResultResponseBody() {}

  explicit GetQualityResultResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (channelTypeName) {
      res["ChannelTypeName"] = boost::any(*channelTypeName);
    }
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ChannelTypeName") != m.end() && !m["ChannelTypeName"].empty()) {
      channelTypeName = make_shared<string>(boost::any_cast<string>(m["ChannelTypeName"]));
    }
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetQualityResultResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetQualityResultResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetQualityResultResponseBody() = default;
};
class GetQualityResultResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetQualityResultResponseBody> body{};

  GetQualityResultResponse() {}

  explicit GetQualityResultResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetQualityResultResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetQualityResultResponseBody>(model1);
      }
    }
  }


  virtual ~GetQualityResultResponse() = default;
};
class GetQualityRuleDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> qualityRuleId{};

  GetQualityRuleDetailRequest() {}

  explicit GetQualityRuleDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (qualityRuleId) {
      res["QualityRuleId"] = boost::any(*qualityRuleId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("QualityRuleId") != m.end() && !m["QualityRuleId"].empty()) {
      qualityRuleId = make_shared<long>(boost::any_cast<long>(m["QualityRuleId"]));
    }
  }


  virtual ~GetQualityRuleDetailRequest() = default;
};
class GetQualityRuleDetailResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<vector<string>> keyWords{};
  shared_ptr<long> matchType{};
  shared_ptr<string> name{};
  shared_ptr<string> ruleCreateTime{};
  shared_ptr<long> ruleId{};
  shared_ptr<long> ruleTag{};

  GetQualityRuleDetailResponseBodyData() {}

  explicit GetQualityRuleDetailResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (keyWords) {
      res["KeyWords"] = boost::any(*keyWords);
    }
    if (matchType) {
      res["MatchType"] = boost::any(*matchType);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (ruleCreateTime) {
      res["RuleCreateTime"] = boost::any(*ruleCreateTime);
    }
    if (ruleId) {
      res["RuleId"] = boost::any(*ruleId);
    }
    if (ruleTag) {
      res["RuleTag"] = boost::any(*ruleTag);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("KeyWords") != m.end() && !m["KeyWords"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["KeyWords"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["KeyWords"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      keyWords = make_shared<vector<string>>(toVec1);
    }
    if (m.find("MatchType") != m.end() && !m["MatchType"].empty()) {
      matchType = make_shared<long>(boost::any_cast<long>(m["MatchType"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("RuleCreateTime") != m.end() && !m["RuleCreateTime"].empty()) {
      ruleCreateTime = make_shared<string>(boost::any_cast<string>(m["RuleCreateTime"]));
    }
    if (m.find("RuleId") != m.end() && !m["RuleId"].empty()) {
      ruleId = make_shared<long>(boost::any_cast<long>(m["RuleId"]));
    }
    if (m.find("RuleTag") != m.end() && !m["RuleTag"].empty()) {
      ruleTag = make_shared<long>(boost::any_cast<long>(m["RuleTag"]));
    }
  }


  virtual ~GetQualityRuleDetailResponseBodyData() = default;
};
class GetQualityRuleDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetQualityRuleDetailResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetQualityRuleDetailResponseBody() {}

  explicit GetQualityRuleDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetQualityRuleDetailResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetQualityRuleDetailResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetQualityRuleDetailResponseBody() = default;
};
class GetQualityRuleDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetQualityRuleDetailResponseBody> body{};

  GetQualityRuleDetailResponse() {}

  explicit GetQualityRuleDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetQualityRuleDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetQualityRuleDetailResponseBody>(model1);
      }
    }
  }


  virtual ~GetQualityRuleDetailResponse() = default;
};
class GetQualityRuleListRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageNo{};
  shared_ptr<long> pageSize{};

  GetQualityRuleListRequest() {}

  explicit GetQualityRuleListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageNo) {
      res["PageNo"] = boost::any(*pageNo);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageNo") != m.end() && !m["PageNo"].empty()) {
      pageNo = make_shared<long>(boost::any_cast<long>(m["PageNo"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
  }


  virtual ~GetQualityRuleListRequest() = default;
};
class GetQualityRuleListResponseBodyDataQualityRuleList : public Darabonba::Model {
public:
  shared_ptr<vector<string>> keyWords{};
  shared_ptr<long> matchType{};
  shared_ptr<string> name{};
  shared_ptr<string> ruleCreateTime{};
  shared_ptr<long> ruleId{};
  shared_ptr<long> ruleTag{};

  GetQualityRuleListResponseBodyDataQualityRuleList() {}

  explicit GetQualityRuleListResponseBodyDataQualityRuleList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (keyWords) {
      res["KeyWords"] = boost::any(*keyWords);
    }
    if (matchType) {
      res["MatchType"] = boost::any(*matchType);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (ruleCreateTime) {
      res["RuleCreateTime"] = boost::any(*ruleCreateTime);
    }
    if (ruleId) {
      res["RuleId"] = boost::any(*ruleId);
    }
    if (ruleTag) {
      res["RuleTag"] = boost::any(*ruleTag);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("KeyWords") != m.end() && !m["KeyWords"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["KeyWords"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["KeyWords"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      keyWords = make_shared<vector<string>>(toVec1);
    }
    if (m.find("MatchType") != m.end() && !m["MatchType"].empty()) {
      matchType = make_shared<long>(boost::any_cast<long>(m["MatchType"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("RuleCreateTime") != m.end() && !m["RuleCreateTime"].empty()) {
      ruleCreateTime = make_shared<string>(boost::any_cast<string>(m["RuleCreateTime"]));
    }
    if (m.find("RuleId") != m.end() && !m["RuleId"].empty()) {
      ruleId = make_shared<long>(boost::any_cast<long>(m["RuleId"]));
    }
    if (m.find("RuleTag") != m.end() && !m["RuleTag"].empty()) {
      ruleTag = make_shared<long>(boost::any_cast<long>(m["RuleTag"]));
    }
  }


  virtual ~GetQualityRuleListResponseBodyDataQualityRuleList() = default;
};
class GetQualityRuleListResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNo{};
  shared_ptr<long> pageSize{};
  shared_ptr<vector<GetQualityRuleListResponseBodyDataQualityRuleList>> qualityRuleList{};
  shared_ptr<long> total{};

  GetQualityRuleListResponseBodyData() {}

  explicit GetQualityRuleListResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNo) {
      res["PageNo"] = boost::any(*pageNo);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (qualityRuleList) {
      vector<boost::any> temp1;
      for(auto item1:*qualityRuleList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["QualityRuleList"] = boost::any(temp1);
    }
    if (total) {
      res["Total"] = boost::any(*total);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNo") != m.end() && !m["PageNo"].empty()) {
      pageNo = make_shared<long>(boost::any_cast<long>(m["PageNo"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("QualityRuleList") != m.end() && !m["QualityRuleList"].empty()) {
      if (typeid(vector<boost::any>) == m["QualityRuleList"].type()) {
        vector<GetQualityRuleListResponseBodyDataQualityRuleList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["QualityRuleList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetQualityRuleListResponseBodyDataQualityRuleList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        qualityRuleList = make_shared<vector<GetQualityRuleListResponseBodyDataQualityRuleList>>(expect1);
      }
    }
    if (m.find("Total") != m.end() && !m["Total"].empty()) {
      total = make_shared<long>(boost::any_cast<long>(m["Total"]));
    }
  }


  virtual ~GetQualityRuleListResponseBodyData() = default;
};
class GetQualityRuleListResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetQualityRuleListResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetQualityRuleListResponseBody() {}

  explicit GetQualityRuleListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetQualityRuleListResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetQualityRuleListResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetQualityRuleListResponseBody() = default;
};
class GetQualityRuleListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetQualityRuleListResponseBody> body{};

  GetQualityRuleListResponse() {}

  explicit GetQualityRuleListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetQualityRuleListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetQualityRuleListResponseBody>(model1);
      }
    }
  }


  virtual ~GetQualityRuleListResponse() = default;
};
class GetQualityRuleTagListRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};

  GetQualityRuleTagListRequest() {}

  explicit GetQualityRuleTagListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetQualityRuleTagListRequest() = default;
};
class GetQualityRuleTagListResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> ruleTagId{};
  shared_ptr<string> ruleTagName{};

  GetQualityRuleTagListResponseBodyData() {}

  explicit GetQualityRuleTagListResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ruleTagId) {
      res["RuleTagId"] = boost::any(*ruleTagId);
    }
    if (ruleTagName) {
      res["RuleTagName"] = boost::any(*ruleTagName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("RuleTagId") != m.end() && !m["RuleTagId"].empty()) {
      ruleTagId = make_shared<long>(boost::any_cast<long>(m["RuleTagId"]));
    }
    if (m.find("RuleTagName") != m.end() && !m["RuleTagName"].empty()) {
      ruleTagName = make_shared<string>(boost::any_cast<string>(m["RuleTagName"]));
    }
  }


  virtual ~GetQualityRuleTagListResponseBodyData() = default;
};
class GetQualityRuleTagListResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<GetQualityRuleTagListResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetQualityRuleTagListResponseBody() {}

  explicit GetQualityRuleTagListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<GetQualityRuleTagListResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            GetQualityRuleTagListResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<GetQualityRuleTagListResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetQualityRuleTagListResponseBody() = default;
};
class GetQualityRuleTagListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetQualityRuleTagListResponseBody> body{};

  GetQualityRuleTagListResponse() {}

  explicit GetQualityRuleTagListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetQualityRuleTagListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetQualityRuleTagListResponseBody>(model1);
      }
    }
  }


  virtual ~GetQualityRuleTagListResponse() = default;
};
class GetQueueInformationRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetQueueInformationRequest() {}

  explicit GetQueueInformationRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetQueueInformationRequest() = default;
};
class GetQueueInformationShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<string> groupIdsShrink{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetQueueInformationShrinkRequest() {}

  explicit GetQueueInformationShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIdsShrink) {
      res["GroupIds"] = boost::any(*groupIdsShrink);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      groupIdsShrink = make_shared<string>(boost::any_cast<string>(m["GroupIds"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetQueueInformationShrinkRequest() = default;
};
class GetQueueInformationResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetQueueInformationResponseBodyData() {}

  explicit GetQueueInformationResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetQueueInformationResponseBodyData() = default;
};
class GetQueueInformationResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetQueueInformationResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetQueueInformationResponseBody() {}

  explicit GetQueueInformationResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetQueueInformationResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetQueueInformationResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetQueueInformationResponseBody() = default;
};
class GetQueueInformationResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetQueueInformationResponseBody> body{};

  GetQueueInformationResponse() {}

  explicit GetQueueInformationResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetQueueInformationResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetQueueInformationResponseBody>(model1);
      }
    }
  }


  virtual ~GetQueueInformationResponse() = default;
};
class GetRecordDataRequest : public Darabonba::Model {
public:
  shared_ptr<string> acid{};
  shared_ptr<string> instanceId{};

  GetRecordDataRequest() {}

  explicit GetRecordDataRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (acid) {
      res["Acid"] = boost::any(*acid);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Acid") != m.end() && !m["Acid"].empty()) {
      acid = make_shared<string>(boost::any_cast<string>(m["Acid"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetRecordDataRequest() = default;
};
class GetRecordDataResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> acid{};
  shared_ptr<string> ossLink{};

  GetRecordDataResponseBodyData() {}

  explicit GetRecordDataResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (acid) {
      res["Acid"] = boost::any(*acid);
    }
    if (ossLink) {
      res["OssLink"] = boost::any(*ossLink);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Acid") != m.end() && !m["Acid"].empty()) {
      acid = make_shared<string>(boost::any_cast<string>(m["Acid"]));
    }
    if (m.find("OssLink") != m.end() && !m["OssLink"].empty()) {
      ossLink = make_shared<string>(boost::any_cast<string>(m["OssLink"]));
    }
  }


  virtual ~GetRecordDataResponseBodyData() = default;
};
class GetRecordDataResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetRecordDataResponseBodyData> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetRecordDataResponseBody() {}

  explicit GetRecordDataResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetRecordDataResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetRecordDataResponseBodyData>(model1);
      }
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetRecordDataResponseBody() = default;
};
class GetRecordDataResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetRecordDataResponseBody> body{};

  GetRecordDataResponse() {}

  explicit GetRecordDataResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetRecordDataResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetRecordDataResponseBody>(model1);
      }
    }
  }


  virtual ~GetRecordDataResponse() = default;
};
class GetRecordUrlRequest : public Darabonba::Model {
public:
  shared_ptr<string> acid{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> recordType{};

  GetRecordUrlRequest() {}

  explicit GetRecordUrlRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (acid) {
      res["Acid"] = boost::any(*acid);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (recordType) {
      res["RecordType"] = boost::any(*recordType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Acid") != m.end() && !m["Acid"].empty()) {
      acid = make_shared<string>(boost::any_cast<string>(m["Acid"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("RecordType") != m.end() && !m["RecordType"].empty()) {
      recordType = make_shared<string>(boost::any_cast<string>(m["RecordType"]));
    }
  }


  virtual ~GetRecordUrlRequest() = default;
};
class GetRecordUrlResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> acid{};
  shared_ptr<string> ossLink{};

  GetRecordUrlResponseBodyData() {}

  explicit GetRecordUrlResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (acid) {
      res["Acid"] = boost::any(*acid);
    }
    if (ossLink) {
      res["OssLink"] = boost::any(*ossLink);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Acid") != m.end() && !m["Acid"].empty()) {
      acid = make_shared<string>(boost::any_cast<string>(m["Acid"]));
    }
    if (m.find("OssLink") != m.end() && !m["OssLink"].empty()) {
      ossLink = make_shared<string>(boost::any_cast<string>(m["OssLink"]));
    }
  }


  virtual ~GetRecordUrlResponseBodyData() = default;
};
class GetRecordUrlResponseBody : public Darabonba::Model {
public:
  shared_ptr<GetRecordUrlResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetRecordUrlResponseBody() {}

  explicit GetRecordUrlResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetRecordUrlResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetRecordUrlResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetRecordUrlResponseBody() = default;
};
class GetRecordUrlResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetRecordUrlResponseBody> body{};

  GetRecordUrlResponse() {}

  explicit GetRecordUrlResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetRecordUrlResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetRecordUrlResponseBody>(model1);
      }
    }
  }


  virtual ~GetRecordUrlResponse() = default;
};
class GetRtcTokenRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> instanceId{};

  GetRtcTokenRequest() {}

  explicit GetRtcTokenRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~GetRtcTokenRequest() = default;
};
class GetRtcTokenResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> rtcId{};
  shared_ptr<string> token{};

  GetRtcTokenResponseBodyData() {}

  explicit GetRtcTokenResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (rtcId) {
      res["RtcId"] = boost::any(*rtcId);
    }
    if (token) {
      res["Token"] = boost::any(*token);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("RtcId") != m.end() && !m["RtcId"].empty()) {
      rtcId = make_shared<string>(boost::any_cast<string>(m["RtcId"]));
    }
    if (m.find("Token") != m.end() && !m["Token"].empty()) {
      token = make_shared<string>(boost::any_cast<string>(m["Token"]));
    }
  }


  virtual ~GetRtcTokenResponseBodyData() = default;
};
class GetRtcTokenResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetRtcTokenResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  GetRtcTokenResponseBody() {}

  explicit GetRtcTokenResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetRtcTokenResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetRtcTokenResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~GetRtcTokenResponseBody() = default;
};
class GetRtcTokenResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetRtcTokenResponseBody> body{};

  GetRtcTokenResponse() {}

  explicit GetRtcTokenResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetRtcTokenResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetRtcTokenResponseBody>(model1);
      }
    }
  }


  virtual ~GetRtcTokenResponse() = default;
};
class GetSeatInformationRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetSeatInformationRequest() {}

  explicit GetSeatInformationRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (currentPage) {
      res["currentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["depIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["endDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["existDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (pageSize) {
      res["pageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["startDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("currentPage") != m.end() && !m["currentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["currentPage"]));
    }
    if (m.find("depIds") != m.end() && !m["depIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["depIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["depIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("endDate") != m.end() && !m["endDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["endDate"]));
    }
    if (m.find("existDepartmentGrouping") != m.end() && !m["existDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["existDepartmentGrouping"]));
    }
    if (m.find("pageSize") != m.end() && !m["pageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["pageSize"]));
    }
    if (m.find("startDate") != m.end() && !m["startDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["startDate"]));
    }
  }


  virtual ~GetSeatInformationRequest() = default;
};
class GetSeatInformationShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetSeatInformationShrinkRequest() {}

  explicit GetSeatInformationShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (currentPage) {
      res["currentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["depIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["endDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["existDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (pageSize) {
      res["pageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["startDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("currentPage") != m.end() && !m["currentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["currentPage"]));
    }
    if (m.find("depIds") != m.end() && !m["depIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["depIds"]));
    }
    if (m.find("endDate") != m.end() && !m["endDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["endDate"]));
    }
    if (m.find("existDepartmentGrouping") != m.end() && !m["existDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["existDepartmentGrouping"]));
    }
    if (m.find("pageSize") != m.end() && !m["pageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["pageSize"]));
    }
    if (m.find("startDate") != m.end() && !m["startDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["startDate"]));
    }
  }


  virtual ~GetSeatInformationShrinkRequest() = default;
};
class GetSeatInformationResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rowr{};
  shared_ptr<long> totalNum{};

  GetSeatInformationResponseBodyData() {}

  explicit GetSeatInformationResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rowr) {
      res["Rowr"] = boost::any(*rowr);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rowr") != m.end() && !m["Rowr"].empty()) {
      rowr = make_shared<string>(boost::any_cast<string>(m["Rowr"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetSeatInformationResponseBodyData() = default;
};
class GetSeatInformationResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetSeatInformationResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetSeatInformationResponseBody() {}

  explicit GetSeatInformationResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetSeatInformationResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetSeatInformationResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetSeatInformationResponseBody() = default;
};
class GetSeatInformationResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetSeatInformationResponseBody> body{};

  GetSeatInformationResponse() {}

  explicit GetSeatInformationResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetSeatInformationResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetSeatInformationResponseBody>(model1);
      }
    }
  }


  virtual ~GetSeatInformationResponse() = default;
};
class GetSkillGroupAgentStatusDetailsRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetSkillGroupAgentStatusDetailsRequest() {}

  explicit GetSkillGroupAgentStatusDetailsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetSkillGroupAgentStatusDetailsRequest() = default;
};
class GetSkillGroupAgentStatusDetailsShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<string> groupIdsShrink{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetSkillGroupAgentStatusDetailsShrinkRequest() {}

  explicit GetSkillGroupAgentStatusDetailsShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIdsShrink) {
      res["GroupIds"] = boost::any(*groupIdsShrink);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      groupIdsShrink = make_shared<string>(boost::any_cast<string>(m["GroupIds"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetSkillGroupAgentStatusDetailsShrinkRequest() = default;
};
class GetSkillGroupAgentStatusDetailsResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetSkillGroupAgentStatusDetailsResponseBodyData() {}

  explicit GetSkillGroupAgentStatusDetailsResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetSkillGroupAgentStatusDetailsResponseBodyData() = default;
};
class GetSkillGroupAgentStatusDetailsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetSkillGroupAgentStatusDetailsResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetSkillGroupAgentStatusDetailsResponseBody() {}

  explicit GetSkillGroupAgentStatusDetailsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetSkillGroupAgentStatusDetailsResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetSkillGroupAgentStatusDetailsResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetSkillGroupAgentStatusDetailsResponseBody() = default;
};
class GetSkillGroupAgentStatusDetailsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetSkillGroupAgentStatusDetailsResponseBody> body{};

  GetSkillGroupAgentStatusDetailsResponse() {}

  explicit GetSkillGroupAgentStatusDetailsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetSkillGroupAgentStatusDetailsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetSkillGroupAgentStatusDetailsResponseBody>(model1);
      }
    }
  }


  virtual ~GetSkillGroupAgentStatusDetailsResponse() = default;
};
class GetSkillGroupAndAgentStatusSummaryRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetSkillGroupAndAgentStatusSummaryRequest() {}

  explicit GetSkillGroupAndAgentStatusSummaryRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetSkillGroupAndAgentStatusSummaryRequest() = default;
};
class GetSkillGroupAndAgentStatusSummaryShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<string> groupIdsShrink{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetSkillGroupAndAgentStatusSummaryShrinkRequest() {}

  explicit GetSkillGroupAndAgentStatusSummaryShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIdsShrink) {
      res["GroupIds"] = boost::any(*groupIdsShrink);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      groupIdsShrink = make_shared<string>(boost::any_cast<string>(m["GroupIds"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetSkillGroupAndAgentStatusSummaryShrinkRequest() = default;
};
class GetSkillGroupAndAgentStatusSummaryResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetSkillGroupAndAgentStatusSummaryResponseBodyData() {}

  explicit GetSkillGroupAndAgentStatusSummaryResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetSkillGroupAndAgentStatusSummaryResponseBodyData() = default;
};
class GetSkillGroupAndAgentStatusSummaryResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetSkillGroupAndAgentStatusSummaryResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetSkillGroupAndAgentStatusSummaryResponseBody() {}

  explicit GetSkillGroupAndAgentStatusSummaryResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetSkillGroupAndAgentStatusSummaryResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetSkillGroupAndAgentStatusSummaryResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetSkillGroupAndAgentStatusSummaryResponseBody() = default;
};
class GetSkillGroupAndAgentStatusSummaryResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetSkillGroupAndAgentStatusSummaryResponseBody> body{};

  GetSkillGroupAndAgentStatusSummaryResponse() {}

  explicit GetSkillGroupAndAgentStatusSummaryResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetSkillGroupAndAgentStatusSummaryResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetSkillGroupAndAgentStatusSummaryResponseBody>(model1);
      }
    }
  }


  virtual ~GetSkillGroupAndAgentStatusSummaryResponse() = default;
};
class GetSkillGroupLatitudeStateRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetSkillGroupLatitudeStateRequest() {}

  explicit GetSkillGroupLatitudeStateRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetSkillGroupLatitudeStateRequest() = default;
};
class GetSkillGroupLatitudeStateShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<string> groupIdsShrink{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetSkillGroupLatitudeStateShrinkRequest() {}

  explicit GetSkillGroupLatitudeStateShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIdsShrink) {
      res["GroupIds"] = boost::any(*groupIdsShrink);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      groupIdsShrink = make_shared<string>(boost::any_cast<string>(m["GroupIds"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetSkillGroupLatitudeStateShrinkRequest() = default;
};
class GetSkillGroupLatitudeStateResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetSkillGroupLatitudeStateResponseBodyData() {}

  explicit GetSkillGroupLatitudeStateResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetSkillGroupLatitudeStateResponseBodyData() = default;
};
class GetSkillGroupLatitudeStateResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetSkillGroupLatitudeStateResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetSkillGroupLatitudeStateResponseBody() {}

  explicit GetSkillGroupLatitudeStateResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetSkillGroupLatitudeStateResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetSkillGroupLatitudeStateResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetSkillGroupLatitudeStateResponseBody() = default;
};
class GetSkillGroupLatitudeStateResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetSkillGroupLatitudeStateResponseBody> body{};

  GetSkillGroupLatitudeStateResponse() {}

  explicit GetSkillGroupLatitudeStateResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetSkillGroupLatitudeStateResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetSkillGroupLatitudeStateResponseBody>(model1);
      }
    }
  }


  virtual ~GetSkillGroupLatitudeStateResponse() = default;
};
class GetSkillGroupServiceCapabilityRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetSkillGroupServiceCapabilityRequest() {}

  explicit GetSkillGroupServiceCapabilityRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetSkillGroupServiceCapabilityRequest() = default;
};
class GetSkillGroupServiceCapabilityShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<string> groupIdsShrink{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};

  GetSkillGroupServiceCapabilityShrinkRequest() {}

  explicit GetSkillGroupServiceCapabilityShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIdsShrink) {
      res["GroupIds"] = boost::any(*groupIdsShrink);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      groupIdsShrink = make_shared<string>(boost::any_cast<string>(m["GroupIds"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
  }


  virtual ~GetSkillGroupServiceCapabilityShrinkRequest() = default;
};
class GetSkillGroupServiceCapabilityResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetSkillGroupServiceCapabilityResponseBodyData() {}

  explicit GetSkillGroupServiceCapabilityResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetSkillGroupServiceCapabilityResponseBodyData() = default;
};
class GetSkillGroupServiceCapabilityResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetSkillGroupServiceCapabilityResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetSkillGroupServiceCapabilityResponseBody() {}

  explicit GetSkillGroupServiceCapabilityResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetSkillGroupServiceCapabilityResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetSkillGroupServiceCapabilityResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetSkillGroupServiceCapabilityResponseBody() = default;
};
class GetSkillGroupServiceCapabilityResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetSkillGroupServiceCapabilityResponseBody> body{};

  GetSkillGroupServiceCapabilityResponse() {}

  explicit GetSkillGroupServiceCapabilityResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetSkillGroupServiceCapabilityResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetSkillGroupServiceCapabilityResponseBody>(model1);
      }
    }
  }


  virtual ~GetSkillGroupServiceCapabilityResponse() = default;
};
class GetSkillGroupServiceStatusRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> agentIds{};
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existChannelInstanceGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existRobotInstanceGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetSkillGroupServiceStatusRequest() {}

  explicit GetSkillGroupServiceStatusRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIds) {
      res["AgentIds"] = boost::any(*agentIds);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existChannelInstanceGrouping) {
      res["ExistChannelInstanceGrouping"] = boost::any(*existChannelInstanceGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existRobotInstanceGrouping) {
      res["ExistRobotInstanceGrouping"] = boost::any(*existRobotInstanceGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["AgentIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AgentIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      agentIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistChannelInstanceGrouping") != m.end() && !m["ExistChannelInstanceGrouping"].empty()) {
      existChannelInstanceGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistChannelInstanceGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistRobotInstanceGrouping") != m.end() && !m["ExistRobotInstanceGrouping"].empty()) {
      existRobotInstanceGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistRobotInstanceGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetSkillGroupServiceStatusRequest() = default;
};
class GetSkillGroupServiceStatusShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> agentIdsShrink{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existChannelInstanceGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existRobotInstanceGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<string> groupIdsShrink{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetSkillGroupServiceStatusShrinkRequest() {}

  explicit GetSkillGroupServiceStatusShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIdsShrink) {
      res["AgentIds"] = boost::any(*agentIdsShrink);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existChannelInstanceGrouping) {
      res["ExistChannelInstanceGrouping"] = boost::any(*existChannelInstanceGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existRobotInstanceGrouping) {
      res["ExistRobotInstanceGrouping"] = boost::any(*existRobotInstanceGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIdsShrink) {
      res["GroupIds"] = boost::any(*groupIdsShrink);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      agentIdsShrink = make_shared<string>(boost::any_cast<string>(m["AgentIds"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistChannelInstanceGrouping") != m.end() && !m["ExistChannelInstanceGrouping"].empty()) {
      existChannelInstanceGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistChannelInstanceGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistRobotInstanceGrouping") != m.end() && !m["ExistRobotInstanceGrouping"].empty()) {
      existRobotInstanceGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistRobotInstanceGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      groupIdsShrink = make_shared<string>(boost::any_cast<string>(m["GroupIds"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetSkillGroupServiceStatusShrinkRequest() = default;
};
class GetSkillGroupServiceStatusResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetSkillGroupServiceStatusResponseBodyData() {}

  explicit GetSkillGroupServiceStatusResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetSkillGroupServiceStatusResponseBodyData() = default;
};
class GetSkillGroupServiceStatusResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetSkillGroupServiceStatusResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetSkillGroupServiceStatusResponseBody() {}

  explicit GetSkillGroupServiceStatusResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetSkillGroupServiceStatusResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetSkillGroupServiceStatusResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetSkillGroupServiceStatusResponseBody() = default;
};
class GetSkillGroupServiceStatusResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetSkillGroupServiceStatusResponseBody> body{};

  GetSkillGroupServiceStatusResponse() {}

  explicit GetSkillGroupServiceStatusResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetSkillGroupServiceStatusResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetSkillGroupServiceStatusResponseBody>(model1);
      }
    }
  }


  virtual ~GetSkillGroupServiceStatusResponse() = default;
};
class GetSkillGroupStatusTotalRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> agentIds{};
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> depIds{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetSkillGroupStatusTotalRequest() {}

  explicit GetSkillGroupStatusTotalRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIds) {
      res["AgentIds"] = boost::any(*agentIds);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIds) {
      res["DepIds"] = boost::any(*depIds);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["AgentIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AgentIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      agentIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["DepIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["DepIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      depIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetSkillGroupStatusTotalRequest() = default;
};
class GetSkillGroupStatusTotalShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> agentIdsShrink{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> depIdsShrink{};
  shared_ptr<long> endDate{};
  shared_ptr<bool> existAgentGrouping{};
  shared_ptr<bool> existDepartmentGrouping{};
  shared_ptr<bool> existSkillGroupGrouping{};
  shared_ptr<string> groupIdsShrink{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> startDate{};
  shared_ptr<string> timeLatitudeType{};

  GetSkillGroupStatusTotalShrinkRequest() {}

  explicit GetSkillGroupStatusTotalShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIdsShrink) {
      res["AgentIds"] = boost::any(*agentIdsShrink);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (depIdsShrink) {
      res["DepIds"] = boost::any(*depIdsShrink);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (existAgentGrouping) {
      res["ExistAgentGrouping"] = boost::any(*existAgentGrouping);
    }
    if (existDepartmentGrouping) {
      res["ExistDepartmentGrouping"] = boost::any(*existDepartmentGrouping);
    }
    if (existSkillGroupGrouping) {
      res["ExistSkillGroupGrouping"] = boost::any(*existSkillGroupGrouping);
    }
    if (groupIdsShrink) {
      res["GroupIds"] = boost::any(*groupIdsShrink);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (timeLatitudeType) {
      res["TimeLatitudeType"] = boost::any(*timeLatitudeType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      agentIdsShrink = make_shared<string>(boost::any_cast<string>(m["AgentIds"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepIds") != m.end() && !m["DepIds"].empty()) {
      depIdsShrink = make_shared<string>(boost::any_cast<string>(m["DepIds"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<long>(boost::any_cast<long>(m["EndDate"]));
    }
    if (m.find("ExistAgentGrouping") != m.end() && !m["ExistAgentGrouping"].empty()) {
      existAgentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistAgentGrouping"]));
    }
    if (m.find("ExistDepartmentGrouping") != m.end() && !m["ExistDepartmentGrouping"].empty()) {
      existDepartmentGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistDepartmentGrouping"]));
    }
    if (m.find("ExistSkillGroupGrouping") != m.end() && !m["ExistSkillGroupGrouping"].empty()) {
      existSkillGroupGrouping = make_shared<bool>(boost::any_cast<bool>(m["ExistSkillGroupGrouping"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      groupIdsShrink = make_shared<string>(boost::any_cast<string>(m["GroupIds"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<long>(boost::any_cast<long>(m["StartDate"]));
    }
    if (m.find("TimeLatitudeType") != m.end() && !m["TimeLatitudeType"].empty()) {
      timeLatitudeType = make_shared<string>(boost::any_cast<string>(m["TimeLatitudeType"]));
    }
  }


  virtual ~GetSkillGroupStatusTotalShrinkRequest() = default;
};
class GetSkillGroupStatusTotalResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNum{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> rows{};
  shared_ptr<long> totalNum{};

  GetSkillGroupStatusTotalResponseBodyData() {}

  explicit GetSkillGroupStatusTotalResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNum) {
      res["PageNum"] = boost::any(*pageNum);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (rows) {
      res["Rows"] = boost::any(*rows);
    }
    if (totalNum) {
      res["TotalNum"] = boost::any(*totalNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNum") != m.end() && !m["PageNum"].empty()) {
      pageNum = make_shared<long>(boost::any_cast<long>(m["PageNum"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Rows") != m.end() && !m["Rows"].empty()) {
      rows = make_shared<string>(boost::any_cast<string>(m["Rows"]));
    }
    if (m.find("TotalNum") != m.end() && !m["TotalNum"].empty()) {
      totalNum = make_shared<long>(boost::any_cast<long>(m["TotalNum"]));
    }
  }


  virtual ~GetSkillGroupStatusTotalResponseBodyData() = default;
};
class GetSkillGroupStatusTotalResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<GetSkillGroupStatusTotalResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  GetSkillGroupStatusTotalResponseBody() {}

  explicit GetSkillGroupStatusTotalResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        GetSkillGroupStatusTotalResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<GetSkillGroupStatusTotalResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~GetSkillGroupStatusTotalResponseBody() = default;
};
class GetSkillGroupStatusTotalResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<GetSkillGroupStatusTotalResponseBody> body{};

  GetSkillGroupStatusTotalResponse() {}

  explicit GetSkillGroupStatusTotalResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        GetSkillGroupStatusTotalResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<GetSkillGroupStatusTotalResponseBody>(model1);
      }
    }
  }


  virtual ~GetSkillGroupStatusTotalResponse() = default;
};
class HangUpDoubleCallRequest : public Darabonba::Model {
public:
  shared_ptr<string> acid{};
  shared_ptr<string> instanceId{};

  HangUpDoubleCallRequest() {}

  explicit HangUpDoubleCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (acid) {
      res["Acid"] = boost::any(*acid);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Acid") != m.end() && !m["Acid"].empty()) {
      acid = make_shared<string>(boost::any_cast<string>(m["Acid"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~HangUpDoubleCallRequest() = default;
};
class HangUpDoubleCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  HangUpDoubleCallResponseBody() {}

  explicit HangUpDoubleCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~HangUpDoubleCallResponseBody() = default;
};
class HangUpDoubleCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<HangUpDoubleCallResponseBody> body{};

  HangUpDoubleCallResponse() {}

  explicit HangUpDoubleCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        HangUpDoubleCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<HangUpDoubleCallResponseBody>(model1);
      }
    }
  }


  virtual ~HangUpDoubleCallResponse() = default;
};
class HangupCallRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> callId{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> connectionId{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> jobId{};

  HangupCallRequest() {}

  explicit HangupCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (connectionId) {
      res["ConnectionId"] = boost::any(*connectionId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (jobId) {
      res["JobId"] = boost::any(*jobId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("ConnectionId") != m.end() && !m["ConnectionId"].empty()) {
      connectionId = make_shared<string>(boost::any_cast<string>(m["ConnectionId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("JobId") != m.end() && !m["JobId"].empty()) {
      jobId = make_shared<string>(boost::any_cast<string>(m["JobId"]));
    }
  }


  virtual ~HangupCallRequest() = default;
};
class HangupCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  HangupCallResponseBody() {}

  explicit HangupCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~HangupCallResponseBody() = default;
};
class HangupCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<HangupCallResponseBody> body{};

  HangupCallResponse() {}

  explicit HangupCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        HangupCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<HangupCallResponseBody>(model1);
      }
    }
  }


  virtual ~HangupCallResponse() = default;
};
class HangupOperateRequest : public Darabonba::Model {
public:
  shared_ptr<string> callId{};
  shared_ptr<bool> immediateHangup{};

  HangupOperateRequest() {}

  explicit HangupOperateRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (immediateHangup) {
      res["ImmediateHangup"] = boost::any(*immediateHangup);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("ImmediateHangup") != m.end() && !m["ImmediateHangup"].empty()) {
      immediateHangup = make_shared<bool>(boost::any_cast<bool>(m["ImmediateHangup"]));
    }
  }


  virtual ~HangupOperateRequest() = default;
};
class HangupOperateResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> mesage{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> result{};

  HangupOperateResponseBody() {}

  explicit HangupOperateResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (mesage) {
      res["Mesage"] = boost::any(*mesage);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (result) {
      res["Result"] = boost::any(*result);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Mesage") != m.end() && !m["Mesage"].empty()) {
      mesage = make_shared<string>(boost::any_cast<string>(m["Mesage"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Result") != m.end() && !m["Result"].empty()) {
      result = make_shared<bool>(boost::any_cast<bool>(m["Result"]));
    }
  }


  virtual ~HangupOperateResponseBody() = default;
};
class HangupOperateResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<HangupOperateResponseBody> body{};

  HangupOperateResponse() {}

  explicit HangupOperateResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        HangupOperateResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<HangupOperateResponseBody>(model1);
      }
    }
  }


  virtual ~HangupOperateResponse() = default;
};
class HangupThirdCallRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> callId{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> connectionId{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> jobId{};

  HangupThirdCallRequest() {}

  explicit HangupThirdCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (connectionId) {
      res["ConnectionId"] = boost::any(*connectionId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (jobId) {
      res["JobId"] = boost::any(*jobId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("ConnectionId") != m.end() && !m["ConnectionId"].empty()) {
      connectionId = make_shared<string>(boost::any_cast<string>(m["ConnectionId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("JobId") != m.end() && !m["JobId"].empty()) {
      jobId = make_shared<string>(boost::any_cast<string>(m["JobId"]));
    }
  }


  virtual ~HangupThirdCallRequest() = default;
};
class HangupThirdCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  HangupThirdCallResponseBody() {}

  explicit HangupThirdCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~HangupThirdCallResponseBody() = default;
};
class HangupThirdCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<HangupThirdCallResponseBody> body{};

  HangupThirdCallResponse() {}

  explicit HangupThirdCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        HangupThirdCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<HangupThirdCallResponseBody>(model1);
      }
    }
  }


  virtual ~HangupThirdCallResponse() = default;
};
class HoldCallRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> callId{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> connectionId{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> jobId{};

  HoldCallRequest() {}

  explicit HoldCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (connectionId) {
      res["ConnectionId"] = boost::any(*connectionId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (jobId) {
      res["JobId"] = boost::any(*jobId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("ConnectionId") != m.end() && !m["ConnectionId"].empty()) {
      connectionId = make_shared<string>(boost::any_cast<string>(m["ConnectionId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("JobId") != m.end() && !m["JobId"].empty()) {
      jobId = make_shared<string>(boost::any_cast<string>(m["JobId"]));
    }
  }


  virtual ~HoldCallRequest() = default;
};
class HoldCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  HoldCallResponseBody() {}

  explicit HoldCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~HoldCallResponseBody() = default;
};
class HoldCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<HoldCallResponseBody> body{};

  HoldCallResponse() {}

  explicit HoldCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        HoldCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<HoldCallResponseBody>(model1);
      }
    }
  }


  virtual ~HoldCallResponse() = default;
};
class HotlineSessionQueryRequest : public Darabonba::Model {
public:
  shared_ptr<string> acid{};
  shared_ptr<vector<string>> acidList{};
  shared_ptr<string> callResult{};
  shared_ptr<vector<string>> callResultList{};
  shared_ptr<long> callType{};
  shared_ptr<vector<long>> callTypeList{};
  shared_ptr<string> calledNumber{};
  shared_ptr<vector<string>> calledNumberList{};
  shared_ptr<string> callingNumber{};
  shared_ptr<vector<string>> callingNumberList{};
  shared_ptr<long> groupId{};
  shared_ptr<vector<long>> groupIdList{};
  shared_ptr<string> groupName{};
  shared_ptr<string> id{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> memberId{};
  shared_ptr<vector<string>> memberIdList{};
  shared_ptr<string> memberName{};
  shared_ptr<long> pageNo{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> params{};
  shared_ptr<long> queryEndTime{};
  shared_ptr<long> queryStartTime{};
  shared_ptr<string> requestId{};
  shared_ptr<string> servicerId{};
  shared_ptr<vector<string>> servicerIdList{};
  shared_ptr<string> servicerName{};

  HotlineSessionQueryRequest() {}

  explicit HotlineSessionQueryRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (acid) {
      res["Acid"] = boost::any(*acid);
    }
    if (acidList) {
      res["AcidList"] = boost::any(*acidList);
    }
    if (callResult) {
      res["CallResult"] = boost::any(*callResult);
    }
    if (callResultList) {
      res["CallResultList"] = boost::any(*callResultList);
    }
    if (callType) {
      res["CallType"] = boost::any(*callType);
    }
    if (callTypeList) {
      res["CallTypeList"] = boost::any(*callTypeList);
    }
    if (calledNumber) {
      res["CalledNumber"] = boost::any(*calledNumber);
    }
    if (calledNumberList) {
      res["CalledNumberList"] = boost::any(*calledNumberList);
    }
    if (callingNumber) {
      res["CallingNumber"] = boost::any(*callingNumber);
    }
    if (callingNumberList) {
      res["CallingNumberList"] = boost::any(*callingNumberList);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (groupIdList) {
      res["GroupIdList"] = boost::any(*groupIdList);
    }
    if (groupName) {
      res["GroupName"] = boost::any(*groupName);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (memberId) {
      res["MemberId"] = boost::any(*memberId);
    }
    if (memberIdList) {
      res["MemberIdList"] = boost::any(*memberIdList);
    }
    if (memberName) {
      res["MemberName"] = boost::any(*memberName);
    }
    if (pageNo) {
      res["PageNo"] = boost::any(*pageNo);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (params) {
      res["Params"] = boost::any(*params);
    }
    if (queryEndTime) {
      res["QueryEndTime"] = boost::any(*queryEndTime);
    }
    if (queryStartTime) {
      res["QueryStartTime"] = boost::any(*queryStartTime);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (servicerId) {
      res["ServicerId"] = boost::any(*servicerId);
    }
    if (servicerIdList) {
      res["ServicerIdList"] = boost::any(*servicerIdList);
    }
    if (servicerName) {
      res["ServicerName"] = boost::any(*servicerName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Acid") != m.end() && !m["Acid"].empty()) {
      acid = make_shared<string>(boost::any_cast<string>(m["Acid"]));
    }
    if (m.find("AcidList") != m.end() && !m["AcidList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["AcidList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AcidList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      acidList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("CallResult") != m.end() && !m["CallResult"].empty()) {
      callResult = make_shared<string>(boost::any_cast<string>(m["CallResult"]));
    }
    if (m.find("CallResultList") != m.end() && !m["CallResultList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["CallResultList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["CallResultList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      callResultList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("CallType") != m.end() && !m["CallType"].empty()) {
      callType = make_shared<long>(boost::any_cast<long>(m["CallType"]));
    }
    if (m.find("CallTypeList") != m.end() && !m["CallTypeList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["CallTypeList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["CallTypeList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      callTypeList = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CalledNumber") != m.end() && !m["CalledNumber"].empty()) {
      calledNumber = make_shared<string>(boost::any_cast<string>(m["CalledNumber"]));
    }
    if (m.find("CalledNumberList") != m.end() && !m["CalledNumberList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["CalledNumberList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["CalledNumberList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      calledNumberList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("CallingNumber") != m.end() && !m["CallingNumber"].empty()) {
      callingNumber = make_shared<string>(boost::any_cast<string>(m["CallingNumber"]));
    }
    if (m.find("CallingNumberList") != m.end() && !m["CallingNumberList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["CallingNumberList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["CallingNumberList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      callingNumberList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("GroupIdList") != m.end() && !m["GroupIdList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIdList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIdList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIdList = make_shared<vector<long>>(toVec1);
    }
    if (m.find("GroupName") != m.end() && !m["GroupName"].empty()) {
      groupName = make_shared<string>(boost::any_cast<string>(m["GroupName"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<string>(boost::any_cast<string>(m["Id"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("MemberId") != m.end() && !m["MemberId"].empty()) {
      memberId = make_shared<string>(boost::any_cast<string>(m["MemberId"]));
    }
    if (m.find("MemberIdList") != m.end() && !m["MemberIdList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["MemberIdList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["MemberIdList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      memberIdList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("MemberName") != m.end() && !m["MemberName"].empty()) {
      memberName = make_shared<string>(boost::any_cast<string>(m["MemberName"]));
    }
    if (m.find("PageNo") != m.end() && !m["PageNo"].empty()) {
      pageNo = make_shared<long>(boost::any_cast<long>(m["PageNo"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Params") != m.end() && !m["Params"].empty()) {
      params = make_shared<string>(boost::any_cast<string>(m["Params"]));
    }
    if (m.find("QueryEndTime") != m.end() && !m["QueryEndTime"].empty()) {
      queryEndTime = make_shared<long>(boost::any_cast<long>(m["QueryEndTime"]));
    }
    if (m.find("QueryStartTime") != m.end() && !m["QueryStartTime"].empty()) {
      queryStartTime = make_shared<long>(boost::any_cast<long>(m["QueryStartTime"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("ServicerId") != m.end() && !m["ServicerId"].empty()) {
      servicerId = make_shared<string>(boost::any_cast<string>(m["ServicerId"]));
    }
    if (m.find("ServicerIdList") != m.end() && !m["ServicerIdList"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["ServicerIdList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ServicerIdList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      servicerIdList = make_shared<vector<string>>(toVec1);
    }
    if (m.find("ServicerName") != m.end() && !m["ServicerName"].empty()) {
      servicerName = make_shared<string>(boost::any_cast<string>(m["ServicerName"]));
    }
  }


  virtual ~HotlineSessionQueryRequest() = default;
};
class HotlineSessionQueryResponseBodyDataCallDetailRecord : public Darabonba::Model {
public:
  shared_ptr<string> acid{};
  shared_ptr<string> activeTransferId{};
  shared_ptr<long> callContinueTime{};
  shared_ptr<string> callResult{};
  shared_ptr<long> callType{};
  shared_ptr<string> calledNumber{};
  shared_ptr<string> callingNumber{};
  shared_ptr<string> createTime{};
  shared_ptr<long> evaluationLevel{};
  shared_ptr<long> evaluationScore{};
  shared_ptr<long> groupId{};
  shared_ptr<string> groupName{};
  shared_ptr<string> hangUpRole{};
  shared_ptr<string> hangUpTime{};
  shared_ptr<string> id{};
  shared_ptr<string> inQueueTime{};
  shared_ptr<string> memberId{};
  shared_ptr<string> memberName{};
  shared_ptr<string> outQueueTime{};
  shared_ptr<string> passiveTransferId{};
  shared_ptr<string> passiveTransferIdType{};
  shared_ptr<string> pickUpTime{};
  shared_ptr<long> queueUpContinueTime{};
  shared_ptr<long> ringContinueTime{};
  shared_ptr<string> ringEndTime{};
  shared_ptr<string> ringStartTime{};
  shared_ptr<string> servicerId{};
  shared_ptr<string> servicerName{};
  shared_ptr<string> trunkCall{};

  HotlineSessionQueryResponseBodyDataCallDetailRecord() {}

  explicit HotlineSessionQueryResponseBodyDataCallDetailRecord(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (acid) {
      res["Acid"] = boost::any(*acid);
    }
    if (activeTransferId) {
      res["ActiveTransferId"] = boost::any(*activeTransferId);
    }
    if (callContinueTime) {
      res["CallContinueTime"] = boost::any(*callContinueTime);
    }
    if (callResult) {
      res["CallResult"] = boost::any(*callResult);
    }
    if (callType) {
      res["CallType"] = boost::any(*callType);
    }
    if (calledNumber) {
      res["CalledNumber"] = boost::any(*calledNumber);
    }
    if (callingNumber) {
      res["CallingNumber"] = boost::any(*callingNumber);
    }
    if (createTime) {
      res["CreateTime"] = boost::any(*createTime);
    }
    if (evaluationLevel) {
      res["EvaluationLevel"] = boost::any(*evaluationLevel);
    }
    if (evaluationScore) {
      res["EvaluationScore"] = boost::any(*evaluationScore);
    }
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (groupName) {
      res["GroupName"] = boost::any(*groupName);
    }
    if (hangUpRole) {
      res["HangUpRole"] = boost::any(*hangUpRole);
    }
    if (hangUpTime) {
      res["HangUpTime"] = boost::any(*hangUpTime);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (inQueueTime) {
      res["InQueueTime"] = boost::any(*inQueueTime);
    }
    if (memberId) {
      res["MemberId"] = boost::any(*memberId);
    }
    if (memberName) {
      res["MemberName"] = boost::any(*memberName);
    }
    if (outQueueTime) {
      res["OutQueueTime"] = boost::any(*outQueueTime);
    }
    if (passiveTransferId) {
      res["PassiveTransferId"] = boost::any(*passiveTransferId);
    }
    if (passiveTransferIdType) {
      res["PassiveTransferIdType"] = boost::any(*passiveTransferIdType);
    }
    if (pickUpTime) {
      res["PickUpTime"] = boost::any(*pickUpTime);
    }
    if (queueUpContinueTime) {
      res["QueueUpContinueTime"] = boost::any(*queueUpContinueTime);
    }
    if (ringContinueTime) {
      res["RingContinueTime"] = boost::any(*ringContinueTime);
    }
    if (ringEndTime) {
      res["RingEndTime"] = boost::any(*ringEndTime);
    }
    if (ringStartTime) {
      res["RingStartTime"] = boost::any(*ringStartTime);
    }
    if (servicerId) {
      res["ServicerId"] = boost::any(*servicerId);
    }
    if (servicerName) {
      res["ServicerName"] = boost::any(*servicerName);
    }
    if (trunkCall) {
      res["TrunkCall"] = boost::any(*trunkCall);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Acid") != m.end() && !m["Acid"].empty()) {
      acid = make_shared<string>(boost::any_cast<string>(m["Acid"]));
    }
    if (m.find("ActiveTransferId") != m.end() && !m["ActiveTransferId"].empty()) {
      activeTransferId = make_shared<string>(boost::any_cast<string>(m["ActiveTransferId"]));
    }
    if (m.find("CallContinueTime") != m.end() && !m["CallContinueTime"].empty()) {
      callContinueTime = make_shared<long>(boost::any_cast<long>(m["CallContinueTime"]));
    }
    if (m.find("CallResult") != m.end() && !m["CallResult"].empty()) {
      callResult = make_shared<string>(boost::any_cast<string>(m["CallResult"]));
    }
    if (m.find("CallType") != m.end() && !m["CallType"].empty()) {
      callType = make_shared<long>(boost::any_cast<long>(m["CallType"]));
    }
    if (m.find("CalledNumber") != m.end() && !m["CalledNumber"].empty()) {
      calledNumber = make_shared<string>(boost::any_cast<string>(m["CalledNumber"]));
    }
    if (m.find("CallingNumber") != m.end() && !m["CallingNumber"].empty()) {
      callingNumber = make_shared<string>(boost::any_cast<string>(m["CallingNumber"]));
    }
    if (m.find("CreateTime") != m.end() && !m["CreateTime"].empty()) {
      createTime = make_shared<string>(boost::any_cast<string>(m["CreateTime"]));
    }
    if (m.find("EvaluationLevel") != m.end() && !m["EvaluationLevel"].empty()) {
      evaluationLevel = make_shared<long>(boost::any_cast<long>(m["EvaluationLevel"]));
    }
    if (m.find("EvaluationScore") != m.end() && !m["EvaluationScore"].empty()) {
      evaluationScore = make_shared<long>(boost::any_cast<long>(m["EvaluationScore"]));
    }
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("GroupName") != m.end() && !m["GroupName"].empty()) {
      groupName = make_shared<string>(boost::any_cast<string>(m["GroupName"]));
    }
    if (m.find("HangUpRole") != m.end() && !m["HangUpRole"].empty()) {
      hangUpRole = make_shared<string>(boost::any_cast<string>(m["HangUpRole"]));
    }
    if (m.find("HangUpTime") != m.end() && !m["HangUpTime"].empty()) {
      hangUpTime = make_shared<string>(boost::any_cast<string>(m["HangUpTime"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<string>(boost::any_cast<string>(m["Id"]));
    }
    if (m.find("InQueueTime") != m.end() && !m["InQueueTime"].empty()) {
      inQueueTime = make_shared<string>(boost::any_cast<string>(m["InQueueTime"]));
    }
    if (m.find("MemberId") != m.end() && !m["MemberId"].empty()) {
      memberId = make_shared<string>(boost::any_cast<string>(m["MemberId"]));
    }
    if (m.find("MemberName") != m.end() && !m["MemberName"].empty()) {
      memberName = make_shared<string>(boost::any_cast<string>(m["MemberName"]));
    }
    if (m.find("OutQueueTime") != m.end() && !m["OutQueueTime"].empty()) {
      outQueueTime = make_shared<string>(boost::any_cast<string>(m["OutQueueTime"]));
    }
    if (m.find("PassiveTransferId") != m.end() && !m["PassiveTransferId"].empty()) {
      passiveTransferId = make_shared<string>(boost::any_cast<string>(m["PassiveTransferId"]));
    }
    if (m.find("PassiveTransferIdType") != m.end() && !m["PassiveTransferIdType"].empty()) {
      passiveTransferIdType = make_shared<string>(boost::any_cast<string>(m["PassiveTransferIdType"]));
    }
    if (m.find("PickUpTime") != m.end() && !m["PickUpTime"].empty()) {
      pickUpTime = make_shared<string>(boost::any_cast<string>(m["PickUpTime"]));
    }
    if (m.find("QueueUpContinueTime") != m.end() && !m["QueueUpContinueTime"].empty()) {
      queueUpContinueTime = make_shared<long>(boost::any_cast<long>(m["QueueUpContinueTime"]));
    }
    if (m.find("RingContinueTime") != m.end() && !m["RingContinueTime"].empty()) {
      ringContinueTime = make_shared<long>(boost::any_cast<long>(m["RingContinueTime"]));
    }
    if (m.find("RingEndTime") != m.end() && !m["RingEndTime"].empty()) {
      ringEndTime = make_shared<string>(boost::any_cast<string>(m["RingEndTime"]));
    }
    if (m.find("RingStartTime") != m.end() && !m["RingStartTime"].empty()) {
      ringStartTime = make_shared<string>(boost::any_cast<string>(m["RingStartTime"]));
    }
    if (m.find("ServicerId") != m.end() && !m["ServicerId"].empty()) {
      servicerId = make_shared<string>(boost::any_cast<string>(m["ServicerId"]));
    }
    if (m.find("ServicerName") != m.end() && !m["ServicerName"].empty()) {
      servicerName = make_shared<string>(boost::any_cast<string>(m["ServicerName"]));
    }
    if (m.find("TrunkCall") != m.end() && !m["TrunkCall"].empty()) {
      trunkCall = make_shared<string>(boost::any_cast<string>(m["TrunkCall"]));
    }
  }


  virtual ~HotlineSessionQueryResponseBodyDataCallDetailRecord() = default;
};
class HotlineSessionQueryResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<vector<HotlineSessionQueryResponseBodyDataCallDetailRecord>> callDetailRecord{};
  shared_ptr<long> pageNumber{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  HotlineSessionQueryResponseBodyData() {}

  explicit HotlineSessionQueryResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callDetailRecord) {
      vector<boost::any> temp1;
      for(auto item1:*callDetailRecord){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["CallDetailRecord"] = boost::any(temp1);
    }
    if (pageNumber) {
      res["PageNumber"] = boost::any(*pageNumber);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallDetailRecord") != m.end() && !m["CallDetailRecord"].empty()) {
      if (typeid(vector<boost::any>) == m["CallDetailRecord"].type()) {
        vector<HotlineSessionQueryResponseBodyDataCallDetailRecord> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["CallDetailRecord"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            HotlineSessionQueryResponseBodyDataCallDetailRecord model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        callDetailRecord = make_shared<vector<HotlineSessionQueryResponseBodyDataCallDetailRecord>>(expect1);
      }
    }
    if (m.find("PageNumber") != m.end() && !m["PageNumber"].empty()) {
      pageNumber = make_shared<long>(boost::any_cast<long>(m["PageNumber"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~HotlineSessionQueryResponseBodyData() = default;
};
class HotlineSessionQueryResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<HotlineSessionQueryResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  HotlineSessionQueryResponseBody() {}

  explicit HotlineSessionQueryResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        HotlineSessionQueryResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<HotlineSessionQueryResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~HotlineSessionQueryResponseBody() = default;
};
class HotlineSessionQueryResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<HotlineSessionQueryResponseBody> body{};

  HotlineSessionQueryResponse() {}

  explicit HotlineSessionQueryResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        HotlineSessionQueryResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<HotlineSessionQueryResponseBody>(model1);
      }
    }
  }


  virtual ~HotlineSessionQueryResponse() = default;
};
class InsertAiOutboundPhoneNumsRequestDetails : public Darabonba::Model {
public:
  shared_ptr<string> bizData{};
  shared_ptr<string> phoneNum{};

  InsertAiOutboundPhoneNumsRequestDetails() {}

  explicit InsertAiOutboundPhoneNumsRequestDetails(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (bizData) {
      res["BizData"] = boost::any(*bizData);
    }
    if (phoneNum) {
      res["PhoneNum"] = boost::any(*phoneNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BizData") != m.end() && !m["BizData"].empty()) {
      bizData = make_shared<string>(boost::any_cast<string>(m["BizData"]));
    }
    if (m.find("PhoneNum") != m.end() && !m["PhoneNum"].empty()) {
      phoneNum = make_shared<string>(boost::any_cast<string>(m["PhoneNum"]));
    }
  }


  virtual ~InsertAiOutboundPhoneNumsRequestDetails() = default;
};
class InsertAiOutboundPhoneNumsRequest : public Darabonba::Model {
public:
  shared_ptr<long> batchVersion{};
  shared_ptr<vector<InsertAiOutboundPhoneNumsRequestDetails>> details{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> taskId{};

  InsertAiOutboundPhoneNumsRequest() {}

  explicit InsertAiOutboundPhoneNumsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (batchVersion) {
      res["BatchVersion"] = boost::any(*batchVersion);
    }
    if (details) {
      vector<boost::any> temp1;
      for(auto item1:*details){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Details"] = boost::any(temp1);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BatchVersion") != m.end() && !m["BatchVersion"].empty()) {
      batchVersion = make_shared<long>(boost::any_cast<long>(m["BatchVersion"]));
    }
    if (m.find("Details") != m.end() && !m["Details"].empty()) {
      if (typeid(vector<boost::any>) == m["Details"].type()) {
        vector<InsertAiOutboundPhoneNumsRequestDetails> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Details"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            InsertAiOutboundPhoneNumsRequestDetails model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        details = make_shared<vector<InsertAiOutboundPhoneNumsRequestDetails>>(expect1);
      }
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~InsertAiOutboundPhoneNumsRequest() = default;
};
class InsertAiOutboundPhoneNumsShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<long> batchVersion{};
  shared_ptr<string> detailsShrink{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> taskId{};

  InsertAiOutboundPhoneNumsShrinkRequest() {}

  explicit InsertAiOutboundPhoneNumsShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (batchVersion) {
      res["BatchVersion"] = boost::any(*batchVersion);
    }
    if (detailsShrink) {
      res["Details"] = boost::any(*detailsShrink);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BatchVersion") != m.end() && !m["BatchVersion"].empty()) {
      batchVersion = make_shared<long>(boost::any_cast<long>(m["BatchVersion"]));
    }
    if (m.find("Details") != m.end() && !m["Details"].empty()) {
      detailsShrink = make_shared<string>(boost::any_cast<string>(m["Details"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~InsertAiOutboundPhoneNumsShrinkRequest() = default;
};
class InsertAiOutboundPhoneNumsResponseBodyDataFailInfo : public Darabonba::Model {
public:
  shared_ptr<string> bizData{};
  shared_ptr<string> msg{};
  shared_ptr<string> phoneNum{};

  InsertAiOutboundPhoneNumsResponseBodyDataFailInfo() {}

  explicit InsertAiOutboundPhoneNumsResponseBodyDataFailInfo(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (bizData) {
      res["BizData"] = boost::any(*bizData);
    }
    if (msg) {
      res["Msg"] = boost::any(*msg);
    }
    if (phoneNum) {
      res["PhoneNum"] = boost::any(*phoneNum);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BizData") != m.end() && !m["BizData"].empty()) {
      bizData = make_shared<string>(boost::any_cast<string>(m["BizData"]));
    }
    if (m.find("Msg") != m.end() && !m["Msg"].empty()) {
      msg = make_shared<string>(boost::any_cast<string>(m["Msg"]));
    }
    if (m.find("PhoneNum") != m.end() && !m["PhoneNum"].empty()) {
      phoneNum = make_shared<string>(boost::any_cast<string>(m["PhoneNum"]));
    }
  }


  virtual ~InsertAiOutboundPhoneNumsResponseBodyDataFailInfo() = default;
};
class InsertAiOutboundPhoneNumsResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<vector<InsertAiOutboundPhoneNumsResponseBodyDataFailInfo>> failInfo{};
  shared_ptr<long> successCount{};
  shared_ptr<long> totalCount{};

  InsertAiOutboundPhoneNumsResponseBodyData() {}

  explicit InsertAiOutboundPhoneNumsResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (failInfo) {
      vector<boost::any> temp1;
      for(auto item1:*failInfo){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["FailInfo"] = boost::any(temp1);
    }
    if (successCount) {
      res["SuccessCount"] = boost::any(*successCount);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("FailInfo") != m.end() && !m["FailInfo"].empty()) {
      if (typeid(vector<boost::any>) == m["FailInfo"].type()) {
        vector<InsertAiOutboundPhoneNumsResponseBodyDataFailInfo> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["FailInfo"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            InsertAiOutboundPhoneNumsResponseBodyDataFailInfo model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        failInfo = make_shared<vector<InsertAiOutboundPhoneNumsResponseBodyDataFailInfo>>(expect1);
      }
    }
    if (m.find("SuccessCount") != m.end() && !m["SuccessCount"].empty()) {
      successCount = make_shared<long>(boost::any_cast<long>(m["SuccessCount"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~InsertAiOutboundPhoneNumsResponseBodyData() = default;
};
class InsertAiOutboundPhoneNumsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<InsertAiOutboundPhoneNumsResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  InsertAiOutboundPhoneNumsResponseBody() {}

  explicit InsertAiOutboundPhoneNumsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        InsertAiOutboundPhoneNumsResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<InsertAiOutboundPhoneNumsResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~InsertAiOutboundPhoneNumsResponseBody() = default;
};
class InsertAiOutboundPhoneNumsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<InsertAiOutboundPhoneNumsResponseBody> body{};

  InsertAiOutboundPhoneNumsResponse() {}

  explicit InsertAiOutboundPhoneNumsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        InsertAiOutboundPhoneNumsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<InsertAiOutboundPhoneNumsResponseBody>(model1);
      }
    }
  }


  virtual ~InsertAiOutboundPhoneNumsResponse() = default;
};
class InsertTaskDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> callInfos{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> outboundTaskId{};

  InsertTaskDetailRequest() {}

  explicit InsertTaskDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callInfos) {
      res["CallInfos"] = boost::any(*callInfos);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (outboundTaskId) {
      res["OutboundTaskId"] = boost::any(*outboundTaskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallInfos") != m.end() && !m["CallInfos"].empty()) {
      callInfos = make_shared<string>(boost::any_cast<string>(m["CallInfos"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("OutboundTaskId") != m.end() && !m["OutboundTaskId"].empty()) {
      outboundTaskId = make_shared<long>(boost::any_cast<long>(m["OutboundTaskId"]));
    }
  }


  virtual ~InsertTaskDetailRequest() = default;
};
class InsertTaskDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  InsertTaskDetailResponseBody() {}

  explicit InsertTaskDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~InsertTaskDetailResponseBody() = default;
};
class InsertTaskDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<InsertTaskDetailResponseBody> body{};

  InsertTaskDetailResponse() {}

  explicit InsertTaskDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        InsertTaskDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<InsertTaskDetailResponseBody>(model1);
      }
    }
  }


  virtual ~InsertTaskDetailResponse() = default;
};
class JoinThirdCallRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> callId{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> connectionId{};
  shared_ptr<string> holdConnectionId{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> jobId{};

  JoinThirdCallRequest() {}

  explicit JoinThirdCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (connectionId) {
      res["ConnectionId"] = boost::any(*connectionId);
    }
    if (holdConnectionId) {
      res["HoldConnectionId"] = boost::any(*holdConnectionId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (jobId) {
      res["JobId"] = boost::any(*jobId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("ConnectionId") != m.end() && !m["ConnectionId"].empty()) {
      connectionId = make_shared<string>(boost::any_cast<string>(m["ConnectionId"]));
    }
    if (m.find("HoldConnectionId") != m.end() && !m["HoldConnectionId"].empty()) {
      holdConnectionId = make_shared<string>(boost::any_cast<string>(m["HoldConnectionId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("JobId") != m.end() && !m["JobId"].empty()) {
      jobId = make_shared<string>(boost::any_cast<string>(m["JobId"]));
    }
  }


  virtual ~JoinThirdCallRequest() = default;
};
class JoinThirdCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  JoinThirdCallResponseBody() {}

  explicit JoinThirdCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~JoinThirdCallResponseBody() = default;
};
class JoinThirdCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<JoinThirdCallResponseBody> body{};

  JoinThirdCallResponse() {}

  explicit JoinThirdCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        JoinThirdCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<JoinThirdCallResponseBody>(model1);
      }
    }
  }


  virtual ~JoinThirdCallResponse() = default;
};
class ListAgentBySkillGroupIdRequest : public Darabonba::Model {
public:
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> skillGroupId{};

  ListAgentBySkillGroupIdRequest() {}

  explicit ListAgentBySkillGroupIdRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (skillGroupId) {
      res["SkillGroupId"] = boost::any(*skillGroupId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("SkillGroupId") != m.end() && !m["SkillGroupId"].empty()) {
      skillGroupId = make_shared<long>(boost::any_cast<long>(m["SkillGroupId"]));
    }
  }


  virtual ~ListAgentBySkillGroupIdRequest() = default;
};
class ListAgentBySkillGroupIdResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<long> agentId{};
  shared_ptr<string> displayName{};
  shared_ptr<long> status{};
  shared_ptr<long> tenantId{};

  ListAgentBySkillGroupIdResponseBodyData() {}

  explicit ListAgentBySkillGroupIdResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (agentId) {
      res["AgentId"] = boost::any(*agentId);
    }
    if (displayName) {
      res["DisplayName"] = boost::any(*displayName);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (tenantId) {
      res["TenantId"] = boost::any(*tenantId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("AgentId") != m.end() && !m["AgentId"].empty()) {
      agentId = make_shared<long>(boost::any_cast<long>(m["AgentId"]));
    }
    if (m.find("DisplayName") != m.end() && !m["DisplayName"].empty()) {
      displayName = make_shared<string>(boost::any_cast<string>(m["DisplayName"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("TenantId") != m.end() && !m["TenantId"].empty()) {
      tenantId = make_shared<long>(boost::any_cast<long>(m["TenantId"]));
    }
  }


  virtual ~ListAgentBySkillGroupIdResponseBodyData() = default;
};
class ListAgentBySkillGroupIdResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<ListAgentBySkillGroupIdResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ListAgentBySkillGroupIdResponseBody() {}

  explicit ListAgentBySkillGroupIdResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<ListAgentBySkillGroupIdResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListAgentBySkillGroupIdResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<ListAgentBySkillGroupIdResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListAgentBySkillGroupIdResponseBody() = default;
};
class ListAgentBySkillGroupIdResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListAgentBySkillGroupIdResponseBody> body{};

  ListAgentBySkillGroupIdResponse() {}

  explicit ListAgentBySkillGroupIdResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListAgentBySkillGroupIdResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListAgentBySkillGroupIdResponseBody>(model1);
      }
    }
  }


  virtual ~ListAgentBySkillGroupIdResponse() = default;
};
class ListAiccsRobotRequest : public Darabonba::Model {
public:
  shared_ptr<long> ownerId{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> robotName{};

  ListAiccsRobotRequest() {}

  explicit ListAiccsRobotRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (robotName) {
      res["RobotName"] = boost::any(*robotName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("RobotName") != m.end() && !m["RobotName"].empty()) {
      robotName = make_shared<string>(boost::any_cast<string>(m["RobotName"]));
    }
  }


  virtual ~ListAiccsRobotRequest() = default;
};
class ListAiccsRobotResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> atProfession{};
  shared_ptr<string> atSence{};
  shared_ptr<long> id{};
  shared_ptr<string> robotName{};
  shared_ptr<string> robotType{};

  ListAiccsRobotResponseBodyData() {}

  explicit ListAiccsRobotResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (atProfession) {
      res["AtProfession"] = boost::any(*atProfession);
    }
    if (atSence) {
      res["AtSence"] = boost::any(*atSence);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (robotName) {
      res["RobotName"] = boost::any(*robotName);
    }
    if (robotType) {
      res["RobotType"] = boost::any(*robotType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AtProfession") != m.end() && !m["AtProfession"].empty()) {
      atProfession = make_shared<string>(boost::any_cast<string>(m["AtProfession"]));
    }
    if (m.find("AtSence") != m.end() && !m["AtSence"].empty()) {
      atSence = make_shared<string>(boost::any_cast<string>(m["AtSence"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("RobotName") != m.end() && !m["RobotName"].empty()) {
      robotName = make_shared<string>(boost::any_cast<string>(m["RobotName"]));
    }
    if (m.find("RobotType") != m.end() && !m["RobotType"].empty()) {
      robotType = make_shared<string>(boost::any_cast<string>(m["RobotType"]));
    }
  }


  virtual ~ListAiccsRobotResponseBodyData() = default;
};
class ListAiccsRobotResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<ListAiccsRobotResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ListAiccsRobotResponseBody() {}

  explicit ListAiccsRobotResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<ListAiccsRobotResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListAiccsRobotResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<ListAiccsRobotResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListAiccsRobotResponseBody() = default;
};
class ListAiccsRobotResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListAiccsRobotResponseBody> body{};

  ListAiccsRobotResponse() {}

  explicit ListAiccsRobotResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListAiccsRobotResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListAiccsRobotResponseBody>(model1);
      }
    }
  }


  virtual ~ListAiccsRobotResponse() = default;
};
class ListAvailableTtsRequest : public Darabonba::Model {
public:
  shared_ptr<long> ownerId{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> ttsVoiceCode{};

  ListAvailableTtsRequest() {}

  explicit ListAvailableTtsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (ttsVoiceCode) {
      res["TtsVoiceCode"] = boost::any(*ttsVoiceCode);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("TtsVoiceCode") != m.end() && !m["TtsVoiceCode"].empty()) {
      ttsVoiceCode = make_shared<string>(boost::any_cast<string>(m["TtsVoiceCode"]));
    }
  }


  virtual ~ListAvailableTtsRequest() = default;
};
class ListAvailableTtsResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> ttsAuditionFileUrl{};
  shared_ptr<string> ttsEngine{};
  shared_ptr<string> ttsStyle{};
  shared_ptr<string> ttsVoiceCode{};
  shared_ptr<string> ttsVoiceName{};

  ListAvailableTtsResponseBodyData() {}

  explicit ListAvailableTtsResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ttsAuditionFileUrl) {
      res["TtsAuditionFileUrl"] = boost::any(*ttsAuditionFileUrl);
    }
    if (ttsEngine) {
      res["TtsEngine"] = boost::any(*ttsEngine);
    }
    if (ttsStyle) {
      res["TtsStyle"] = boost::any(*ttsStyle);
    }
    if (ttsVoiceCode) {
      res["TtsVoiceCode"] = boost::any(*ttsVoiceCode);
    }
    if (ttsVoiceName) {
      res["TtsVoiceName"] = boost::any(*ttsVoiceName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("TtsAuditionFileUrl") != m.end() && !m["TtsAuditionFileUrl"].empty()) {
      ttsAuditionFileUrl = make_shared<string>(boost::any_cast<string>(m["TtsAuditionFileUrl"]));
    }
    if (m.find("TtsEngine") != m.end() && !m["TtsEngine"].empty()) {
      ttsEngine = make_shared<string>(boost::any_cast<string>(m["TtsEngine"]));
    }
    if (m.find("TtsStyle") != m.end() && !m["TtsStyle"].empty()) {
      ttsStyle = make_shared<string>(boost::any_cast<string>(m["TtsStyle"]));
    }
    if (m.find("TtsVoiceCode") != m.end() && !m["TtsVoiceCode"].empty()) {
      ttsVoiceCode = make_shared<string>(boost::any_cast<string>(m["TtsVoiceCode"]));
    }
    if (m.find("TtsVoiceName") != m.end() && !m["TtsVoiceName"].empty()) {
      ttsVoiceName = make_shared<string>(boost::any_cast<string>(m["TtsVoiceName"]));
    }
  }


  virtual ~ListAvailableTtsResponseBodyData() = default;
};
class ListAvailableTtsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> accessDeniedDetail{};
  shared_ptr<string> code{};
  shared_ptr<vector<ListAvailableTtsResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ListAvailableTtsResponseBody() {}

  explicit ListAvailableTtsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accessDeniedDetail) {
      res["AccessDeniedDetail"] = boost::any(*accessDeniedDetail);
    }
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccessDeniedDetail") != m.end() && !m["AccessDeniedDetail"].empty()) {
      accessDeniedDetail = make_shared<string>(boost::any_cast<string>(m["AccessDeniedDetail"]));
    }
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<ListAvailableTtsResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListAvailableTtsResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<ListAvailableTtsResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListAvailableTtsResponseBody() = default;
};
class ListAvailableTtsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListAvailableTtsResponseBody> body{};

  ListAvailableTtsResponse() {}

  explicit ListAvailableTtsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListAvailableTtsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListAvailableTtsResponseBody>(model1);
      }
    }
  }


  virtual ~ListAvailableTtsResponse() = default;
};
class ListChatRecordDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> clientToken{};
  shared_ptr<long> closeTimeEnd{};
  shared_ptr<long> closeTimeStart{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};

  ListChatRecordDetailRequest() {}

  explicit ListChatRecordDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (closeTimeEnd) {
      res["CloseTimeEnd"] = boost::any(*closeTimeEnd);
    }
    if (closeTimeStart) {
      res["CloseTimeStart"] = boost::any(*closeTimeStart);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("CloseTimeEnd") != m.end() && !m["CloseTimeEnd"].empty()) {
      closeTimeEnd = make_shared<long>(boost::any_cast<long>(m["CloseTimeEnd"]));
    }
    if (m.find("CloseTimeStart") != m.end() && !m["CloseTimeStart"].empty()) {
      closeTimeStart = make_shared<long>(boost::any_cast<long>(m["CloseTimeStart"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
  }


  virtual ~ListChatRecordDetailRequest() = default;
};
class ListChatRecordDetailResponseBodyResultDataDataMessageList : public Darabonba::Model {
public:
  shared_ptr<string> content{};
  shared_ptr<long> createTime{};
  shared_ptr<string> msgType{};
  shared_ptr<string> senderName{};
  shared_ptr<long> senderType{};

  ListChatRecordDetailResponseBodyResultDataDataMessageList() {}

  explicit ListChatRecordDetailResponseBodyResultDataDataMessageList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (content) {
      res["Content"] = boost::any(*content);
    }
    if (createTime) {
      res["CreateTime"] = boost::any(*createTime);
    }
    if (msgType) {
      res["MsgType"] = boost::any(*msgType);
    }
    if (senderName) {
      res["SenderName"] = boost::any(*senderName);
    }
    if (senderType) {
      res["SenderType"] = boost::any(*senderType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Content") != m.end() && !m["Content"].empty()) {
      content = make_shared<string>(boost::any_cast<string>(m["Content"]));
    }
    if (m.find("CreateTime") != m.end() && !m["CreateTime"].empty()) {
      createTime = make_shared<long>(boost::any_cast<long>(m["CreateTime"]));
    }
    if (m.find("MsgType") != m.end() && !m["MsgType"].empty()) {
      msgType = make_shared<string>(boost::any_cast<string>(m["MsgType"]));
    }
    if (m.find("SenderName") != m.end() && !m["SenderName"].empty()) {
      senderName = make_shared<string>(boost::any_cast<string>(m["SenderName"]));
    }
    if (m.find("SenderType") != m.end() && !m["SenderType"].empty()) {
      senderType = make_shared<long>(boost::any_cast<long>(m["SenderType"]));
    }
  }


  virtual ~ListChatRecordDetailResponseBodyResultDataDataMessageList() = default;
};
class ListChatRecordDetailResponseBodyResultDataData : public Darabonba::Model {
public:
  shared_ptr<long> endTime{};
  shared_ptr<vector<ListChatRecordDetailResponseBodyResultDataDataMessageList>> messageList{};
  shared_ptr<string> servicerName{};
  shared_ptr<long> startTime{};

  ListChatRecordDetailResponseBodyResultDataData() {}

  explicit ListChatRecordDetailResponseBodyResultDataData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (messageList) {
      vector<boost::any> temp1;
      for(auto item1:*messageList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["MessageList"] = boost::any(temp1);
    }
    if (servicerName) {
      res["ServicerName"] = boost::any(*servicerName);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<long>(boost::any_cast<long>(m["EndTime"]));
    }
    if (m.find("MessageList") != m.end() && !m["MessageList"].empty()) {
      if (typeid(vector<boost::any>) == m["MessageList"].type()) {
        vector<ListChatRecordDetailResponseBodyResultDataDataMessageList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["MessageList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListChatRecordDetailResponseBodyResultDataDataMessageList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        messageList = make_shared<vector<ListChatRecordDetailResponseBodyResultDataDataMessageList>>(expect1);
      }
    }
    if (m.find("ServicerName") != m.end() && !m["ServicerName"].empty()) {
      servicerName = make_shared<string>(boost::any_cast<string>(m["ServicerName"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<long>(boost::any_cast<long>(m["StartTime"]));
    }
  }


  virtual ~ListChatRecordDetailResponseBodyResultDataData() = default;
};
class ListChatRecordDetailResponseBodyResultData : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<ListChatRecordDetailResponseBodyResultDataData>> data{};
  shared_ptr<long> onePageSize{};
  shared_ptr<long> totalPage{};
  shared_ptr<long> totalResults{};

  ListChatRecordDetailResponseBodyResultData() {}

  explicit ListChatRecordDetailResponseBodyResultData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (onePageSize) {
      res["OnePageSize"] = boost::any(*onePageSize);
    }
    if (totalPage) {
      res["TotalPage"] = boost::any(*totalPage);
    }
    if (totalResults) {
      res["TotalResults"] = boost::any(*totalResults);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<ListChatRecordDetailResponseBodyResultDataData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListChatRecordDetailResponseBodyResultDataData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<ListChatRecordDetailResponseBodyResultDataData>>(expect1);
      }
    }
    if (m.find("OnePageSize") != m.end() && !m["OnePageSize"].empty()) {
      onePageSize = make_shared<long>(boost::any_cast<long>(m["OnePageSize"]));
    }
    if (m.find("TotalPage") != m.end() && !m["TotalPage"].empty()) {
      totalPage = make_shared<long>(boost::any_cast<long>(m["TotalPage"]));
    }
    if (m.find("TotalResults") != m.end() && !m["TotalResults"].empty()) {
      totalResults = make_shared<long>(boost::any_cast<long>(m["TotalResults"]));
    }
  }


  virtual ~ListChatRecordDetailResponseBodyResultData() = default;
};
class ListChatRecordDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<ListChatRecordDetailResponseBodyResultData> resultData{};
  shared_ptr<bool> success{};

  ListChatRecordDetailResponseBody() {}

  explicit ListChatRecordDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (resultData) {
      res["ResultData"] = resultData ? boost::any(resultData->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("ResultData") != m.end() && !m["ResultData"].empty()) {
      if (typeid(map<string, boost::any>) == m["ResultData"].type()) {
        ListChatRecordDetailResponseBodyResultData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["ResultData"]));
        resultData = make_shared<ListChatRecordDetailResponseBodyResultData>(model1);
      }
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListChatRecordDetailResponseBody() = default;
};
class ListChatRecordDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListChatRecordDetailResponseBody> body{};

  ListChatRecordDetailResponse() {}

  explicit ListChatRecordDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListChatRecordDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListChatRecordDetailResponseBody>(model1);
      }
    }
  }


  virtual ~ListChatRecordDetailResponse() = default;
};
class ListDialogRequest : public Darabonba::Model {
public:
  shared_ptr<string> called{};
  shared_ptr<long> ownerId{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> taskId{};

  ListDialogRequest() {}

  explicit ListDialogRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (called) {
      res["Called"] = boost::any(*called);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Called") != m.end() && !m["Called"].empty()) {
      called = make_shared<string>(boost::any_cast<string>(m["Called"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~ListDialogRequest() = default;
};
class ListDialogResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> content{};
  shared_ptr<string> nodeType{};
  shared_ptr<string> role{};
  shared_ptr<string> tag{};
  shared_ptr<string> time{};

  ListDialogResponseBodyData() {}

  explicit ListDialogResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (content) {
      res["Content"] = boost::any(*content);
    }
    if (nodeType) {
      res["NodeType"] = boost::any(*nodeType);
    }
    if (role) {
      res["Role"] = boost::any(*role);
    }
    if (tag) {
      res["Tag"] = boost::any(*tag);
    }
    if (time) {
      res["Time"] = boost::any(*time);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Content") != m.end() && !m["Content"].empty()) {
      content = make_shared<string>(boost::any_cast<string>(m["Content"]));
    }
    if (m.find("NodeType") != m.end() && !m["NodeType"].empty()) {
      nodeType = make_shared<string>(boost::any_cast<string>(m["NodeType"]));
    }
    if (m.find("Role") != m.end() && !m["Role"].empty()) {
      role = make_shared<string>(boost::any_cast<string>(m["Role"]));
    }
    if (m.find("Tag") != m.end() && !m["Tag"].empty()) {
      tag = make_shared<string>(boost::any_cast<string>(m["Tag"]));
    }
    if (m.find("Time") != m.end() && !m["Time"].empty()) {
      time = make_shared<string>(boost::any_cast<string>(m["Time"]));
    }
  }


  virtual ~ListDialogResponseBodyData() = default;
};
class ListDialogResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<ListDialogResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ListDialogResponseBody() {}

  explicit ListDialogResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<ListDialogResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListDialogResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<ListDialogResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListDialogResponseBody() = default;
};
class ListDialogResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListDialogResponseBody> body{};

  ListDialogResponse() {}

  explicit ListDialogResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListDialogResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListDialogResponseBody>(model1);
      }
    }
  }


  virtual ~ListDialogResponse() = default;
};
class ListHotlineRecordRequest : public Darabonba::Model {
public:
  shared_ptr<string> callId{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  ListHotlineRecordRequest() {}

  explicit ListHotlineRecordRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~ListHotlineRecordRequest() = default;
};
class ListHotlineRecordResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> callId{};
  shared_ptr<string> connectionId{};
  shared_ptr<long> endTime{};
  shared_ptr<long> startTime{};
  shared_ptr<string> url{};

  ListHotlineRecordResponseBodyData() {}

  explicit ListHotlineRecordResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (connectionId) {
      res["ConnectionId"] = boost::any(*connectionId);
    }
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    if (url) {
      res["Url"] = boost::any(*url);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("ConnectionId") != m.end() && !m["ConnectionId"].empty()) {
      connectionId = make_shared<string>(boost::any_cast<string>(m["ConnectionId"]));
    }
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<long>(boost::any_cast<long>(m["EndTime"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<long>(boost::any_cast<long>(m["StartTime"]));
    }
    if (m.find("Url") != m.end() && !m["Url"].empty()) {
      url = make_shared<string>(boost::any_cast<string>(m["Url"]));
    }
  }


  virtual ~ListHotlineRecordResponseBodyData() = default;
};
class ListHotlineRecordResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<ListHotlineRecordResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ListHotlineRecordResponseBody() {}

  explicit ListHotlineRecordResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<ListHotlineRecordResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListHotlineRecordResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<ListHotlineRecordResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListHotlineRecordResponseBody() = default;
};
class ListHotlineRecordResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListHotlineRecordResponseBody> body{};

  ListHotlineRecordResponse() {}

  explicit ListHotlineRecordResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListHotlineRecordResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListHotlineRecordResponseBody>(model1);
      }
    }
  }


  virtual ~ListHotlineRecordResponse() = default;
};
class ListHotlineRecordDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> clientToken{};
  shared_ptr<long> closeTimeEnd{};
  shared_ptr<long> closeTimeStart{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};

  ListHotlineRecordDetailRequest() {}

  explicit ListHotlineRecordDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (closeTimeEnd) {
      res["CloseTimeEnd"] = boost::any(*closeTimeEnd);
    }
    if (closeTimeStart) {
      res["CloseTimeStart"] = boost::any(*closeTimeStart);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("CloseTimeEnd") != m.end() && !m["CloseTimeEnd"].empty()) {
      closeTimeEnd = make_shared<long>(boost::any_cast<long>(m["CloseTimeEnd"]));
    }
    if (m.find("CloseTimeStart") != m.end() && !m["CloseTimeStart"].empty()) {
      closeTimeStart = make_shared<long>(boost::any_cast<long>(m["CloseTimeStart"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
  }


  virtual ~ListHotlineRecordDetailRequest() = default;
};
class ListHotlineRecordDetailResponseBodyResultDataData : public Darabonba::Model {
public:
  shared_ptr<long> endTime{};
  shared_ptr<string> ossUrl{};
  shared_ptr<string> servicerName{};
  shared_ptr<long> startTime{};

  ListHotlineRecordDetailResponseBodyResultDataData() {}

  explicit ListHotlineRecordDetailResponseBodyResultDataData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (ossUrl) {
      res["OssUrl"] = boost::any(*ossUrl);
    }
    if (servicerName) {
      res["ServicerName"] = boost::any(*servicerName);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<long>(boost::any_cast<long>(m["EndTime"]));
    }
    if (m.find("OssUrl") != m.end() && !m["OssUrl"].empty()) {
      ossUrl = make_shared<string>(boost::any_cast<string>(m["OssUrl"]));
    }
    if (m.find("ServicerName") != m.end() && !m["ServicerName"].empty()) {
      servicerName = make_shared<string>(boost::any_cast<string>(m["ServicerName"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<long>(boost::any_cast<long>(m["StartTime"]));
    }
  }


  virtual ~ListHotlineRecordDetailResponseBodyResultDataData() = default;
};
class ListHotlineRecordDetailResponseBodyResultData : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<ListHotlineRecordDetailResponseBodyResultDataData>> data{};
  shared_ptr<long> onePageSize{};
  shared_ptr<long> totalPage{};
  shared_ptr<long> totalResults{};

  ListHotlineRecordDetailResponseBodyResultData() {}

  explicit ListHotlineRecordDetailResponseBodyResultData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (onePageSize) {
      res["OnePageSize"] = boost::any(*onePageSize);
    }
    if (totalPage) {
      res["TotalPage"] = boost::any(*totalPage);
    }
    if (totalResults) {
      res["TotalResults"] = boost::any(*totalResults);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<ListHotlineRecordDetailResponseBodyResultDataData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListHotlineRecordDetailResponseBodyResultDataData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<ListHotlineRecordDetailResponseBodyResultDataData>>(expect1);
      }
    }
    if (m.find("OnePageSize") != m.end() && !m["OnePageSize"].empty()) {
      onePageSize = make_shared<long>(boost::any_cast<long>(m["OnePageSize"]));
    }
    if (m.find("TotalPage") != m.end() && !m["TotalPage"].empty()) {
      totalPage = make_shared<long>(boost::any_cast<long>(m["TotalPage"]));
    }
    if (m.find("TotalResults") != m.end() && !m["TotalResults"].empty()) {
      totalResults = make_shared<long>(boost::any_cast<long>(m["TotalResults"]));
    }
  }


  virtual ~ListHotlineRecordDetailResponseBodyResultData() = default;
};
class ListHotlineRecordDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<ListHotlineRecordDetailResponseBodyResultData> resultData{};
  shared_ptr<bool> success{};

  ListHotlineRecordDetailResponseBody() {}

  explicit ListHotlineRecordDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (resultData) {
      res["ResultData"] = resultData ? boost::any(resultData->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("ResultData") != m.end() && !m["ResultData"].empty()) {
      if (typeid(map<string, boost::any>) == m["ResultData"].type()) {
        ListHotlineRecordDetailResponseBodyResultData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["ResultData"]));
        resultData = make_shared<ListHotlineRecordDetailResponseBodyResultData>(model1);
      }
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListHotlineRecordDetailResponseBody() = default;
};
class ListHotlineRecordDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListHotlineRecordDetailResponseBody> body{};

  ListHotlineRecordDetailResponse() {}

  explicit ListHotlineRecordDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListHotlineRecordDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListHotlineRecordDetailResponseBody>(model1);
      }
    }
  }


  virtual ~ListHotlineRecordDetailResponse() = default;
};
class ListOutboundPhoneNumberRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  ListOutboundPhoneNumberRequest() {}

  explicit ListOutboundPhoneNumberRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~ListOutboundPhoneNumberRequest() = default;
};
class ListOutboundPhoneNumberResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<string>> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ListOutboundPhoneNumberResponseBody() {}

  explicit ListOutboundPhoneNumberResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["Data"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      data = make_shared<vector<string>>(toVec1);
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListOutboundPhoneNumberResponseBody() = default;
};
class ListOutboundPhoneNumberResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListOutboundPhoneNumberResponseBody> body{};

  ListOutboundPhoneNumberResponse() {}

  explicit ListOutboundPhoneNumberResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListOutboundPhoneNumberResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListOutboundPhoneNumberResponseBody>(model1);
      }
    }
  }


  virtual ~ListOutboundPhoneNumberResponse() = default;
};
class ListRobotCallDialogRequest : public Darabonba::Model {
public:
  shared_ptr<string> callId{};
  shared_ptr<string> createTime{};
  shared_ptr<long> ownerId{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};

  ListRobotCallDialogRequest() {}

  explicit ListRobotCallDialogRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (createTime) {
      res["CreateTime"] = boost::any(*createTime);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("CreateTime") != m.end() && !m["CreateTime"].empty()) {
      createTime = make_shared<string>(boost::any_cast<string>(m["CreateTime"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
  }


  virtual ~ListRobotCallDialogRequest() = default;
};
class ListRobotCallDialogResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> content{};
  shared_ptr<string> nodeType{};
  shared_ptr<string> role{};
  shared_ptr<string> tag{};
  shared_ptr<string> time{};

  ListRobotCallDialogResponseBodyData() {}

  explicit ListRobotCallDialogResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (content) {
      res["Content"] = boost::any(*content);
    }
    if (nodeType) {
      res["NodeType"] = boost::any(*nodeType);
    }
    if (role) {
      res["Role"] = boost::any(*role);
    }
    if (tag) {
      res["Tag"] = boost::any(*tag);
    }
    if (time) {
      res["Time"] = boost::any(*time);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Content") != m.end() && !m["Content"].empty()) {
      content = make_shared<string>(boost::any_cast<string>(m["Content"]));
    }
    if (m.find("NodeType") != m.end() && !m["NodeType"].empty()) {
      nodeType = make_shared<string>(boost::any_cast<string>(m["NodeType"]));
    }
    if (m.find("Role") != m.end() && !m["Role"].empty()) {
      role = make_shared<string>(boost::any_cast<string>(m["Role"]));
    }
    if (m.find("Tag") != m.end() && !m["Tag"].empty()) {
      tag = make_shared<string>(boost::any_cast<string>(m["Tag"]));
    }
    if (m.find("Time") != m.end() && !m["Time"].empty()) {
      time = make_shared<string>(boost::any_cast<string>(m["Time"]));
    }
  }


  virtual ~ListRobotCallDialogResponseBodyData() = default;
};
class ListRobotCallDialogResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<ListRobotCallDialogResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ListRobotCallDialogResponseBody() {}

  explicit ListRobotCallDialogResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<ListRobotCallDialogResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListRobotCallDialogResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<ListRobotCallDialogResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListRobotCallDialogResponseBody() = default;
};
class ListRobotCallDialogResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListRobotCallDialogResponseBody> body{};

  ListRobotCallDialogResponse() {}

  explicit ListRobotCallDialogResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListRobotCallDialogResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListRobotCallDialogResponseBody>(model1);
      }
    }
  }


  virtual ~ListRobotCallDialogResponse() = default;
};
class ListRobotNodeRequest : public Darabonba::Model {
public:
  shared_ptr<long> ownerId{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> robotId{};

  ListRobotNodeRequest() {}

  explicit ListRobotNodeRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (robotId) {
      res["RobotId"] = boost::any(*robotId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("RobotId") != m.end() && !m["RobotId"].empty()) {
      robotId = make_shared<long>(boost::any_cast<long>(m["RobotId"]));
    }
  }


  virtual ~ListRobotNodeRequest() = default;
};
class ListRobotNodeResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> isOutput{};
  shared_ptr<string> modelName{};
  shared_ptr<string> nodeIdentifier{};
  shared_ptr<string> nodeName{};
  shared_ptr<string> processName{};

  ListRobotNodeResponseBodyData() {}

  explicit ListRobotNodeResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (isOutput) {
      res["IsOutput"] = boost::any(*isOutput);
    }
    if (modelName) {
      res["ModelName"] = boost::any(*modelName);
    }
    if (nodeIdentifier) {
      res["NodeIdentifier"] = boost::any(*nodeIdentifier);
    }
    if (nodeName) {
      res["NodeName"] = boost::any(*nodeName);
    }
    if (processName) {
      res["ProcessName"] = boost::any(*processName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("IsOutput") != m.end() && !m["IsOutput"].empty()) {
      isOutput = make_shared<long>(boost::any_cast<long>(m["IsOutput"]));
    }
    if (m.find("ModelName") != m.end() && !m["ModelName"].empty()) {
      modelName = make_shared<string>(boost::any_cast<string>(m["ModelName"]));
    }
    if (m.find("NodeIdentifier") != m.end() && !m["NodeIdentifier"].empty()) {
      nodeIdentifier = make_shared<string>(boost::any_cast<string>(m["NodeIdentifier"]));
    }
    if (m.find("NodeName") != m.end() && !m["NodeName"].empty()) {
      nodeName = make_shared<string>(boost::any_cast<string>(m["NodeName"]));
    }
    if (m.find("ProcessName") != m.end() && !m["ProcessName"].empty()) {
      processName = make_shared<string>(boost::any_cast<string>(m["ProcessName"]));
    }
  }


  virtual ~ListRobotNodeResponseBodyData() = default;
};
class ListRobotNodeResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<ListRobotNodeResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ListRobotNodeResponseBody() {}

  explicit ListRobotNodeResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<ListRobotNodeResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListRobotNodeResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<ListRobotNodeResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListRobotNodeResponseBody() = default;
};
class ListRobotNodeResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListRobotNodeResponseBody> body{};

  ListRobotNodeResponse() {}

  explicit ListRobotNodeResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListRobotNodeResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListRobotNodeResponseBody>(model1);
      }
    }
  }


  virtual ~ListRobotNodeResponse() = default;
};
class ListRobotParamsRequest : public Darabonba::Model {
public:
  shared_ptr<long> ownerId{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> robotId{};

  ListRobotParamsRequest() {}

  explicit ListRobotParamsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (robotId) {
      res["RobotId"] = boost::any(*robotId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("RobotId") != m.end() && !m["RobotId"].empty()) {
      robotId = make_shared<long>(boost::any_cast<long>(m["RobotId"]));
    }
  }


  virtual ~ListRobotParamsRequest() = default;
};
class ListRobotParamsResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> isEmpty{};
  shared_ptr<string> paramCode{};
  shared_ptr<string> paramName{};

  ListRobotParamsResponseBodyData() {}

  explicit ListRobotParamsResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (isEmpty) {
      res["IsEmpty"] = boost::any(*isEmpty);
    }
    if (paramCode) {
      res["ParamCode"] = boost::any(*paramCode);
    }
    if (paramName) {
      res["ParamName"] = boost::any(*paramName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("IsEmpty") != m.end() && !m["IsEmpty"].empty()) {
      isEmpty = make_shared<long>(boost::any_cast<long>(m["IsEmpty"]));
    }
    if (m.find("ParamCode") != m.end() && !m["ParamCode"].empty()) {
      paramCode = make_shared<string>(boost::any_cast<string>(m["ParamCode"]));
    }
    if (m.find("ParamName") != m.end() && !m["ParamName"].empty()) {
      paramName = make_shared<string>(boost::any_cast<string>(m["ParamName"]));
    }
  }


  virtual ~ListRobotParamsResponseBodyData() = default;
};
class ListRobotParamsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<ListRobotParamsResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ListRobotParamsResponseBody() {}

  explicit ListRobotParamsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<ListRobotParamsResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListRobotParamsResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<ListRobotParamsResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListRobotParamsResponseBody() = default;
};
class ListRobotParamsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListRobotParamsResponseBody> body{};

  ListRobotParamsResponse() {}

  explicit ListRobotParamsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListRobotParamsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListRobotParamsResponseBody>(model1);
      }
    }
  }


  virtual ~ListRobotParamsResponse() = default;
};
class ListRolesRequest : public Darabonba::Model {
public:
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  ListRolesRequest() {}

  explicit ListRolesRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~ListRolesRequest() = default;
};
class ListRolesResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> buId{};
  shared_ptr<string> code{};
  shared_ptr<string> createTime{};
  shared_ptr<string> description{};
  shared_ptr<long> roleGroupId{};
  shared_ptr<string> roleGroupName{};
  shared_ptr<long> roleId{};
  shared_ptr<string> title{};

  ListRolesResponseBodyData() {}

  explicit ListRolesResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (buId) {
      res["BuId"] = boost::any(*buId);
    }
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (createTime) {
      res["CreateTime"] = boost::any(*createTime);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (roleGroupId) {
      res["RoleGroupId"] = boost::any(*roleGroupId);
    }
    if (roleGroupName) {
      res["RoleGroupName"] = boost::any(*roleGroupName);
    }
    if (roleId) {
      res["RoleId"] = boost::any(*roleId);
    }
    if (title) {
      res["Title"] = boost::any(*title);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BuId") != m.end() && !m["BuId"].empty()) {
      buId = make_shared<long>(boost::any_cast<long>(m["BuId"]));
    }
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("CreateTime") != m.end() && !m["CreateTime"].empty()) {
      createTime = make_shared<string>(boost::any_cast<string>(m["CreateTime"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("RoleGroupId") != m.end() && !m["RoleGroupId"].empty()) {
      roleGroupId = make_shared<long>(boost::any_cast<long>(m["RoleGroupId"]));
    }
    if (m.find("RoleGroupName") != m.end() && !m["RoleGroupName"].empty()) {
      roleGroupName = make_shared<string>(boost::any_cast<string>(m["RoleGroupName"]));
    }
    if (m.find("RoleId") != m.end() && !m["RoleId"].empty()) {
      roleId = make_shared<long>(boost::any_cast<long>(m["RoleId"]));
    }
    if (m.find("Title") != m.end() && !m["Title"].empty()) {
      title = make_shared<string>(boost::any_cast<string>(m["Title"]));
    }
  }


  virtual ~ListRolesResponseBodyData() = default;
};
class ListRolesResponseBody : public Darabonba::Model {
public:
  shared_ptr<vector<ListRolesResponseBodyData>> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ListRolesResponseBody() {}

  explicit ListRolesResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<ListRolesResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListRolesResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<ListRolesResponseBodyData>>(expect1);
      }
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListRolesResponseBody() = default;
};
class ListRolesResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListRolesResponseBody> body{};

  ListRolesResponse() {}

  explicit ListRolesResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListRolesResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListRolesResponseBody>(model1);
      }
    }
  }


  virtual ~ListRolesResponse() = default;
};
class ListSkillGroupRequest : public Darabonba::Model {
public:
  shared_ptr<long> channelType{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  ListSkillGroupRequest() {}

  explicit ListSkillGroupRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (channelType) {
      res["ChannelType"] = boost::any(*channelType);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ChannelType") != m.end() && !m["ChannelType"].empty()) {
      channelType = make_shared<long>(boost::any_cast<long>(m["ChannelType"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~ListSkillGroupRequest() = default;
};
class ListSkillGroupResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> channelType{};
  shared_ptr<string> description{};
  shared_ptr<string> displayName{};
  shared_ptr<string> name{};
  shared_ptr<long> skillGroupId{};

  ListSkillGroupResponseBodyData() {}

  explicit ListSkillGroupResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (channelType) {
      res["ChannelType"] = boost::any(*channelType);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (displayName) {
      res["DisplayName"] = boost::any(*displayName);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (skillGroupId) {
      res["SkillGroupId"] = boost::any(*skillGroupId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ChannelType") != m.end() && !m["ChannelType"].empty()) {
      channelType = make_shared<long>(boost::any_cast<long>(m["ChannelType"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("DisplayName") != m.end() && !m["DisplayName"].empty()) {
      displayName = make_shared<string>(boost::any_cast<string>(m["DisplayName"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("SkillGroupId") != m.end() && !m["SkillGroupId"].empty()) {
      skillGroupId = make_shared<long>(boost::any_cast<long>(m["SkillGroupId"]));
    }
  }


  virtual ~ListSkillGroupResponseBodyData() = default;
};
class ListSkillGroupResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<vector<ListSkillGroupResponseBodyData>> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ListSkillGroupResponseBody() {}

  explicit ListSkillGroupResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<ListSkillGroupResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListSkillGroupResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<ListSkillGroupResponseBodyData>>(expect1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListSkillGroupResponseBody() = default;
};
class ListSkillGroupResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListSkillGroupResponseBody> body{};

  ListSkillGroupResponse() {}

  explicit ListSkillGroupResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListSkillGroupResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListSkillGroupResponseBody>(model1);
      }
    }
  }


  virtual ~ListSkillGroupResponse() = default;
};
class ListTaskRequest : public Darabonba::Model {
public:
  shared_ptr<long> ownerId{};
  shared_ptr<long> pageNo{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> robotName{};
  shared_ptr<string> status{};
  shared_ptr<long> taskId{};
  shared_ptr<string> taskName{};

  ListTaskRequest() {}

  explicit ListTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (pageNo) {
      res["PageNo"] = boost::any(*pageNo);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (robotName) {
      res["RobotName"] = boost::any(*robotName);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    if (taskName) {
      res["TaskName"] = boost::any(*taskName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("PageNo") != m.end() && !m["PageNo"].empty()) {
      pageNo = make_shared<long>(boost::any_cast<long>(m["PageNo"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("RobotName") != m.end() && !m["RobotName"].empty()) {
      robotName = make_shared<string>(boost::any_cast<string>(m["RobotName"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
    if (m.find("TaskName") != m.end() && !m["TaskName"].empty()) {
      taskName = make_shared<string>(boost::any_cast<string>(m["TaskName"]));
    }
  }


  virtual ~ListTaskRequest() = default;
};
class ListTaskResponseBodyDataRecord : public Darabonba::Model {
public:
  shared_ptr<long> completeCount{};
  shared_ptr<string> fireTime{};
  shared_ptr<string> gmtCreate{};
  shared_ptr<long> id{};
  shared_ptr<long> robotId{};
  shared_ptr<string> robotName{};
  shared_ptr<string> status{};
  shared_ptr<string> taskName{};
  shared_ptr<long> totalCount{};

  ListTaskResponseBodyDataRecord() {}

  explicit ListTaskResponseBodyDataRecord(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (completeCount) {
      res["CompleteCount"] = boost::any(*completeCount);
    }
    if (fireTime) {
      res["FireTime"] = boost::any(*fireTime);
    }
    if (gmtCreate) {
      res["GmtCreate"] = boost::any(*gmtCreate);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (robotId) {
      res["RobotId"] = boost::any(*robotId);
    }
    if (robotName) {
      res["RobotName"] = boost::any(*robotName);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (taskName) {
      res["TaskName"] = boost::any(*taskName);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CompleteCount") != m.end() && !m["CompleteCount"].empty()) {
      completeCount = make_shared<long>(boost::any_cast<long>(m["CompleteCount"]));
    }
    if (m.find("FireTime") != m.end() && !m["FireTime"].empty()) {
      fireTime = make_shared<string>(boost::any_cast<string>(m["FireTime"]));
    }
    if (m.find("GmtCreate") != m.end() && !m["GmtCreate"].empty()) {
      gmtCreate = make_shared<string>(boost::any_cast<string>(m["GmtCreate"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("RobotId") != m.end() && !m["RobotId"].empty()) {
      robotId = make_shared<long>(boost::any_cast<long>(m["RobotId"]));
    }
    if (m.find("RobotName") != m.end() && !m["RobotName"].empty()) {
      robotName = make_shared<string>(boost::any_cast<string>(m["RobotName"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("TaskName") != m.end() && !m["TaskName"].empty()) {
      taskName = make_shared<string>(boost::any_cast<string>(m["TaskName"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~ListTaskResponseBodyDataRecord() = default;
};
class ListTaskResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNo{};
  shared_ptr<long> pageSize{};
  shared_ptr<vector<ListTaskResponseBodyDataRecord>> record{};
  shared_ptr<long> total{};

  ListTaskResponseBodyData() {}

  explicit ListTaskResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNo) {
      res["PageNo"] = boost::any(*pageNo);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (record) {
      vector<boost::any> temp1;
      for(auto item1:*record){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Record"] = boost::any(temp1);
    }
    if (total) {
      res["Total"] = boost::any(*total);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNo") != m.end() && !m["PageNo"].empty()) {
      pageNo = make_shared<long>(boost::any_cast<long>(m["PageNo"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Record") != m.end() && !m["Record"].empty()) {
      if (typeid(vector<boost::any>) == m["Record"].type()) {
        vector<ListTaskResponseBodyDataRecord> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Record"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListTaskResponseBodyDataRecord model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        record = make_shared<vector<ListTaskResponseBodyDataRecord>>(expect1);
      }
    }
    if (m.find("Total") != m.end() && !m["Total"].empty()) {
      total = make_shared<long>(boost::any_cast<long>(m["Total"]));
    }
  }


  virtual ~ListTaskResponseBodyData() = default;
};
class ListTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<ListTaskResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ListTaskResponseBody() {}

  explicit ListTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        ListTaskResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<ListTaskResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListTaskResponseBody() = default;
};
class ListTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListTaskResponseBody> body{};

  ListTaskResponse() {}

  explicit ListTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListTaskResponseBody>(model1);
      }
    }
  }


  virtual ~ListTaskResponse() = default;
};
class ListTaskDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> called{};
  shared_ptr<long> id{};
  shared_ptr<long> ownerId{};
  shared_ptr<long> pageNo{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> status{};
  shared_ptr<string> statusCode{};
  shared_ptr<long> taskId{};

  ListTaskDetailRequest() {}

  explicit ListTaskDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (called) {
      res["Called"] = boost::any(*called);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (pageNo) {
      res["PageNo"] = boost::any(*pageNo);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (statusCode) {
      res["StatusCode"] = boost::any(*statusCode);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Called") != m.end() && !m["Called"].empty()) {
      called = make_shared<string>(boost::any_cast<string>(m["Called"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("PageNo") != m.end() && !m["PageNo"].empty()) {
      pageNo = make_shared<long>(boost::any_cast<long>(m["PageNo"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("StatusCode") != m.end() && !m["StatusCode"].empty()) {
      statusCode = make_shared<string>(boost::any_cast<string>(m["StatusCode"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~ListTaskDetailRequest() = default;
};
class ListTaskDetailResponseBodyDataRecord : public Darabonba::Model {
public:
  shared_ptr<string> called{};
  shared_ptr<string> caller{};
  shared_ptr<string> direction{};
  shared_ptr<long> duration{};
  shared_ptr<string> endTime{};
  shared_ptr<long> id{};
  shared_ptr<long> retryCurTimes{};
  shared_ptr<long> retryTimes{};
  shared_ptr<string> startTime{};
  shared_ptr<string> status{};
  shared_ptr<string> statusCode{};
  shared_ptr<string> statusCodeDesc{};
  shared_ptr<string> tags{};

  ListTaskDetailResponseBodyDataRecord() {}

  explicit ListTaskDetailResponseBodyDataRecord(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (called) {
      res["Called"] = boost::any(*called);
    }
    if (caller) {
      res["Caller"] = boost::any(*caller);
    }
    if (direction) {
      res["Direction"] = boost::any(*direction);
    }
    if (duration) {
      res["Duration"] = boost::any(*duration);
    }
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (retryCurTimes) {
      res["RetryCurTimes"] = boost::any(*retryCurTimes);
    }
    if (retryTimes) {
      res["RetryTimes"] = boost::any(*retryTimes);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (statusCode) {
      res["StatusCode"] = boost::any(*statusCode);
    }
    if (statusCodeDesc) {
      res["StatusCodeDesc"] = boost::any(*statusCodeDesc);
    }
    if (tags) {
      res["Tags"] = boost::any(*tags);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Called") != m.end() && !m["Called"].empty()) {
      called = make_shared<string>(boost::any_cast<string>(m["Called"]));
    }
    if (m.find("Caller") != m.end() && !m["Caller"].empty()) {
      caller = make_shared<string>(boost::any_cast<string>(m["Caller"]));
    }
    if (m.find("Direction") != m.end() && !m["Direction"].empty()) {
      direction = make_shared<string>(boost::any_cast<string>(m["Direction"]));
    }
    if (m.find("Duration") != m.end() && !m["Duration"].empty()) {
      duration = make_shared<long>(boost::any_cast<long>(m["Duration"]));
    }
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<string>(boost::any_cast<string>(m["EndTime"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("RetryCurTimes") != m.end() && !m["RetryCurTimes"].empty()) {
      retryCurTimes = make_shared<long>(boost::any_cast<long>(m["RetryCurTimes"]));
    }
    if (m.find("RetryTimes") != m.end() && !m["RetryTimes"].empty()) {
      retryTimes = make_shared<long>(boost::any_cast<long>(m["RetryTimes"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<string>(boost::any_cast<string>(m["StartTime"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("StatusCode") != m.end() && !m["StatusCode"].empty()) {
      statusCode = make_shared<string>(boost::any_cast<string>(m["StatusCode"]));
    }
    if (m.find("StatusCodeDesc") != m.end() && !m["StatusCodeDesc"].empty()) {
      statusCodeDesc = make_shared<string>(boost::any_cast<string>(m["StatusCodeDesc"]));
    }
    if (m.find("Tags") != m.end() && !m["Tags"].empty()) {
      tags = make_shared<string>(boost::any_cast<string>(m["Tags"]));
    }
  }


  virtual ~ListTaskDetailResponseBodyDataRecord() = default;
};
class ListTaskDetailResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> pageNo{};
  shared_ptr<long> pageSize{};
  shared_ptr<vector<ListTaskDetailResponseBodyDataRecord>> record{};
  shared_ptr<long> total{};

  ListTaskDetailResponseBodyData() {}

  explicit ListTaskDetailResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (pageNo) {
      res["PageNo"] = boost::any(*pageNo);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (record) {
      vector<boost::any> temp1;
      for(auto item1:*record){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Record"] = boost::any(temp1);
    }
    if (total) {
      res["Total"] = boost::any(*total);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("PageNo") != m.end() && !m["PageNo"].empty()) {
      pageNo = make_shared<long>(boost::any_cast<long>(m["PageNo"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("Record") != m.end() && !m["Record"].empty()) {
      if (typeid(vector<boost::any>) == m["Record"].type()) {
        vector<ListTaskDetailResponseBodyDataRecord> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Record"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ListTaskDetailResponseBodyDataRecord model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        record = make_shared<vector<ListTaskDetailResponseBodyDataRecord>>(expect1);
      }
    }
    if (m.find("Total") != m.end() && !m["Total"].empty()) {
      total = make_shared<long>(boost::any_cast<long>(m["Total"]));
    }
  }


  virtual ~ListTaskDetailResponseBodyData() = default;
};
class ListTaskDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<ListTaskDetailResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ListTaskDetailResponseBody() {}

  explicit ListTaskDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        ListTaskDetailResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<ListTaskDetailResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ListTaskDetailResponseBody() = default;
};
class ListTaskDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ListTaskDetailResponseBody> body{};

  ListTaskDetailResponse() {}

  explicit ListTaskDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ListTaskDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ListTaskDetailResponseBody>(model1);
      }
    }
  }


  virtual ~ListTaskDetailResponse() = default;
};
class LlmSmartCallRequest : public Darabonba::Model {
public:
  shared_ptr<string> applicationCode{};
  shared_ptr<map<string, boost::any>> bizParam{};
  shared_ptr<string> calledNumber{};
  shared_ptr<string> callerNumber{};
  shared_ptr<string> extension{};
  shared_ptr<string> outId{};
  shared_ptr<map<string, boost::any>> promptParam{};
  shared_ptr<long> sessionTimeout{};
  shared_ptr<map<string, boost::any>> startWordParam{};
  shared_ptr<long> ttsSpeed{};
  shared_ptr<string> ttsVoiceCode{};
  shared_ptr<long> ttsVolume{};

  LlmSmartCallRequest() {}

  explicit LlmSmartCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (applicationCode) {
      res["ApplicationCode"] = boost::any(*applicationCode);
    }
    if (bizParam) {
      res["BizParam"] = boost::any(*bizParam);
    }
    if (calledNumber) {
      res["CalledNumber"] = boost::any(*calledNumber);
    }
    if (callerNumber) {
      res["CallerNumber"] = boost::any(*callerNumber);
    }
    if (extension) {
      res["Extension"] = boost::any(*extension);
    }
    if (outId) {
      res["OutId"] = boost::any(*outId);
    }
    if (promptParam) {
      res["PromptParam"] = boost::any(*promptParam);
    }
    if (sessionTimeout) {
      res["SessionTimeout"] = boost::any(*sessionTimeout);
    }
    if (startWordParam) {
      res["StartWordParam"] = boost::any(*startWordParam);
    }
    if (ttsSpeed) {
      res["TtsSpeed"] = boost::any(*ttsSpeed);
    }
    if (ttsVoiceCode) {
      res["TtsVoiceCode"] = boost::any(*ttsVoiceCode);
    }
    if (ttsVolume) {
      res["TtsVolume"] = boost::any(*ttsVolume);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ApplicationCode") != m.end() && !m["ApplicationCode"].empty()) {
      applicationCode = make_shared<string>(boost::any_cast<string>(m["ApplicationCode"]));
    }
    if (m.find("BizParam") != m.end() && !m["BizParam"].empty()) {
      map<string, boost::any> map1 = boost::any_cast<map<string, boost::any>>(m["BizParam"]);
      map<string, boost::any> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      bizParam = make_shared<map<string, boost::any>>(toMap1);
    }
    if (m.find("CalledNumber") != m.end() && !m["CalledNumber"].empty()) {
      calledNumber = make_shared<string>(boost::any_cast<string>(m["CalledNumber"]));
    }
    if (m.find("CallerNumber") != m.end() && !m["CallerNumber"].empty()) {
      callerNumber = make_shared<string>(boost::any_cast<string>(m["CallerNumber"]));
    }
    if (m.find("Extension") != m.end() && !m["Extension"].empty()) {
      extension = make_shared<string>(boost::any_cast<string>(m["Extension"]));
    }
    if (m.find("OutId") != m.end() && !m["OutId"].empty()) {
      outId = make_shared<string>(boost::any_cast<string>(m["OutId"]));
    }
    if (m.find("PromptParam") != m.end() && !m["PromptParam"].empty()) {
      map<string, boost::any> map1 = boost::any_cast<map<string, boost::any>>(m["PromptParam"]);
      map<string, boost::any> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      promptParam = make_shared<map<string, boost::any>>(toMap1);
    }
    if (m.find("SessionTimeout") != m.end() && !m["SessionTimeout"].empty()) {
      sessionTimeout = make_shared<long>(boost::any_cast<long>(m["SessionTimeout"]));
    }
    if (m.find("StartWordParam") != m.end() && !m["StartWordParam"].empty()) {
      map<string, boost::any> map1 = boost::any_cast<map<string, boost::any>>(m["StartWordParam"]);
      map<string, boost::any> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      startWordParam = make_shared<map<string, boost::any>>(toMap1);
    }
    if (m.find("TtsSpeed") != m.end() && !m["TtsSpeed"].empty()) {
      ttsSpeed = make_shared<long>(boost::any_cast<long>(m["TtsSpeed"]));
    }
    if (m.find("TtsVoiceCode") != m.end() && !m["TtsVoiceCode"].empty()) {
      ttsVoiceCode = make_shared<string>(boost::any_cast<string>(m["TtsVoiceCode"]));
    }
    if (m.find("TtsVolume") != m.end() && !m["TtsVolume"].empty()) {
      ttsVolume = make_shared<long>(boost::any_cast<long>(m["TtsVolume"]));
    }
  }


  virtual ~LlmSmartCallRequest() = default;
};
class LlmSmartCallShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> applicationCode{};
  shared_ptr<string> bizParamShrink{};
  shared_ptr<string> calledNumber{};
  shared_ptr<string> callerNumber{};
  shared_ptr<string> extension{};
  shared_ptr<string> outId{};
  shared_ptr<string> promptParamShrink{};
  shared_ptr<long> sessionTimeout{};
  shared_ptr<string> startWordParamShrink{};
  shared_ptr<long> ttsSpeed{};
  shared_ptr<string> ttsVoiceCode{};
  shared_ptr<long> ttsVolume{};

  LlmSmartCallShrinkRequest() {}

  explicit LlmSmartCallShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (applicationCode) {
      res["ApplicationCode"] = boost::any(*applicationCode);
    }
    if (bizParamShrink) {
      res["BizParam"] = boost::any(*bizParamShrink);
    }
    if (calledNumber) {
      res["CalledNumber"] = boost::any(*calledNumber);
    }
    if (callerNumber) {
      res["CallerNumber"] = boost::any(*callerNumber);
    }
    if (extension) {
      res["Extension"] = boost::any(*extension);
    }
    if (outId) {
      res["OutId"] = boost::any(*outId);
    }
    if (promptParamShrink) {
      res["PromptParam"] = boost::any(*promptParamShrink);
    }
    if (sessionTimeout) {
      res["SessionTimeout"] = boost::any(*sessionTimeout);
    }
    if (startWordParamShrink) {
      res["StartWordParam"] = boost::any(*startWordParamShrink);
    }
    if (ttsSpeed) {
      res["TtsSpeed"] = boost::any(*ttsSpeed);
    }
    if (ttsVoiceCode) {
      res["TtsVoiceCode"] = boost::any(*ttsVoiceCode);
    }
    if (ttsVolume) {
      res["TtsVolume"] = boost::any(*ttsVolume);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ApplicationCode") != m.end() && !m["ApplicationCode"].empty()) {
      applicationCode = make_shared<string>(boost::any_cast<string>(m["ApplicationCode"]));
    }
    if (m.find("BizParam") != m.end() && !m["BizParam"].empty()) {
      bizParamShrink = make_shared<string>(boost::any_cast<string>(m["BizParam"]));
    }
    if (m.find("CalledNumber") != m.end() && !m["CalledNumber"].empty()) {
      calledNumber = make_shared<string>(boost::any_cast<string>(m["CalledNumber"]));
    }
    if (m.find("CallerNumber") != m.end() && !m["CallerNumber"].empty()) {
      callerNumber = make_shared<string>(boost::any_cast<string>(m["CallerNumber"]));
    }
    if (m.find("Extension") != m.end() && !m["Extension"].empty()) {
      extension = make_shared<string>(boost::any_cast<string>(m["Extension"]));
    }
    if (m.find("OutId") != m.end() && !m["OutId"].empty()) {
      outId = make_shared<string>(boost::any_cast<string>(m["OutId"]));
    }
    if (m.find("PromptParam") != m.end() && !m["PromptParam"].empty()) {
      promptParamShrink = make_shared<string>(boost::any_cast<string>(m["PromptParam"]));
    }
    if (m.find("SessionTimeout") != m.end() && !m["SessionTimeout"].empty()) {
      sessionTimeout = make_shared<long>(boost::any_cast<long>(m["SessionTimeout"]));
    }
    if (m.find("StartWordParam") != m.end() && !m["StartWordParam"].empty()) {
      startWordParamShrink = make_shared<string>(boost::any_cast<string>(m["StartWordParam"]));
    }
    if (m.find("TtsSpeed") != m.end() && !m["TtsSpeed"].empty()) {
      ttsSpeed = make_shared<long>(boost::any_cast<long>(m["TtsSpeed"]));
    }
    if (m.find("TtsVoiceCode") != m.end() && !m["TtsVoiceCode"].empty()) {
      ttsVoiceCode = make_shared<string>(boost::any_cast<string>(m["TtsVoiceCode"]));
    }
    if (m.find("TtsVolume") != m.end() && !m["TtsVolume"].empty()) {
      ttsVolume = make_shared<long>(boost::any_cast<long>(m["TtsVolume"]));
    }
  }


  virtual ~LlmSmartCallShrinkRequest() = default;
};
class LlmSmartCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> callId{};
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};

  LlmSmartCallResponseBody() {}

  explicit LlmSmartCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~LlmSmartCallResponseBody() = default;
};
class LlmSmartCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<LlmSmartCallResponseBody> body{};

  LlmSmartCallResponse() {}

  explicit LlmSmartCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        LlmSmartCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<LlmSmartCallResponseBody>(model1);
      }
    }
  }


  virtual ~LlmSmartCallResponse() = default;
};
class LlmSmartCallEncryptRequest : public Darabonba::Model {
public:
  shared_ptr<string> applicationCode{};
  shared_ptr<string> callerNumber{};
  shared_ptr<string> encryptCalledNumber{};
  shared_ptr<string> outId{};
  shared_ptr<long> ownerId{};
  shared_ptr<map<string, boost::any>> promptParam{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<map<string, boost::any>> startWordParam{};

  LlmSmartCallEncryptRequest() {}

  explicit LlmSmartCallEncryptRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (applicationCode) {
      res["ApplicationCode"] = boost::any(*applicationCode);
    }
    if (callerNumber) {
      res["CallerNumber"] = boost::any(*callerNumber);
    }
    if (encryptCalledNumber) {
      res["EncryptCalledNumber"] = boost::any(*encryptCalledNumber);
    }
    if (outId) {
      res["OutId"] = boost::any(*outId);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (promptParam) {
      res["PromptParam"] = boost::any(*promptParam);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (startWordParam) {
      res["StartWordParam"] = boost::any(*startWordParam);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ApplicationCode") != m.end() && !m["ApplicationCode"].empty()) {
      applicationCode = make_shared<string>(boost::any_cast<string>(m["ApplicationCode"]));
    }
    if (m.find("CallerNumber") != m.end() && !m["CallerNumber"].empty()) {
      callerNumber = make_shared<string>(boost::any_cast<string>(m["CallerNumber"]));
    }
    if (m.find("EncryptCalledNumber") != m.end() && !m["EncryptCalledNumber"].empty()) {
      encryptCalledNumber = make_shared<string>(boost::any_cast<string>(m["EncryptCalledNumber"]));
    }
    if (m.find("OutId") != m.end() && !m["OutId"].empty()) {
      outId = make_shared<string>(boost::any_cast<string>(m["OutId"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("PromptParam") != m.end() && !m["PromptParam"].empty()) {
      map<string, boost::any> map1 = boost::any_cast<map<string, boost::any>>(m["PromptParam"]);
      map<string, boost::any> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      promptParam = make_shared<map<string, boost::any>>(toMap1);
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("StartWordParam") != m.end() && !m["StartWordParam"].empty()) {
      map<string, boost::any> map1 = boost::any_cast<map<string, boost::any>>(m["StartWordParam"]);
      map<string, boost::any> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      startWordParam = make_shared<map<string, boost::any>>(toMap1);
    }
  }


  virtual ~LlmSmartCallEncryptRequest() = default;
};
class LlmSmartCallEncryptShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> applicationCode{};
  shared_ptr<string> callerNumber{};
  shared_ptr<string> encryptCalledNumber{};
  shared_ptr<string> outId{};
  shared_ptr<long> ownerId{};
  shared_ptr<string> promptParamShrink{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<string> startWordParamShrink{};

  LlmSmartCallEncryptShrinkRequest() {}

  explicit LlmSmartCallEncryptShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (applicationCode) {
      res["ApplicationCode"] = boost::any(*applicationCode);
    }
    if (callerNumber) {
      res["CallerNumber"] = boost::any(*callerNumber);
    }
    if (encryptCalledNumber) {
      res["EncryptCalledNumber"] = boost::any(*encryptCalledNumber);
    }
    if (outId) {
      res["OutId"] = boost::any(*outId);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (promptParamShrink) {
      res["PromptParam"] = boost::any(*promptParamShrink);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (startWordParamShrink) {
      res["StartWordParam"] = boost::any(*startWordParamShrink);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ApplicationCode") != m.end() && !m["ApplicationCode"].empty()) {
      applicationCode = make_shared<string>(boost::any_cast<string>(m["ApplicationCode"]));
    }
    if (m.find("CallerNumber") != m.end() && !m["CallerNumber"].empty()) {
      callerNumber = make_shared<string>(boost::any_cast<string>(m["CallerNumber"]));
    }
    if (m.find("EncryptCalledNumber") != m.end() && !m["EncryptCalledNumber"].empty()) {
      encryptCalledNumber = make_shared<string>(boost::any_cast<string>(m["EncryptCalledNumber"]));
    }
    if (m.find("OutId") != m.end() && !m["OutId"].empty()) {
      outId = make_shared<string>(boost::any_cast<string>(m["OutId"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("PromptParam") != m.end() && !m["PromptParam"].empty()) {
      promptParamShrink = make_shared<string>(boost::any_cast<string>(m["PromptParam"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("StartWordParam") != m.end() && !m["StartWordParam"].empty()) {
      startWordParamShrink = make_shared<string>(boost::any_cast<string>(m["StartWordParam"]));
    }
  }


  virtual ~LlmSmartCallEncryptShrinkRequest() = default;
};
class LlmSmartCallEncryptResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> callId{};

  LlmSmartCallEncryptResponseBodyData() {}

  explicit LlmSmartCallEncryptResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
  }


  virtual ~LlmSmartCallEncryptResponseBodyData() = default;
};
class LlmSmartCallEncryptResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> accessDeniedDetail{};
  shared_ptr<string> code{};
  shared_ptr<LlmSmartCallEncryptResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  LlmSmartCallEncryptResponseBody() {}

  explicit LlmSmartCallEncryptResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accessDeniedDetail) {
      res["AccessDeniedDetail"] = boost::any(*accessDeniedDetail);
    }
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccessDeniedDetail") != m.end() && !m["AccessDeniedDetail"].empty()) {
      accessDeniedDetail = make_shared<string>(boost::any_cast<string>(m["AccessDeniedDetail"]));
    }
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        LlmSmartCallEncryptResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<LlmSmartCallEncryptResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~LlmSmartCallEncryptResponseBody() = default;
};
class LlmSmartCallEncryptResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<LlmSmartCallEncryptResponseBody> body{};

  LlmSmartCallEncryptResponse() {}

  explicit LlmSmartCallEncryptResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        LlmSmartCallEncryptResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<LlmSmartCallEncryptResponseBody>(model1);
      }
    }
  }


  virtual ~LlmSmartCallEncryptResponse() = default;
};
class MakeCallRequest : public Darabonba::Model {
public:
  shared_ptr<string> calledNumber{};
  shared_ptr<string> callingNumber{};
  shared_ptr<string> commandCode{};
  shared_ptr<string> extInfo{};
  shared_ptr<string> outerAccountId{};
  shared_ptr<string> outerAccountType{};

  MakeCallRequest() {}

  explicit MakeCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (calledNumber) {
      res["CalledNumber"] = boost::any(*calledNumber);
    }
    if (callingNumber) {
      res["CallingNumber"] = boost::any(*callingNumber);
    }
    if (commandCode) {
      res["CommandCode"] = boost::any(*commandCode);
    }
    if (extInfo) {
      res["ExtInfo"] = boost::any(*extInfo);
    }
    if (outerAccountId) {
      res["OuterAccountId"] = boost::any(*outerAccountId);
    }
    if (outerAccountType) {
      res["OuterAccountType"] = boost::any(*outerAccountType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CalledNumber") != m.end() && !m["CalledNumber"].empty()) {
      calledNumber = make_shared<string>(boost::any_cast<string>(m["CalledNumber"]));
    }
    if (m.find("CallingNumber") != m.end() && !m["CallingNumber"].empty()) {
      callingNumber = make_shared<string>(boost::any_cast<string>(m["CallingNumber"]));
    }
    if (m.find("CommandCode") != m.end() && !m["CommandCode"].empty()) {
      commandCode = make_shared<string>(boost::any_cast<string>(m["CommandCode"]));
    }
    if (m.find("ExtInfo") != m.end() && !m["ExtInfo"].empty()) {
      extInfo = make_shared<string>(boost::any_cast<string>(m["ExtInfo"]));
    }
    if (m.find("OuterAccountId") != m.end() && !m["OuterAccountId"].empty()) {
      outerAccountId = make_shared<string>(boost::any_cast<string>(m["OuterAccountId"]));
    }
    if (m.find("OuterAccountType") != m.end() && !m["OuterAccountType"].empty()) {
      outerAccountType = make_shared<string>(boost::any_cast<string>(m["OuterAccountType"]));
    }
  }


  virtual ~MakeCallRequest() = default;
};
class MakeCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  MakeCallResponseBody() {}

  explicit MakeCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~MakeCallResponseBody() = default;
};
class MakeCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<MakeCallResponseBody> body{};

  MakeCallResponse() {}

  explicit MakeCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        MakeCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<MakeCallResponseBody>(model1);
      }
    }
  }


  virtual ~MakeCallResponse() = default;
};
class MakeDoubleCallRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> bizData{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> memberPhone{};
  shared_ptr<string> outboundCallNumber{};
  shared_ptr<string> servicerPhone{};

  MakeDoubleCallRequest() {}

  explicit MakeDoubleCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (bizData) {
      res["BizData"] = boost::any(*bizData);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (memberPhone) {
      res["MemberPhone"] = boost::any(*memberPhone);
    }
    if (outboundCallNumber) {
      res["OutboundCallNumber"] = boost::any(*outboundCallNumber);
    }
    if (servicerPhone) {
      res["ServicerPhone"] = boost::any(*servicerPhone);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("BizData") != m.end() && !m["BizData"].empty()) {
      bizData = make_shared<string>(boost::any_cast<string>(m["BizData"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("MemberPhone") != m.end() && !m["MemberPhone"].empty()) {
      memberPhone = make_shared<string>(boost::any_cast<string>(m["MemberPhone"]));
    }
    if (m.find("OutboundCallNumber") != m.end() && !m["OutboundCallNumber"].empty()) {
      outboundCallNumber = make_shared<string>(boost::any_cast<string>(m["OutboundCallNumber"]));
    }
    if (m.find("ServicerPhone") != m.end() && !m["ServicerPhone"].empty()) {
      servicerPhone = make_shared<string>(boost::any_cast<string>(m["ServicerPhone"]));
    }
  }


  virtual ~MakeDoubleCallRequest() = default;
};
class MakeDoubleCallResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> acid{};

  MakeDoubleCallResponseBodyData() {}

  explicit MakeDoubleCallResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (acid) {
      res["Acid"] = boost::any(*acid);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Acid") != m.end() && !m["Acid"].empty()) {
      acid = make_shared<string>(boost::any_cast<string>(m["Acid"]));
    }
  }


  virtual ~MakeDoubleCallResponseBodyData() = default;
};
class MakeDoubleCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<MakeDoubleCallResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  MakeDoubleCallResponseBody() {}

  explicit MakeDoubleCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        MakeDoubleCallResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<MakeDoubleCallResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~MakeDoubleCallResponseBody() = default;
};
class MakeDoubleCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<MakeDoubleCallResponseBody> body{};

  MakeDoubleCallResponse() {}

  explicit MakeDoubleCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        MakeDoubleCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<MakeDoubleCallResponseBody>(model1);
      }
    }
  }


  virtual ~MakeDoubleCallResponse() = default;
};
class QueryHotlineInQueueRequest : public Darabonba::Model {
public:
  shared_ptr<string> outerGroupId{};
  shared_ptr<string> outerGroupType{};

  QueryHotlineInQueueRequest() {}

  explicit QueryHotlineInQueueRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (outerGroupId) {
      res["OuterGroupId"] = boost::any(*outerGroupId);
    }
    if (outerGroupType) {
      res["OuterGroupType"] = boost::any(*outerGroupType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("OuterGroupId") != m.end() && !m["OuterGroupId"].empty()) {
      outerGroupId = make_shared<string>(boost::any_cast<string>(m["OuterGroupId"]));
    }
    if (m.find("OuterGroupType") != m.end() && !m["OuterGroupType"].empty()) {
      outerGroupType = make_shared<string>(boost::any_cast<string>(m["OuterGroupType"]));
    }
  }


  virtual ~QueryHotlineInQueueRequest() = default;
};
class QueryHotlineInQueueResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  QueryHotlineInQueueResponseBody() {}

  explicit QueryHotlineInQueueResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~QueryHotlineInQueueResponseBody() = default;
};
class QueryHotlineInQueueResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<QueryHotlineInQueueResponseBody> body{};

  QueryHotlineInQueueResponse() {}

  explicit QueryHotlineInQueueResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        QueryHotlineInQueueResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<QueryHotlineInQueueResponseBody>(model1);
      }
    }
  }


  virtual ~QueryHotlineInQueueResponse() = default;
};
class QueryHotlineNumberRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> departmentId{};
  shared_ptr<vector<long>> groupIds{};
  shared_ptr<string> hotlineNumber{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};

  QueryHotlineNumberRequest() {}

  explicit QueryHotlineNumberRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (groupIds) {
      res["GroupIds"] = boost::any(*groupIds);
    }
    if (hotlineNumber) {
      res["HotlineNumber"] = boost::any(*hotlineNumber);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("HotlineNumber") != m.end() && !m["HotlineNumber"].empty()) {
      hotlineNumber = make_shared<string>(boost::any_cast<string>(m["HotlineNumber"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
  }


  virtual ~QueryHotlineNumberRequest() = default;
};
class QueryHotlineNumberShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<long> departmentId{};
  shared_ptr<string> groupIdsShrink{};
  shared_ptr<string> hotlineNumber{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};

  QueryHotlineNumberShrinkRequest() {}

  explicit QueryHotlineNumberShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (groupIdsShrink) {
      res["GroupIds"] = boost::any(*groupIdsShrink);
    }
    if (hotlineNumber) {
      res["HotlineNumber"] = boost::any(*hotlineNumber);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("GroupIds") != m.end() && !m["GroupIds"].empty()) {
      groupIdsShrink = make_shared<string>(boost::any_cast<string>(m["GroupIds"]));
    }
    if (m.find("HotlineNumber") != m.end() && !m["HotlineNumber"].empty()) {
      hotlineNumber = make_shared<string>(boost::any_cast<string>(m["HotlineNumber"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
  }


  virtual ~QueryHotlineNumberShrinkRequest() = default;
};
class QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeListGroupDOList : public Darabonba::Model {
public:
  shared_ptr<long> groupId{};
  shared_ptr<string> groupName{};

  QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeListGroupDOList() {}

  explicit QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeListGroupDOList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (groupId) {
      res["GroupId"] = boost::any(*groupId);
    }
    if (groupName) {
      res["GroupName"] = boost::any(*groupName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("GroupId") != m.end() && !m["GroupId"].empty()) {
      groupId = make_shared<long>(boost::any_cast<long>(m["GroupId"]));
    }
    if (m.find("GroupName") != m.end() && !m["GroupName"].empty()) {
      groupName = make_shared<string>(boost::any_cast<string>(m["GroupName"]));
    }
  }


  virtual ~QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeListGroupDOList() = default;
};
class QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeList : public Darabonba::Model {
public:
  shared_ptr<long> departmentId{};
  shared_ptr<string> departmentName{};
  shared_ptr<vector<QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeListGroupDOList>> groupDOList{};

  QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeList() {}

  explicit QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (departmentName) {
      res["DepartmentName"] = boost::any(*departmentName);
    }
    if (groupDOList) {
      vector<boost::any> temp1;
      for(auto item1:*groupDOList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["GroupDOList"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("DepartmentName") != m.end() && !m["DepartmentName"].empty()) {
      departmentName = make_shared<string>(boost::any_cast<string>(m["DepartmentName"]));
    }
    if (m.find("GroupDOList") != m.end() && !m["GroupDOList"].empty()) {
      if (typeid(vector<boost::any>) == m["GroupDOList"].type()) {
        vector<QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeListGroupDOList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["GroupDOList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeListGroupDOList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        groupDOList = make_shared<vector<QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeListGroupDOList>>(expect1);
      }
    }
  }


  virtual ~QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeList() = default;
};
class QueryHotlineNumberResponseBodyDataHotlineNumList : public Darabonba::Model {
public:
  shared_ptr<bool> calloutAllDepartment{};
  shared_ptr<vector<QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeList>> calloutRangeList{};
  shared_ptr<string> description{};
  shared_ptr<long> evaluationStatus{};
  shared_ptr<long> flowId{};
  shared_ptr<string> flowName{};
  shared_ptr<string> hotlineNumber{};
  shared_ptr<bool> inBoundEnabled{};
  shared_ptr<string> location{};
  shared_ptr<bool> outboundEnabled{};
  shared_ptr<string> sp{};

  QueryHotlineNumberResponseBodyDataHotlineNumList() {}

  explicit QueryHotlineNumberResponseBodyDataHotlineNumList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (calloutAllDepartment) {
      res["CalloutAllDepartment"] = boost::any(*calloutAllDepartment);
    }
    if (calloutRangeList) {
      vector<boost::any> temp1;
      for(auto item1:*calloutRangeList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["CalloutRangeList"] = boost::any(temp1);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (evaluationStatus) {
      res["EvaluationStatus"] = boost::any(*evaluationStatus);
    }
    if (flowId) {
      res["FlowId"] = boost::any(*flowId);
    }
    if (flowName) {
      res["FlowName"] = boost::any(*flowName);
    }
    if (hotlineNumber) {
      res["HotlineNumber"] = boost::any(*hotlineNumber);
    }
    if (inBoundEnabled) {
      res["InBoundEnabled"] = boost::any(*inBoundEnabled);
    }
    if (location) {
      res["Location"] = boost::any(*location);
    }
    if (outboundEnabled) {
      res["OutboundEnabled"] = boost::any(*outboundEnabled);
    }
    if (sp) {
      res["Sp"] = boost::any(*sp);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CalloutAllDepartment") != m.end() && !m["CalloutAllDepartment"].empty()) {
      calloutAllDepartment = make_shared<bool>(boost::any_cast<bool>(m["CalloutAllDepartment"]));
    }
    if (m.find("CalloutRangeList") != m.end() && !m["CalloutRangeList"].empty()) {
      if (typeid(vector<boost::any>) == m["CalloutRangeList"].type()) {
        vector<QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["CalloutRangeList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        calloutRangeList = make_shared<vector<QueryHotlineNumberResponseBodyDataHotlineNumListCalloutRangeList>>(expect1);
      }
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("EvaluationStatus") != m.end() && !m["EvaluationStatus"].empty()) {
      evaluationStatus = make_shared<long>(boost::any_cast<long>(m["EvaluationStatus"]));
    }
    if (m.find("FlowId") != m.end() && !m["FlowId"].empty()) {
      flowId = make_shared<long>(boost::any_cast<long>(m["FlowId"]));
    }
    if (m.find("FlowName") != m.end() && !m["FlowName"].empty()) {
      flowName = make_shared<string>(boost::any_cast<string>(m["FlowName"]));
    }
    if (m.find("HotlineNumber") != m.end() && !m["HotlineNumber"].empty()) {
      hotlineNumber = make_shared<string>(boost::any_cast<string>(m["HotlineNumber"]));
    }
    if (m.find("InBoundEnabled") != m.end() && !m["InBoundEnabled"].empty()) {
      inBoundEnabled = make_shared<bool>(boost::any_cast<bool>(m["InBoundEnabled"]));
    }
    if (m.find("Location") != m.end() && !m["Location"].empty()) {
      location = make_shared<string>(boost::any_cast<string>(m["Location"]));
    }
    if (m.find("OutboundEnabled") != m.end() && !m["OutboundEnabled"].empty()) {
      outboundEnabled = make_shared<bool>(boost::any_cast<bool>(m["OutboundEnabled"]));
    }
    if (m.find("Sp") != m.end() && !m["Sp"].empty()) {
      sp = make_shared<string>(boost::any_cast<string>(m["Sp"]));
    }
  }


  virtual ~QueryHotlineNumberResponseBodyDataHotlineNumList() = default;
};
class QueryHotlineNumberResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<QueryHotlineNumberResponseBodyDataHotlineNumList>> hotlineNumList{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> totalCount{};

  QueryHotlineNumberResponseBodyData() {}

  explicit QueryHotlineNumberResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (hotlineNumList) {
      vector<boost::any> temp1;
      for(auto item1:*hotlineNumList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["HotlineNumList"] = boost::any(temp1);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalCount) {
      res["TotalCount"] = boost::any(*totalCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("HotlineNumList") != m.end() && !m["HotlineNumList"].empty()) {
      if (typeid(vector<boost::any>) == m["HotlineNumList"].type()) {
        vector<QueryHotlineNumberResponseBodyDataHotlineNumList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["HotlineNumList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            QueryHotlineNumberResponseBodyDataHotlineNumList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        hotlineNumList = make_shared<vector<QueryHotlineNumberResponseBodyDataHotlineNumList>>(expect1);
      }
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("TotalCount") != m.end() && !m["TotalCount"].empty()) {
      totalCount = make_shared<long>(boost::any_cast<long>(m["TotalCount"]));
    }
  }


  virtual ~QueryHotlineNumberResponseBodyData() = default;
};
class QueryHotlineNumberResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<QueryHotlineNumberResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  QueryHotlineNumberResponseBody() {}

  explicit QueryHotlineNumberResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        QueryHotlineNumberResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<QueryHotlineNumberResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~QueryHotlineNumberResponseBody() = default;
};
class QueryHotlineNumberResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<QueryHotlineNumberResponseBody> body{};

  QueryHotlineNumberResponse() {}

  explicit QueryHotlineNumberResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        QueryHotlineNumberResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<QueryHotlineNumberResponseBody>(model1);
      }
    }
  }


  virtual ~QueryHotlineNumberResponse() = default;
};
class QueryOutboundTaskRequest : public Darabonba::Model {
public:
  shared_ptr<string> ani{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> departmentId{};
  shared_ptr<string> endDate{};
  shared_ptr<string> endTime{};
  shared_ptr<string> groupName{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> skillGroup{};
  shared_ptr<string> startDate{};
  shared_ptr<string> startTime{};
  shared_ptr<string> status{};
  shared_ptr<long> taskId{};
  shared_ptr<string> taskName{};
  shared_ptr<long> taskType{};

  QueryOutboundTaskRequest() {}

  explicit QueryOutboundTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ani) {
      res["Ani"] = boost::any(*ani);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (groupName) {
      res["GroupName"] = boost::any(*groupName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (skillGroup) {
      res["SkillGroup"] = boost::any(*skillGroup);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    if (taskName) {
      res["TaskName"] = boost::any(*taskName);
    }
    if (taskType) {
      res["TaskType"] = boost::any(*taskType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Ani") != m.end() && !m["Ani"].empty()) {
      ani = make_shared<string>(boost::any_cast<string>(m["Ani"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<string>(boost::any_cast<string>(m["DepartmentId"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<string>(boost::any_cast<string>(m["EndDate"]));
    }
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<string>(boost::any_cast<string>(m["EndTime"]));
    }
    if (m.find("GroupName") != m.end() && !m["GroupName"].empty()) {
      groupName = make_shared<string>(boost::any_cast<string>(m["GroupName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("SkillGroup") != m.end() && !m["SkillGroup"].empty()) {
      skillGroup = make_shared<long>(boost::any_cast<long>(m["SkillGroup"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<string>(boost::any_cast<string>(m["StartDate"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<string>(boost::any_cast<string>(m["StartTime"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<string>(boost::any_cast<string>(m["Status"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
    if (m.find("TaskName") != m.end() && !m["TaskName"].empty()) {
      taskName = make_shared<string>(boost::any_cast<string>(m["TaskName"]));
    }
    if (m.find("TaskType") != m.end() && !m["TaskType"].empty()) {
      taskType = make_shared<long>(boost::any_cast<long>(m["TaskType"]));
    }
  }


  virtual ~QueryOutboundTaskRequest() = default;
};
class QueryOutboundTaskResponseBodyDataList : public Darabonba::Model {
public:
  shared_ptr<long> buId{};
  shared_ptr<string> callerNum{};
  shared_ptr<string> creator{};
  shared_ptr<long> departmentId{};
  shared_ptr<string> description{};
  shared_ptr<string> endDate{};
  shared_ptr<string> endTime{};
  shared_ptr<string> extAttrs{};
  shared_ptr<long> gmtCreate{};
  shared_ptr<long> gmtModified{};
  shared_ptr<string> groupName{};
  shared_ptr<long> id{};
  shared_ptr<long> model{};
  shared_ptr<string> modifier{};
  shared_ptr<string> name{};
  shared_ptr<long> retryInterval{};
  shared_ptr<long> retryTime{};
  shared_ptr<long> skillGroup{};
  shared_ptr<string> startDate{};
  shared_ptr<string> startTime{};
  shared_ptr<long> status{};
  shared_ptr<long> type{};

  QueryOutboundTaskResponseBodyDataList() {}

  explicit QueryOutboundTaskResponseBodyDataList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (buId) {
      res["BuId"] = boost::any(*buId);
    }
    if (callerNum) {
      res["CallerNum"] = boost::any(*callerNum);
    }
    if (creator) {
      res["Creator"] = boost::any(*creator);
    }
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (endDate) {
      res["EndDate"] = boost::any(*endDate);
    }
    if (endTime) {
      res["EndTime"] = boost::any(*endTime);
    }
    if (extAttrs) {
      res["ExtAttrs"] = boost::any(*extAttrs);
    }
    if (gmtCreate) {
      res["GmtCreate"] = boost::any(*gmtCreate);
    }
    if (gmtModified) {
      res["GmtModified"] = boost::any(*gmtModified);
    }
    if (groupName) {
      res["GroupName"] = boost::any(*groupName);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (model) {
      res["Model"] = boost::any(*model);
    }
    if (modifier) {
      res["Modifier"] = boost::any(*modifier);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (retryInterval) {
      res["RetryInterval"] = boost::any(*retryInterval);
    }
    if (retryTime) {
      res["RetryTime"] = boost::any(*retryTime);
    }
    if (skillGroup) {
      res["SkillGroup"] = boost::any(*skillGroup);
    }
    if (startDate) {
      res["StartDate"] = boost::any(*startDate);
    }
    if (startTime) {
      res["StartTime"] = boost::any(*startTime);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BuId") != m.end() && !m["BuId"].empty()) {
      buId = make_shared<long>(boost::any_cast<long>(m["BuId"]));
    }
    if (m.find("CallerNum") != m.end() && !m["CallerNum"].empty()) {
      callerNum = make_shared<string>(boost::any_cast<string>(m["CallerNum"]));
    }
    if (m.find("Creator") != m.end() && !m["Creator"].empty()) {
      creator = make_shared<string>(boost::any_cast<string>(m["Creator"]));
    }
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("EndDate") != m.end() && !m["EndDate"].empty()) {
      endDate = make_shared<string>(boost::any_cast<string>(m["EndDate"]));
    }
    if (m.find("EndTime") != m.end() && !m["EndTime"].empty()) {
      endTime = make_shared<string>(boost::any_cast<string>(m["EndTime"]));
    }
    if (m.find("ExtAttrs") != m.end() && !m["ExtAttrs"].empty()) {
      extAttrs = make_shared<string>(boost::any_cast<string>(m["ExtAttrs"]));
    }
    if (m.find("GmtCreate") != m.end() && !m["GmtCreate"].empty()) {
      gmtCreate = make_shared<long>(boost::any_cast<long>(m["GmtCreate"]));
    }
    if (m.find("GmtModified") != m.end() && !m["GmtModified"].empty()) {
      gmtModified = make_shared<long>(boost::any_cast<long>(m["GmtModified"]));
    }
    if (m.find("GroupName") != m.end() && !m["GroupName"].empty()) {
      groupName = make_shared<string>(boost::any_cast<string>(m["GroupName"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("Model") != m.end() && !m["Model"].empty()) {
      model = make_shared<long>(boost::any_cast<long>(m["Model"]));
    }
    if (m.find("Modifier") != m.end() && !m["Modifier"].empty()) {
      modifier = make_shared<string>(boost::any_cast<string>(m["Modifier"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("RetryInterval") != m.end() && !m["RetryInterval"].empty()) {
      retryInterval = make_shared<long>(boost::any_cast<long>(m["RetryInterval"]));
    }
    if (m.find("RetryTime") != m.end() && !m["RetryTime"].empty()) {
      retryTime = make_shared<long>(boost::any_cast<long>(m["RetryTime"]));
    }
    if (m.find("SkillGroup") != m.end() && !m["SkillGroup"].empty()) {
      skillGroup = make_shared<long>(boost::any_cast<long>(m["SkillGroup"]));
    }
    if (m.find("StartDate") != m.end() && !m["StartDate"].empty()) {
      startDate = make_shared<string>(boost::any_cast<string>(m["StartDate"]));
    }
    if (m.find("StartTime") != m.end() && !m["StartTime"].empty()) {
      startTime = make_shared<string>(boost::any_cast<string>(m["StartTime"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<long>(boost::any_cast<long>(m["Type"]));
    }
  }


  virtual ~QueryOutboundTaskResponseBodyDataList() = default;
};
class QueryOutboundTaskResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> currentPage{};
  shared_ptr<vector<QueryOutboundTaskResponseBodyDataList>> list{};
  shared_ptr<string> pageSize{};
  shared_ptr<string> totalResults{};

  QueryOutboundTaskResponseBodyData() {}

  explicit QueryOutboundTaskResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (list) {
      vector<boost::any> temp1;
      for(auto item1:*list){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["List"] = boost::any(temp1);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalResults) {
      res["TotalResults"] = boost::any(*totalResults);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<string>(boost::any_cast<string>(m["CurrentPage"]));
    }
    if (m.find("List") != m.end() && !m["List"].empty()) {
      if (typeid(vector<boost::any>) == m["List"].type()) {
        vector<QueryOutboundTaskResponseBodyDataList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["List"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            QueryOutboundTaskResponseBodyDataList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        list = make_shared<vector<QueryOutboundTaskResponseBodyDataList>>(expect1);
      }
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<string>(boost::any_cast<string>(m["PageSize"]));
    }
    if (m.find("TotalResults") != m.end() && !m["TotalResults"].empty()) {
      totalResults = make_shared<string>(boost::any_cast<string>(m["TotalResults"]));
    }
  }


  virtual ~QueryOutboundTaskResponseBodyData() = default;
};
class QueryOutboundTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<QueryOutboundTaskResponseBodyData> data{};
  shared_ptr<string> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  QueryOutboundTaskResponseBody() {}

  explicit QueryOutboundTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        QueryOutboundTaskResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<QueryOutboundTaskResponseBodyData>(model1);
      }
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<string>(boost::any_cast<string>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~QueryOutboundTaskResponseBody() = default;
};
class QueryOutboundTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<QueryOutboundTaskResponseBody> body{};

  QueryOutboundTaskResponse() {}

  explicit QueryOutboundTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        QueryOutboundTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<QueryOutboundTaskResponseBody>(model1);
      }
    }
  }


  virtual ~QueryOutboundTaskResponse() = default;
};
class QuerySkillGroupsRequest : public Darabonba::Model {
public:
  shared_ptr<long> channelType{};
  shared_ptr<string> clientToken{};
  shared_ptr<long> departmentId{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageNo{};
  shared_ptr<long> pageSize{};

  QuerySkillGroupsRequest() {}

  explicit QuerySkillGroupsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (channelType) {
      res["ChannelType"] = boost::any(*channelType);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageNo) {
      res["PageNo"] = boost::any(*pageNo);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ChannelType") != m.end() && !m["ChannelType"].empty()) {
      channelType = make_shared<long>(boost::any_cast<long>(m["ChannelType"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageNo") != m.end() && !m["PageNo"].empty()) {
      pageNo = make_shared<long>(boost::any_cast<long>(m["PageNo"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
  }


  virtual ~QuerySkillGroupsRequest() = default;
};
class QuerySkillGroupsResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> channelType{};
  shared_ptr<string> description{};
  shared_ptr<string> displayName{};
  shared_ptr<long> skillGroupId{};
  shared_ptr<string> skillGroupName{};

  QuerySkillGroupsResponseBodyData() {}

  explicit QuerySkillGroupsResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (channelType) {
      res["ChannelType"] = boost::any(*channelType);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (displayName) {
      res["DisplayName"] = boost::any(*displayName);
    }
    if (skillGroupId) {
      res["SkillGroupId"] = boost::any(*skillGroupId);
    }
    if (skillGroupName) {
      res["SkillGroupName"] = boost::any(*skillGroupName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ChannelType") != m.end() && !m["ChannelType"].empty()) {
      channelType = make_shared<long>(boost::any_cast<long>(m["ChannelType"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("DisplayName") != m.end() && !m["DisplayName"].empty()) {
      displayName = make_shared<string>(boost::any_cast<string>(m["DisplayName"]));
    }
    if (m.find("SkillGroupId") != m.end() && !m["SkillGroupId"].empty()) {
      skillGroupId = make_shared<long>(boost::any_cast<long>(m["SkillGroupId"]));
    }
    if (m.find("SkillGroupName") != m.end() && !m["SkillGroupName"].empty()) {
      skillGroupName = make_shared<string>(boost::any_cast<string>(m["SkillGroupName"]));
    }
  }


  virtual ~QuerySkillGroupsResponseBodyData() = default;
};
class QuerySkillGroupsResponseBody : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<QuerySkillGroupsResponseBodyData>> data{};
  shared_ptr<long> onePageSize{};
  shared_ptr<string> requestId{};
  shared_ptr<long> totalPage{};
  shared_ptr<long> totalResults{};

  QuerySkillGroupsResponseBody() {}

  explicit QuerySkillGroupsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (onePageSize) {
      res["OnePageSize"] = boost::any(*onePageSize);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (totalPage) {
      res["TotalPage"] = boost::any(*totalPage);
    }
    if (totalResults) {
      res["TotalResults"] = boost::any(*totalResults);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<QuerySkillGroupsResponseBodyData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            QuerySkillGroupsResponseBodyData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<QuerySkillGroupsResponseBodyData>>(expect1);
      }
    }
    if (m.find("OnePageSize") != m.end() && !m["OnePageSize"].empty()) {
      onePageSize = make_shared<long>(boost::any_cast<long>(m["OnePageSize"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("TotalPage") != m.end() && !m["TotalPage"].empty()) {
      totalPage = make_shared<long>(boost::any_cast<long>(m["TotalPage"]));
    }
    if (m.find("TotalResults") != m.end() && !m["TotalResults"].empty()) {
      totalResults = make_shared<long>(boost::any_cast<long>(m["TotalResults"]));
    }
  }


  virtual ~QuerySkillGroupsResponseBody() = default;
};
class QuerySkillGroupsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<QuerySkillGroupsResponseBody> body{};

  QuerySkillGroupsResponse() {}

  explicit QuerySkillGroupsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        QuerySkillGroupsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<QuerySkillGroupsResponseBody>(model1);
      }
    }
  }


  virtual ~QuerySkillGroupsResponse() = default;
};
class QueryTaskDetailRequest : public Darabonba::Model {
public:
  shared_ptr<string> ani{};
  shared_ptr<long> currentPage{};
  shared_ptr<string> departmentIdList{};
  shared_ptr<string> dnis{};
  shared_ptr<string> endReasonList{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> outboundTaskId{};
  shared_ptr<long> pageSize{};
  shared_ptr<string> priorityList{};
  shared_ptr<string> servicerId{};
  shared_ptr<string> servicerName{};
  shared_ptr<string> sid{};
  shared_ptr<string> skillGroup{};
  shared_ptr<string> statusList{};
  shared_ptr<long> taskId{};

  QueryTaskDetailRequest() {}

  explicit QueryTaskDetailRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ani) {
      res["Ani"] = boost::any(*ani);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (departmentIdList) {
      res["DepartmentIdList"] = boost::any(*departmentIdList);
    }
    if (dnis) {
      res["Dnis"] = boost::any(*dnis);
    }
    if (endReasonList) {
      res["EndReasonList"] = boost::any(*endReasonList);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (outboundTaskId) {
      res["OutboundTaskId"] = boost::any(*outboundTaskId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (priorityList) {
      res["PriorityList"] = boost::any(*priorityList);
    }
    if (servicerId) {
      res["ServicerId"] = boost::any(*servicerId);
    }
    if (servicerName) {
      res["ServicerName"] = boost::any(*servicerName);
    }
    if (sid) {
      res["Sid"] = boost::any(*sid);
    }
    if (skillGroup) {
      res["SkillGroup"] = boost::any(*skillGroup);
    }
    if (statusList) {
      res["StatusList"] = boost::any(*statusList);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Ani") != m.end() && !m["Ani"].empty()) {
      ani = make_shared<string>(boost::any_cast<string>(m["Ani"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DepartmentIdList") != m.end() && !m["DepartmentIdList"].empty()) {
      departmentIdList = make_shared<string>(boost::any_cast<string>(m["DepartmentIdList"]));
    }
    if (m.find("Dnis") != m.end() && !m["Dnis"].empty()) {
      dnis = make_shared<string>(boost::any_cast<string>(m["Dnis"]));
    }
    if (m.find("EndReasonList") != m.end() && !m["EndReasonList"].empty()) {
      endReasonList = make_shared<string>(boost::any_cast<string>(m["EndReasonList"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("OutboundTaskId") != m.end() && !m["OutboundTaskId"].empty()) {
      outboundTaskId = make_shared<string>(boost::any_cast<string>(m["OutboundTaskId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("PriorityList") != m.end() && !m["PriorityList"].empty()) {
      priorityList = make_shared<string>(boost::any_cast<string>(m["PriorityList"]));
    }
    if (m.find("ServicerId") != m.end() && !m["ServicerId"].empty()) {
      servicerId = make_shared<string>(boost::any_cast<string>(m["ServicerId"]));
    }
    if (m.find("ServicerName") != m.end() && !m["ServicerName"].empty()) {
      servicerName = make_shared<string>(boost::any_cast<string>(m["ServicerName"]));
    }
    if (m.find("Sid") != m.end() && !m["Sid"].empty()) {
      sid = make_shared<string>(boost::any_cast<string>(m["Sid"]));
    }
    if (m.find("SkillGroup") != m.end() && !m["SkillGroup"].empty()) {
      skillGroup = make_shared<string>(boost::any_cast<string>(m["SkillGroup"]));
    }
    if (m.find("StatusList") != m.end() && !m["StatusList"].empty()) {
      statusList = make_shared<string>(boost::any_cast<string>(m["StatusList"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~QueryTaskDetailRequest() = default;
};
class QueryTaskDetailResponseBodyDataList : public Darabonba::Model {
public:
  shared_ptr<string> ani{};
  shared_ptr<long> buId{};
  shared_ptr<long> departmentId{};
  shared_ptr<string> dnis{};
  shared_ptr<long> endReason{};
  shared_ptr<string> extAttrs{};
  shared_ptr<long> gmtCreate{};
  shared_ptr<long> gmtModified{};
  shared_ptr<long> id{};
  shared_ptr<long> memberId{};
  shared_ptr<string> memberName{};
  shared_ptr<long> outboundNum{};
  shared_ptr<long> outboundTaskId{};
  shared_ptr<long> priority{};
  shared_ptr<string> retryTime{};
  shared_ptr<long> servicerId{};
  shared_ptr<string> servicerName{};
  shared_ptr<long> skillGroup{};
  shared_ptr<long> status{};

  QueryTaskDetailResponseBodyDataList() {}

  explicit QueryTaskDetailResponseBodyDataList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ani) {
      res["Ani"] = boost::any(*ani);
    }
    if (buId) {
      res["BuId"] = boost::any(*buId);
    }
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (dnis) {
      res["Dnis"] = boost::any(*dnis);
    }
    if (endReason) {
      res["EndReason"] = boost::any(*endReason);
    }
    if (extAttrs) {
      res["ExtAttrs"] = boost::any(*extAttrs);
    }
    if (gmtCreate) {
      res["GmtCreate"] = boost::any(*gmtCreate);
    }
    if (gmtModified) {
      res["GmtModified"] = boost::any(*gmtModified);
    }
    if (id) {
      res["Id"] = boost::any(*id);
    }
    if (memberId) {
      res["MemberId"] = boost::any(*memberId);
    }
    if (memberName) {
      res["MemberName"] = boost::any(*memberName);
    }
    if (outboundNum) {
      res["OutboundNum"] = boost::any(*outboundNum);
    }
    if (outboundTaskId) {
      res["OutboundTaskId"] = boost::any(*outboundTaskId);
    }
    if (priority) {
      res["Priority"] = boost::any(*priority);
    }
    if (retryTime) {
      res["RetryTime"] = boost::any(*retryTime);
    }
    if (servicerId) {
      res["ServicerId"] = boost::any(*servicerId);
    }
    if (servicerName) {
      res["ServicerName"] = boost::any(*servicerName);
    }
    if (skillGroup) {
      res["SkillGroup"] = boost::any(*skillGroup);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Ani") != m.end() && !m["Ani"].empty()) {
      ani = make_shared<string>(boost::any_cast<string>(m["Ani"]));
    }
    if (m.find("BuId") != m.end() && !m["BuId"].empty()) {
      buId = make_shared<long>(boost::any_cast<long>(m["BuId"]));
    }
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("Dnis") != m.end() && !m["Dnis"].empty()) {
      dnis = make_shared<string>(boost::any_cast<string>(m["Dnis"]));
    }
    if (m.find("EndReason") != m.end() && !m["EndReason"].empty()) {
      endReason = make_shared<long>(boost::any_cast<long>(m["EndReason"]));
    }
    if (m.find("ExtAttrs") != m.end() && !m["ExtAttrs"].empty()) {
      extAttrs = make_shared<string>(boost::any_cast<string>(m["ExtAttrs"]));
    }
    if (m.find("GmtCreate") != m.end() && !m["GmtCreate"].empty()) {
      gmtCreate = make_shared<long>(boost::any_cast<long>(m["GmtCreate"]));
    }
    if (m.find("GmtModified") != m.end() && !m["GmtModified"].empty()) {
      gmtModified = make_shared<long>(boost::any_cast<long>(m["GmtModified"]));
    }
    if (m.find("Id") != m.end() && !m["Id"].empty()) {
      id = make_shared<long>(boost::any_cast<long>(m["Id"]));
    }
    if (m.find("MemberId") != m.end() && !m["MemberId"].empty()) {
      memberId = make_shared<long>(boost::any_cast<long>(m["MemberId"]));
    }
    if (m.find("MemberName") != m.end() && !m["MemberName"].empty()) {
      memberName = make_shared<string>(boost::any_cast<string>(m["MemberName"]));
    }
    if (m.find("OutboundNum") != m.end() && !m["OutboundNum"].empty()) {
      outboundNum = make_shared<long>(boost::any_cast<long>(m["OutboundNum"]));
    }
    if (m.find("OutboundTaskId") != m.end() && !m["OutboundTaskId"].empty()) {
      outboundTaskId = make_shared<long>(boost::any_cast<long>(m["OutboundTaskId"]));
    }
    if (m.find("Priority") != m.end() && !m["Priority"].empty()) {
      priority = make_shared<long>(boost::any_cast<long>(m["Priority"]));
    }
    if (m.find("RetryTime") != m.end() && !m["RetryTime"].empty()) {
      retryTime = make_shared<string>(boost::any_cast<string>(m["RetryTime"]));
    }
    if (m.find("ServicerId") != m.end() && !m["ServicerId"].empty()) {
      servicerId = make_shared<long>(boost::any_cast<long>(m["ServicerId"]));
    }
    if (m.find("ServicerName") != m.end() && !m["ServicerName"].empty()) {
      servicerName = make_shared<string>(boost::any_cast<string>(m["ServicerName"]));
    }
    if (m.find("SkillGroup") != m.end() && !m["SkillGroup"].empty()) {
      skillGroup = make_shared<long>(boost::any_cast<long>(m["SkillGroup"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
  }


  virtual ~QueryTaskDetailResponseBodyDataList() = default;
};
class QueryTaskDetailResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<string> currentPage{};
  shared_ptr<vector<QueryTaskDetailResponseBodyDataList>> list{};
  shared_ptr<string> pageSize{};
  shared_ptr<string> totalResults{};

  QueryTaskDetailResponseBodyData() {}

  explicit QueryTaskDetailResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (list) {
      vector<boost::any> temp1;
      for(auto item1:*list){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["List"] = boost::any(temp1);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (totalResults) {
      res["TotalResults"] = boost::any(*totalResults);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<string>(boost::any_cast<string>(m["CurrentPage"]));
    }
    if (m.find("List") != m.end() && !m["List"].empty()) {
      if (typeid(vector<boost::any>) == m["List"].type()) {
        vector<QueryTaskDetailResponseBodyDataList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["List"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            QueryTaskDetailResponseBodyDataList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        list = make_shared<vector<QueryTaskDetailResponseBodyDataList>>(expect1);
      }
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<string>(boost::any_cast<string>(m["PageSize"]));
    }
    if (m.find("TotalResults") != m.end() && !m["TotalResults"].empty()) {
      totalResults = make_shared<string>(boost::any_cast<string>(m["TotalResults"]));
    }
  }


  virtual ~QueryTaskDetailResponseBodyData() = default;
};
class QueryTaskDetailResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<QueryTaskDetailResponseBodyData> data{};
  shared_ptr<string> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<string> success{};

  QueryTaskDetailResponseBody() {}

  explicit QueryTaskDetailResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        QueryTaskDetailResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<QueryTaskDetailResponseBodyData>(model1);
      }
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<string>(boost::any_cast<string>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<string>(boost::any_cast<string>(m["Success"]));
    }
  }


  virtual ~QueryTaskDetailResponseBody() = default;
};
class QueryTaskDetailResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<QueryTaskDetailResponseBody> body{};

  QueryTaskDetailResponse() {}

  explicit QueryTaskDetailResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        QueryTaskDetailResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<QueryTaskDetailResponseBody>(model1);
      }
    }
  }


  virtual ~QueryTaskDetailResponse() = default;
};
class QueryTicketsRequest : public Darabonba::Model {
public:
  shared_ptr<long> caseId{};
  shared_ptr<long> caseStatus{};
  shared_ptr<long> caseType{};
  shared_ptr<string> channelId{};
  shared_ptr<long> channelType{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> dealId{};
  shared_ptr<map<string, boost::any>> extra{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> srType{};
  shared_ptr<long> taskStatus{};
  shared_ptr<long> touchId{};

  QueryTicketsRequest() {}

  explicit QueryTicketsRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (caseId) {
      res["CaseId"] = boost::any(*caseId);
    }
    if (caseStatus) {
      res["CaseStatus"] = boost::any(*caseStatus);
    }
    if (caseType) {
      res["CaseType"] = boost::any(*caseType);
    }
    if (channelId) {
      res["ChannelId"] = boost::any(*channelId);
    }
    if (channelType) {
      res["ChannelType"] = boost::any(*channelType);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (dealId) {
      res["DealId"] = boost::any(*dealId);
    }
    if (extra) {
      res["Extra"] = boost::any(*extra);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (srType) {
      res["SrType"] = boost::any(*srType);
    }
    if (taskStatus) {
      res["TaskStatus"] = boost::any(*taskStatus);
    }
    if (touchId) {
      res["TouchId"] = boost::any(*touchId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CaseId") != m.end() && !m["CaseId"].empty()) {
      caseId = make_shared<long>(boost::any_cast<long>(m["CaseId"]));
    }
    if (m.find("CaseStatus") != m.end() && !m["CaseStatus"].empty()) {
      caseStatus = make_shared<long>(boost::any_cast<long>(m["CaseStatus"]));
    }
    if (m.find("CaseType") != m.end() && !m["CaseType"].empty()) {
      caseType = make_shared<long>(boost::any_cast<long>(m["CaseType"]));
    }
    if (m.find("ChannelId") != m.end() && !m["ChannelId"].empty()) {
      channelId = make_shared<string>(boost::any_cast<string>(m["ChannelId"]));
    }
    if (m.find("ChannelType") != m.end() && !m["ChannelType"].empty()) {
      channelType = make_shared<long>(boost::any_cast<long>(m["ChannelType"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DealId") != m.end() && !m["DealId"].empty()) {
      dealId = make_shared<long>(boost::any_cast<long>(m["DealId"]));
    }
    if (m.find("Extra") != m.end() && !m["Extra"].empty()) {
      map<string, boost::any> map1 = boost::any_cast<map<string, boost::any>>(m["Extra"]);
      map<string, boost::any> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      extra = make_shared<map<string, boost::any>>(toMap1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("SrType") != m.end() && !m["SrType"].empty()) {
      srType = make_shared<long>(boost::any_cast<long>(m["SrType"]));
    }
    if (m.find("TaskStatus") != m.end() && !m["TaskStatus"].empty()) {
      taskStatus = make_shared<long>(boost::any_cast<long>(m["TaskStatus"]));
    }
    if (m.find("TouchId") != m.end() && !m["TouchId"].empty()) {
      touchId = make_shared<long>(boost::any_cast<long>(m["TouchId"]));
    }
  }


  virtual ~QueryTicketsRequest() = default;
};
class QueryTicketsShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<long> caseId{};
  shared_ptr<long> caseStatus{};
  shared_ptr<long> caseType{};
  shared_ptr<string> channelId{};
  shared_ptr<long> channelType{};
  shared_ptr<long> currentPage{};
  shared_ptr<long> dealId{};
  shared_ptr<string> extraShrink{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> pageSize{};
  shared_ptr<long> srType{};
  shared_ptr<long> taskStatus{};
  shared_ptr<long> touchId{};

  QueryTicketsShrinkRequest() {}

  explicit QueryTicketsShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (caseId) {
      res["CaseId"] = boost::any(*caseId);
    }
    if (caseStatus) {
      res["CaseStatus"] = boost::any(*caseStatus);
    }
    if (caseType) {
      res["CaseType"] = boost::any(*caseType);
    }
    if (channelId) {
      res["ChannelId"] = boost::any(*channelId);
    }
    if (channelType) {
      res["ChannelType"] = boost::any(*channelType);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (dealId) {
      res["DealId"] = boost::any(*dealId);
    }
    if (extraShrink) {
      res["Extra"] = boost::any(*extraShrink);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (srType) {
      res["SrType"] = boost::any(*srType);
    }
    if (taskStatus) {
      res["TaskStatus"] = boost::any(*taskStatus);
    }
    if (touchId) {
      res["TouchId"] = boost::any(*touchId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CaseId") != m.end() && !m["CaseId"].empty()) {
      caseId = make_shared<long>(boost::any_cast<long>(m["CaseId"]));
    }
    if (m.find("CaseStatus") != m.end() && !m["CaseStatus"].empty()) {
      caseStatus = make_shared<long>(boost::any_cast<long>(m["CaseStatus"]));
    }
    if (m.find("CaseType") != m.end() && !m["CaseType"].empty()) {
      caseType = make_shared<long>(boost::any_cast<long>(m["CaseType"]));
    }
    if (m.find("ChannelId") != m.end() && !m["ChannelId"].empty()) {
      channelId = make_shared<string>(boost::any_cast<string>(m["ChannelId"]));
    }
    if (m.find("ChannelType") != m.end() && !m["ChannelType"].empty()) {
      channelType = make_shared<long>(boost::any_cast<long>(m["ChannelType"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("DealId") != m.end() && !m["DealId"].empty()) {
      dealId = make_shared<long>(boost::any_cast<long>(m["DealId"]));
    }
    if (m.find("Extra") != m.end() && !m["Extra"].empty()) {
      extraShrink = make_shared<string>(boost::any_cast<string>(m["Extra"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("SrType") != m.end() && !m["SrType"].empty()) {
      srType = make_shared<long>(boost::any_cast<long>(m["SrType"]));
    }
    if (m.find("TaskStatus") != m.end() && !m["TaskStatus"].empty()) {
      taskStatus = make_shared<long>(boost::any_cast<long>(m["TaskStatus"]));
    }
    if (m.find("TouchId") != m.end() && !m["TouchId"].empty()) {
      touchId = make_shared<long>(boost::any_cast<long>(m["TouchId"]));
    }
  }


  virtual ~QueryTicketsShrinkRequest() = default;
};
class QueryTicketsResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  QueryTicketsResponseBody() {}

  explicit QueryTicketsResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~QueryTicketsResponseBody() = default;
};
class QueryTicketsResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<QueryTicketsResponseBody> body{};

  QueryTicketsResponse() {}

  explicit QueryTicketsResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        QueryTicketsResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<QueryTicketsResponseBody>(model1);
      }
    }
  }


  virtual ~QueryTicketsResponse() = default;
};
class QueryTouchListRequest : public Darabonba::Model {
public:
  shared_ptr<vector<string>> channelId{};
  shared_ptr<vector<long>> channelType{};
  shared_ptr<long> closeTimeEnd{};
  shared_ptr<long> closeTimeStart{};
  shared_ptr<long> currentPage{};
  shared_ptr<vector<long>> evaluationLevel{};
  shared_ptr<vector<long>> evaluationScore{};
  shared_ptr<vector<long>> evaluationStatus{};
  shared_ptr<long> firstTimeEnd{};
  shared_ptr<long> firstTimeStart{};
  shared_ptr<string> instanceId{};
  shared_ptr<vector<long>> memberId{};
  shared_ptr<vector<string>> memberName{};
  shared_ptr<long> pageSize{};
  shared_ptr<vector<long>> queueId{};
  shared_ptr<vector<long>> servicerId{};
  shared_ptr<vector<string>> servicerName{};
  shared_ptr<vector<long>> touchId{};
  shared_ptr<vector<long>> touchType{};

  QueryTouchListRequest() {}

  explicit QueryTouchListRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (channelId) {
      res["ChannelId"] = boost::any(*channelId);
    }
    if (channelType) {
      res["ChannelType"] = boost::any(*channelType);
    }
    if (closeTimeEnd) {
      res["CloseTimeEnd"] = boost::any(*closeTimeEnd);
    }
    if (closeTimeStart) {
      res["CloseTimeStart"] = boost::any(*closeTimeStart);
    }
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (evaluationLevel) {
      res["EvaluationLevel"] = boost::any(*evaluationLevel);
    }
    if (evaluationScore) {
      res["EvaluationScore"] = boost::any(*evaluationScore);
    }
    if (evaluationStatus) {
      res["EvaluationStatus"] = boost::any(*evaluationStatus);
    }
    if (firstTimeEnd) {
      res["FirstTimeEnd"] = boost::any(*firstTimeEnd);
    }
    if (firstTimeStart) {
      res["FirstTimeStart"] = boost::any(*firstTimeStart);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (memberId) {
      res["MemberId"] = boost::any(*memberId);
    }
    if (memberName) {
      res["MemberName"] = boost::any(*memberName);
    }
    if (pageSize) {
      res["PageSize"] = boost::any(*pageSize);
    }
    if (queueId) {
      res["QueueId"] = boost::any(*queueId);
    }
    if (servicerId) {
      res["ServicerId"] = boost::any(*servicerId);
    }
    if (servicerName) {
      res["ServicerName"] = boost::any(*servicerName);
    }
    if (touchId) {
      res["TouchId"] = boost::any(*touchId);
    }
    if (touchType) {
      res["TouchType"] = boost::any(*touchType);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ChannelId") != m.end() && !m["ChannelId"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["ChannelId"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ChannelId"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      channelId = make_shared<vector<string>>(toVec1);
    }
    if (m.find("ChannelType") != m.end() && !m["ChannelType"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["ChannelType"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ChannelType"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      channelType = make_shared<vector<long>>(toVec1);
    }
    if (m.find("CloseTimeEnd") != m.end() && !m["CloseTimeEnd"].empty()) {
      closeTimeEnd = make_shared<long>(boost::any_cast<long>(m["CloseTimeEnd"]));
    }
    if (m.find("CloseTimeStart") != m.end() && !m["CloseTimeStart"].empty()) {
      closeTimeStart = make_shared<long>(boost::any_cast<long>(m["CloseTimeStart"]));
    }
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("EvaluationLevel") != m.end() && !m["EvaluationLevel"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["EvaluationLevel"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["EvaluationLevel"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      evaluationLevel = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EvaluationScore") != m.end() && !m["EvaluationScore"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["EvaluationScore"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["EvaluationScore"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      evaluationScore = make_shared<vector<long>>(toVec1);
    }
    if (m.find("EvaluationStatus") != m.end() && !m["EvaluationStatus"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["EvaluationStatus"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["EvaluationStatus"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      evaluationStatus = make_shared<vector<long>>(toVec1);
    }
    if (m.find("FirstTimeEnd") != m.end() && !m["FirstTimeEnd"].empty()) {
      firstTimeEnd = make_shared<long>(boost::any_cast<long>(m["FirstTimeEnd"]));
    }
    if (m.find("FirstTimeStart") != m.end() && !m["FirstTimeStart"].empty()) {
      firstTimeStart = make_shared<long>(boost::any_cast<long>(m["FirstTimeStart"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("MemberId") != m.end() && !m["MemberId"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["MemberId"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["MemberId"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      memberId = make_shared<vector<long>>(toVec1);
    }
    if (m.find("MemberName") != m.end() && !m["MemberName"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["MemberName"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["MemberName"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      memberName = make_shared<vector<string>>(toVec1);
    }
    if (m.find("PageSize") != m.end() && !m["PageSize"].empty()) {
      pageSize = make_shared<long>(boost::any_cast<long>(m["PageSize"]));
    }
    if (m.find("QueueId") != m.end() && !m["QueueId"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["QueueId"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["QueueId"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      queueId = make_shared<vector<long>>(toVec1);
    }
    if (m.find("ServicerId") != m.end() && !m["ServicerId"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["ServicerId"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ServicerId"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      servicerId = make_shared<vector<long>>(toVec1);
    }
    if (m.find("ServicerName") != m.end() && !m["ServicerName"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["ServicerName"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["ServicerName"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      servicerName = make_shared<vector<string>>(toVec1);
    }
    if (m.find("TouchId") != m.end() && !m["TouchId"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["TouchId"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["TouchId"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      touchId = make_shared<vector<long>>(toVec1);
    }
    if (m.find("TouchType") != m.end() && !m["TouchType"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["TouchType"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["TouchType"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      touchType = make_shared<vector<long>>(toVec1);
    }
  }


  virtual ~QueryTouchListRequest() = default;
};
class QueryTouchListResponseBodyResultDataDataExtAttrs : public Darabonba::Model {
public:
  shared_ptr<string> ani{};
  shared_ptr<string> dnis{};
  shared_ptr<long> evaluationLevel{};
  shared_ptr<long> evaluationScore{};
  shared_ptr<long> evaluationSolution{};
  shared_ptr<long> evaluationStatus{};
  shared_ptr<long> onlineJoinRespInterval{};
  shared_ptr<long> onlineSessionSource{};
  shared_ptr<string> outCallRouteNumber{};

  QueryTouchListResponseBodyResultDataDataExtAttrs() {}

  explicit QueryTouchListResponseBodyResultDataDataExtAttrs(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ani) {
      res["Ani"] = boost::any(*ani);
    }
    if (dnis) {
      res["Dnis"] = boost::any(*dnis);
    }
    if (evaluationLevel) {
      res["EvaluationLevel"] = boost::any(*evaluationLevel);
    }
    if (evaluationScore) {
      res["EvaluationScore"] = boost::any(*evaluationScore);
    }
    if (evaluationSolution) {
      res["EvaluationSolution"] = boost::any(*evaluationSolution);
    }
    if (evaluationStatus) {
      res["EvaluationStatus"] = boost::any(*evaluationStatus);
    }
    if (onlineJoinRespInterval) {
      res["OnlineJoinRespInterval"] = boost::any(*onlineJoinRespInterval);
    }
    if (onlineSessionSource) {
      res["OnlineSessionSource"] = boost::any(*onlineSessionSource);
    }
    if (outCallRouteNumber) {
      res["OutCallRouteNumber"] = boost::any(*outCallRouteNumber);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Ani") != m.end() && !m["Ani"].empty()) {
      ani = make_shared<string>(boost::any_cast<string>(m["Ani"]));
    }
    if (m.find("Dnis") != m.end() && !m["Dnis"].empty()) {
      dnis = make_shared<string>(boost::any_cast<string>(m["Dnis"]));
    }
    if (m.find("EvaluationLevel") != m.end() && !m["EvaluationLevel"].empty()) {
      evaluationLevel = make_shared<long>(boost::any_cast<long>(m["EvaluationLevel"]));
    }
    if (m.find("EvaluationScore") != m.end() && !m["EvaluationScore"].empty()) {
      evaluationScore = make_shared<long>(boost::any_cast<long>(m["EvaluationScore"]));
    }
    if (m.find("EvaluationSolution") != m.end() && !m["EvaluationSolution"].empty()) {
      evaluationSolution = make_shared<long>(boost::any_cast<long>(m["EvaluationSolution"]));
    }
    if (m.find("EvaluationStatus") != m.end() && !m["EvaluationStatus"].empty()) {
      evaluationStatus = make_shared<long>(boost::any_cast<long>(m["EvaluationStatus"]));
    }
    if (m.find("OnlineJoinRespInterval") != m.end() && !m["OnlineJoinRespInterval"].empty()) {
      onlineJoinRespInterval = make_shared<long>(boost::any_cast<long>(m["OnlineJoinRespInterval"]));
    }
    if (m.find("OnlineSessionSource") != m.end() && !m["OnlineSessionSource"].empty()) {
      onlineSessionSource = make_shared<long>(boost::any_cast<long>(m["OnlineSessionSource"]));
    }
    if (m.find("OutCallRouteNumber") != m.end() && !m["OutCallRouteNumber"].empty()) {
      outCallRouteNumber = make_shared<string>(boost::any_cast<string>(m["OutCallRouteNumber"]));
    }
  }


  virtual ~QueryTouchListResponseBodyResultDataDataExtAttrs() = default;
};
class QueryTouchListResponseBodyResultDataData : public Darabonba::Model {
public:
  shared_ptr<long> buId{};
  shared_ptr<string> channelId{};
  shared_ptr<long> channelType{};
  shared_ptr<long> closeTime{};
  shared_ptr<string> commonQueueName{};
  shared_ptr<long> depId{};
  shared_ptr<QueryTouchListResponseBodyResultDataDataExtAttrs> extAttrs{};
  shared_ptr<map<string, boost::any>> extAttrsString{};
  shared_ptr<string> feedback{};
  shared_ptr<long> firstTime{};
  shared_ptr<long> fromId{};
  shared_ptr<long> gmtCreate{};
  shared_ptr<long> gmtModified{};
  shared_ptr<long> memberId{};
  shared_ptr<string> memberName{};
  shared_ptr<long> parentTouchId{};
  shared_ptr<long> queueId{};
  shared_ptr<long> servicerId{};
  shared_ptr<string> servicerName{};
  shared_ptr<long> status{};
  shared_ptr<string> switchUser{};
  shared_ptr<long> toId{};
  shared_ptr<string> touchContent{};
  shared_ptr<long> touchEndReason{};
  shared_ptr<string> touchId{};
  shared_ptr<string> touchTime{};
  shared_ptr<long> touchType{};
  shared_ptr<long> userTouchId{};

  QueryTouchListResponseBodyResultDataData() {}

  explicit QueryTouchListResponseBodyResultDataData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (buId) {
      res["BuId"] = boost::any(*buId);
    }
    if (channelId) {
      res["ChannelId"] = boost::any(*channelId);
    }
    if (channelType) {
      res["ChannelType"] = boost::any(*channelType);
    }
    if (closeTime) {
      res["CloseTime"] = boost::any(*closeTime);
    }
    if (commonQueueName) {
      res["CommonQueueName"] = boost::any(*commonQueueName);
    }
    if (depId) {
      res["DepId"] = boost::any(*depId);
    }
    if (extAttrs) {
      res["ExtAttrs"] = extAttrs ? boost::any(extAttrs->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (extAttrsString) {
      res["ExtAttrsString"] = boost::any(*extAttrsString);
    }
    if (feedback) {
      res["Feedback"] = boost::any(*feedback);
    }
    if (firstTime) {
      res["FirstTime"] = boost::any(*firstTime);
    }
    if (fromId) {
      res["FromId"] = boost::any(*fromId);
    }
    if (gmtCreate) {
      res["GmtCreate"] = boost::any(*gmtCreate);
    }
    if (gmtModified) {
      res["GmtModified"] = boost::any(*gmtModified);
    }
    if (memberId) {
      res["MemberId"] = boost::any(*memberId);
    }
    if (memberName) {
      res["MemberName"] = boost::any(*memberName);
    }
    if (parentTouchId) {
      res["ParentTouchId"] = boost::any(*parentTouchId);
    }
    if (queueId) {
      res["QueueId"] = boost::any(*queueId);
    }
    if (servicerId) {
      res["ServicerId"] = boost::any(*servicerId);
    }
    if (servicerName) {
      res["ServicerName"] = boost::any(*servicerName);
    }
    if (status) {
      res["Status"] = boost::any(*status);
    }
    if (switchUser) {
      res["SwitchUser"] = boost::any(*switchUser);
    }
    if (toId) {
      res["ToId"] = boost::any(*toId);
    }
    if (touchContent) {
      res["TouchContent"] = boost::any(*touchContent);
    }
    if (touchEndReason) {
      res["TouchEndReason"] = boost::any(*touchEndReason);
    }
    if (touchId) {
      res["TouchId"] = boost::any(*touchId);
    }
    if (touchTime) {
      res["TouchTime"] = boost::any(*touchTime);
    }
    if (touchType) {
      res["TouchType"] = boost::any(*touchType);
    }
    if (userTouchId) {
      res["UserTouchId"] = boost::any(*userTouchId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("BuId") != m.end() && !m["BuId"].empty()) {
      buId = make_shared<long>(boost::any_cast<long>(m["BuId"]));
    }
    if (m.find("ChannelId") != m.end() && !m["ChannelId"].empty()) {
      channelId = make_shared<string>(boost::any_cast<string>(m["ChannelId"]));
    }
    if (m.find("ChannelType") != m.end() && !m["ChannelType"].empty()) {
      channelType = make_shared<long>(boost::any_cast<long>(m["ChannelType"]));
    }
    if (m.find("CloseTime") != m.end() && !m["CloseTime"].empty()) {
      closeTime = make_shared<long>(boost::any_cast<long>(m["CloseTime"]));
    }
    if (m.find("CommonQueueName") != m.end() && !m["CommonQueueName"].empty()) {
      commonQueueName = make_shared<string>(boost::any_cast<string>(m["CommonQueueName"]));
    }
    if (m.find("DepId") != m.end() && !m["DepId"].empty()) {
      depId = make_shared<long>(boost::any_cast<long>(m["DepId"]));
    }
    if (m.find("ExtAttrs") != m.end() && !m["ExtAttrs"].empty()) {
      if (typeid(map<string, boost::any>) == m["ExtAttrs"].type()) {
        QueryTouchListResponseBodyResultDataDataExtAttrs model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["ExtAttrs"]));
        extAttrs = make_shared<QueryTouchListResponseBodyResultDataDataExtAttrs>(model1);
      }
    }
    if (m.find("ExtAttrsString") != m.end() && !m["ExtAttrsString"].empty()) {
      map<string, boost::any> map1 = boost::any_cast<map<string, boost::any>>(m["ExtAttrsString"]);
      map<string, boost::any> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      extAttrsString = make_shared<map<string, boost::any>>(toMap1);
    }
    if (m.find("Feedback") != m.end() && !m["Feedback"].empty()) {
      feedback = make_shared<string>(boost::any_cast<string>(m["Feedback"]));
    }
    if (m.find("FirstTime") != m.end() && !m["FirstTime"].empty()) {
      firstTime = make_shared<long>(boost::any_cast<long>(m["FirstTime"]));
    }
    if (m.find("FromId") != m.end() && !m["FromId"].empty()) {
      fromId = make_shared<long>(boost::any_cast<long>(m["FromId"]));
    }
    if (m.find("GmtCreate") != m.end() && !m["GmtCreate"].empty()) {
      gmtCreate = make_shared<long>(boost::any_cast<long>(m["GmtCreate"]));
    }
    if (m.find("GmtModified") != m.end() && !m["GmtModified"].empty()) {
      gmtModified = make_shared<long>(boost::any_cast<long>(m["GmtModified"]));
    }
    if (m.find("MemberId") != m.end() && !m["MemberId"].empty()) {
      memberId = make_shared<long>(boost::any_cast<long>(m["MemberId"]));
    }
    if (m.find("MemberName") != m.end() && !m["MemberName"].empty()) {
      memberName = make_shared<string>(boost::any_cast<string>(m["MemberName"]));
    }
    if (m.find("ParentTouchId") != m.end() && !m["ParentTouchId"].empty()) {
      parentTouchId = make_shared<long>(boost::any_cast<long>(m["ParentTouchId"]));
    }
    if (m.find("QueueId") != m.end() && !m["QueueId"].empty()) {
      queueId = make_shared<long>(boost::any_cast<long>(m["QueueId"]));
    }
    if (m.find("ServicerId") != m.end() && !m["ServicerId"].empty()) {
      servicerId = make_shared<long>(boost::any_cast<long>(m["ServicerId"]));
    }
    if (m.find("ServicerName") != m.end() && !m["ServicerName"].empty()) {
      servicerName = make_shared<string>(boost::any_cast<string>(m["ServicerName"]));
    }
    if (m.find("Status") != m.end() && !m["Status"].empty()) {
      status = make_shared<long>(boost::any_cast<long>(m["Status"]));
    }
    if (m.find("SwitchUser") != m.end() && !m["SwitchUser"].empty()) {
      switchUser = make_shared<string>(boost::any_cast<string>(m["SwitchUser"]));
    }
    if (m.find("ToId") != m.end() && !m["ToId"].empty()) {
      toId = make_shared<long>(boost::any_cast<long>(m["ToId"]));
    }
    if (m.find("TouchContent") != m.end() && !m["TouchContent"].empty()) {
      touchContent = make_shared<string>(boost::any_cast<string>(m["TouchContent"]));
    }
    if (m.find("TouchEndReason") != m.end() && !m["TouchEndReason"].empty()) {
      touchEndReason = make_shared<long>(boost::any_cast<long>(m["TouchEndReason"]));
    }
    if (m.find("TouchId") != m.end() && !m["TouchId"].empty()) {
      touchId = make_shared<string>(boost::any_cast<string>(m["TouchId"]));
    }
    if (m.find("TouchTime") != m.end() && !m["TouchTime"].empty()) {
      touchTime = make_shared<string>(boost::any_cast<string>(m["TouchTime"]));
    }
    if (m.find("TouchType") != m.end() && !m["TouchType"].empty()) {
      touchType = make_shared<long>(boost::any_cast<long>(m["TouchType"]));
    }
    if (m.find("UserTouchId") != m.end() && !m["UserTouchId"].empty()) {
      userTouchId = make_shared<long>(boost::any_cast<long>(m["UserTouchId"]));
    }
  }


  virtual ~QueryTouchListResponseBodyResultDataData() = default;
};
class QueryTouchListResponseBodyResultData : public Darabonba::Model {
public:
  shared_ptr<long> currentPage{};
  shared_ptr<vector<QueryTouchListResponseBodyResultDataData>> data{};
  shared_ptr<bool> empty{};
  shared_ptr<long> nextPage{};
  shared_ptr<long> onePageSize{};
  shared_ptr<long> previousPage{};
  shared_ptr<long> totalPage{};
  shared_ptr<long> totalResults{};

  QueryTouchListResponseBodyResultData() {}

  explicit QueryTouchListResponseBodyResultData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (currentPage) {
      res["CurrentPage"] = boost::any(*currentPage);
    }
    if (data) {
      vector<boost::any> temp1;
      for(auto item1:*data){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["Data"] = boost::any(temp1);
    }
    if (empty) {
      res["Empty"] = boost::any(*empty);
    }
    if (nextPage) {
      res["NextPage"] = boost::any(*nextPage);
    }
    if (onePageSize) {
      res["OnePageSize"] = boost::any(*onePageSize);
    }
    if (previousPage) {
      res["PreviousPage"] = boost::any(*previousPage);
    }
    if (totalPage) {
      res["TotalPage"] = boost::any(*totalPage);
    }
    if (totalResults) {
      res["TotalResults"] = boost::any(*totalResults);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CurrentPage") != m.end() && !m["CurrentPage"].empty()) {
      currentPage = make_shared<long>(boost::any_cast<long>(m["CurrentPage"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(vector<boost::any>) == m["Data"].type()) {
        vector<QueryTouchListResponseBodyResultDataData> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["Data"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            QueryTouchListResponseBodyResultDataData model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        data = make_shared<vector<QueryTouchListResponseBodyResultDataData>>(expect1);
      }
    }
    if (m.find("Empty") != m.end() && !m["Empty"].empty()) {
      empty = make_shared<bool>(boost::any_cast<bool>(m["Empty"]));
    }
    if (m.find("NextPage") != m.end() && !m["NextPage"].empty()) {
      nextPage = make_shared<long>(boost::any_cast<long>(m["NextPage"]));
    }
    if (m.find("OnePageSize") != m.end() && !m["OnePageSize"].empty()) {
      onePageSize = make_shared<long>(boost::any_cast<long>(m["OnePageSize"]));
    }
    if (m.find("PreviousPage") != m.end() && !m["PreviousPage"].empty()) {
      previousPage = make_shared<long>(boost::any_cast<long>(m["PreviousPage"]));
    }
    if (m.find("TotalPage") != m.end() && !m["TotalPage"].empty()) {
      totalPage = make_shared<long>(boost::any_cast<long>(m["TotalPage"]));
    }
    if (m.find("TotalResults") != m.end() && !m["TotalResults"].empty()) {
      totalResults = make_shared<long>(boost::any_cast<long>(m["TotalResults"]));
    }
  }


  virtual ~QueryTouchListResponseBodyResultData() = default;
};
class QueryTouchListResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<QueryTouchListResponseBodyResultData> resultData{};
  shared_ptr<bool> success{};

  QueryTouchListResponseBody() {}

  explicit QueryTouchListResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (resultData) {
      res["ResultData"] = resultData ? boost::any(resultData->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("ResultData") != m.end() && !m["ResultData"].empty()) {
      if (typeid(map<string, boost::any>) == m["ResultData"].type()) {
        QueryTouchListResponseBodyResultData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["ResultData"]));
        resultData = make_shared<QueryTouchListResponseBodyResultData>(model1);
      }
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~QueryTouchListResponseBody() = default;
};
class QueryTouchListResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<QueryTouchListResponseBody> body{};

  QueryTouchListResponse() {}

  explicit QueryTouchListResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        QueryTouchListResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<QueryTouchListResponseBody>(model1);
      }
    }
  }


  virtual ~QueryTouchListResponse() = default;
};
class RemoveAgentFromSkillGroupRequest : public Darabonba::Model {
public:
  shared_ptr<vector<long>> agentIds{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> skillGroupId{};

  RemoveAgentFromSkillGroupRequest() {}

  explicit RemoveAgentFromSkillGroupRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIds) {
      res["AgentIds"] = boost::any(*agentIds);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (skillGroupId) {
      res["SkillGroupId"] = boost::any(*skillGroupId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["AgentIds"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["AgentIds"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      agentIds = make_shared<vector<long>>(toVec1);
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("SkillGroupId") != m.end() && !m["SkillGroupId"].empty()) {
      skillGroupId = make_shared<long>(boost::any_cast<long>(m["SkillGroupId"]));
    }
  }


  virtual ~RemoveAgentFromSkillGroupRequest() = default;
};
class RemoveAgentFromSkillGroupShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> agentIdsShrink{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> skillGroupId{};

  RemoveAgentFromSkillGroupShrinkRequest() {}

  explicit RemoveAgentFromSkillGroupShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (agentIdsShrink) {
      res["AgentIds"] = boost::any(*agentIdsShrink);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (skillGroupId) {
      res["SkillGroupId"] = boost::any(*skillGroupId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AgentIds") != m.end() && !m["AgentIds"].empty()) {
      agentIdsShrink = make_shared<string>(boost::any_cast<string>(m["AgentIds"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("SkillGroupId") != m.end() && !m["SkillGroupId"].empty()) {
      skillGroupId = make_shared<long>(boost::any_cast<long>(m["SkillGroupId"]));
    }
  }


  virtual ~RemoveAgentFromSkillGroupShrinkRequest() = default;
};
class RemoveAgentFromSkillGroupResponseBodyData : public Darabonba::Model {
public:
  shared_ptr<long> successCount{};

  RemoveAgentFromSkillGroupResponseBodyData() {}

  explicit RemoveAgentFromSkillGroupResponseBodyData(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (successCount) {
      res["SuccessCount"] = boost::any(*successCount);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("SuccessCount") != m.end() && !m["SuccessCount"].empty()) {
      successCount = make_shared<long>(boost::any_cast<long>(m["SuccessCount"]));
    }
  }


  virtual ~RemoveAgentFromSkillGroupResponseBodyData() = default;
};
class RemoveAgentFromSkillGroupResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<RemoveAgentFromSkillGroupResponseBodyData> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  RemoveAgentFromSkillGroupResponseBody() {}

  explicit RemoveAgentFromSkillGroupResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = data ? boost::any(data->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      if (typeid(map<string, boost::any>) == m["Data"].type()) {
        RemoveAgentFromSkillGroupResponseBodyData model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["Data"]));
        data = make_shared<RemoveAgentFromSkillGroupResponseBodyData>(model1);
      }
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~RemoveAgentFromSkillGroupResponseBody() = default;
};
class RemoveAgentFromSkillGroupResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<RemoveAgentFromSkillGroupResponseBody> body{};

  RemoveAgentFromSkillGroupResponse() {}

  explicit RemoveAgentFromSkillGroupResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        RemoveAgentFromSkillGroupResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<RemoveAgentFromSkillGroupResponseBody>(model1);
      }
    }
  }


  virtual ~RemoveAgentFromSkillGroupResponse() = default;
};
class RemoveSkillGroupRequest : public Darabonba::Model {
public:
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> skillGroupId{};

  RemoveSkillGroupRequest() {}

  explicit RemoveSkillGroupRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (skillGroupId) {
      res["SkillGroupId"] = boost::any(*skillGroupId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("SkillGroupId") != m.end() && !m["SkillGroupId"].empty()) {
      skillGroupId = make_shared<string>(boost::any_cast<string>(m["SkillGroupId"]));
    }
  }


  virtual ~RemoveSkillGroupRequest() = default;
};
class RemoveSkillGroupResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  RemoveSkillGroupResponseBody() {}

  explicit RemoveSkillGroupResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~RemoveSkillGroupResponseBody() = default;
};
class RemoveSkillGroupResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<RemoveSkillGroupResponseBody> body{};

  RemoveSkillGroupResponse() {}

  explicit RemoveSkillGroupResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        RemoveSkillGroupResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<RemoveSkillGroupResponseBody>(model1);
      }
    }
  }


  virtual ~RemoveSkillGroupResponse() = default;
};
class ResetHotlineNumberRequestOutboundRangeList : public Darabonba::Model {
public:
  shared_ptr<long> departmentId{};
  shared_ptr<vector<long>> groupIdList{};

  ResetHotlineNumberRequestOutboundRangeList() {}

  explicit ResetHotlineNumberRequestOutboundRangeList(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (groupIdList) {
      res["GroupIdList"] = boost::any(*groupIdList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("GroupIdList") != m.end() && !m["GroupIdList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["GroupIdList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["GroupIdList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      groupIdList = make_shared<vector<long>>(toVec1);
    }
  }


  virtual ~ResetHotlineNumberRequestOutboundRangeList() = default;
};
class ResetHotlineNumberRequest : public Darabonba::Model {
public:
  shared_ptr<string> description{};
  shared_ptr<bool> enableInbound{};
  shared_ptr<bool> enableInboundEvaluation{};
  shared_ptr<bool> enableOutbound{};
  shared_ptr<bool> enableOutboundEvaluation{};
  shared_ptr<long> evaluationLevel{};
  shared_ptr<string> hotlineNumber{};
  shared_ptr<long> inboundFlowId{};
  shared_ptr<string> instanceId{};
  shared_ptr<bool> outboundAllDepart{};
  shared_ptr<vector<ResetHotlineNumberRequestOutboundRangeList>> outboundRangeList{};

  ResetHotlineNumberRequest() {}

  explicit ResetHotlineNumberRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (enableInbound) {
      res["EnableInbound"] = boost::any(*enableInbound);
    }
    if (enableInboundEvaluation) {
      res["EnableInboundEvaluation"] = boost::any(*enableInboundEvaluation);
    }
    if (enableOutbound) {
      res["EnableOutbound"] = boost::any(*enableOutbound);
    }
    if (enableOutboundEvaluation) {
      res["EnableOutboundEvaluation"] = boost::any(*enableOutboundEvaluation);
    }
    if (evaluationLevel) {
      res["EvaluationLevel"] = boost::any(*evaluationLevel);
    }
    if (hotlineNumber) {
      res["HotlineNumber"] = boost::any(*hotlineNumber);
    }
    if (inboundFlowId) {
      res["InboundFlowId"] = boost::any(*inboundFlowId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (outboundAllDepart) {
      res["OutboundAllDepart"] = boost::any(*outboundAllDepart);
    }
    if (outboundRangeList) {
      vector<boost::any> temp1;
      for(auto item1:*outboundRangeList){
        temp1.push_back(boost::any(item1.toMap()));
      }
      res["OutboundRangeList"] = boost::any(temp1);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("EnableInbound") != m.end() && !m["EnableInbound"].empty()) {
      enableInbound = make_shared<bool>(boost::any_cast<bool>(m["EnableInbound"]));
    }
    if (m.find("EnableInboundEvaluation") != m.end() && !m["EnableInboundEvaluation"].empty()) {
      enableInboundEvaluation = make_shared<bool>(boost::any_cast<bool>(m["EnableInboundEvaluation"]));
    }
    if (m.find("EnableOutbound") != m.end() && !m["EnableOutbound"].empty()) {
      enableOutbound = make_shared<bool>(boost::any_cast<bool>(m["EnableOutbound"]));
    }
    if (m.find("EnableOutboundEvaluation") != m.end() && !m["EnableOutboundEvaluation"].empty()) {
      enableOutboundEvaluation = make_shared<bool>(boost::any_cast<bool>(m["EnableOutboundEvaluation"]));
    }
    if (m.find("EvaluationLevel") != m.end() && !m["EvaluationLevel"].empty()) {
      evaluationLevel = make_shared<long>(boost::any_cast<long>(m["EvaluationLevel"]));
    }
    if (m.find("HotlineNumber") != m.end() && !m["HotlineNumber"].empty()) {
      hotlineNumber = make_shared<string>(boost::any_cast<string>(m["HotlineNumber"]));
    }
    if (m.find("InboundFlowId") != m.end() && !m["InboundFlowId"].empty()) {
      inboundFlowId = make_shared<long>(boost::any_cast<long>(m["InboundFlowId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("OutboundAllDepart") != m.end() && !m["OutboundAllDepart"].empty()) {
      outboundAllDepart = make_shared<bool>(boost::any_cast<bool>(m["OutboundAllDepart"]));
    }
    if (m.find("OutboundRangeList") != m.end() && !m["OutboundRangeList"].empty()) {
      if (typeid(vector<boost::any>) == m["OutboundRangeList"].type()) {
        vector<ResetHotlineNumberRequestOutboundRangeList> expect1;
        for(auto item1:boost::any_cast<vector<boost::any>>(m["OutboundRangeList"])){
          if (typeid(map<string, boost::any>) == item1.type()) {
            ResetHotlineNumberRequestOutboundRangeList model2;
            model2.fromMap(boost::any_cast<map<string, boost::any>>(item1));
            expect1.push_back(model2);
          }
        }
        outboundRangeList = make_shared<vector<ResetHotlineNumberRequestOutboundRangeList>>(expect1);
      }
    }
  }


  virtual ~ResetHotlineNumberRequest() = default;
};
class ResetHotlineNumberShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<string> description{};
  shared_ptr<bool> enableInbound{};
  shared_ptr<bool> enableInboundEvaluation{};
  shared_ptr<bool> enableOutbound{};
  shared_ptr<bool> enableOutboundEvaluation{};
  shared_ptr<long> evaluationLevel{};
  shared_ptr<string> hotlineNumber{};
  shared_ptr<long> inboundFlowId{};
  shared_ptr<string> instanceId{};
  shared_ptr<bool> outboundAllDepart{};
  shared_ptr<string> outboundRangeListShrink{};

  ResetHotlineNumberShrinkRequest() {}

  explicit ResetHotlineNumberShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (enableInbound) {
      res["EnableInbound"] = boost::any(*enableInbound);
    }
    if (enableInboundEvaluation) {
      res["EnableInboundEvaluation"] = boost::any(*enableInboundEvaluation);
    }
    if (enableOutbound) {
      res["EnableOutbound"] = boost::any(*enableOutbound);
    }
    if (enableOutboundEvaluation) {
      res["EnableOutboundEvaluation"] = boost::any(*enableOutboundEvaluation);
    }
    if (evaluationLevel) {
      res["EvaluationLevel"] = boost::any(*evaluationLevel);
    }
    if (hotlineNumber) {
      res["HotlineNumber"] = boost::any(*hotlineNumber);
    }
    if (inboundFlowId) {
      res["InboundFlowId"] = boost::any(*inboundFlowId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (outboundAllDepart) {
      res["OutboundAllDepart"] = boost::any(*outboundAllDepart);
    }
    if (outboundRangeListShrink) {
      res["OutboundRangeList"] = boost::any(*outboundRangeListShrink);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("EnableInbound") != m.end() && !m["EnableInbound"].empty()) {
      enableInbound = make_shared<bool>(boost::any_cast<bool>(m["EnableInbound"]));
    }
    if (m.find("EnableInboundEvaluation") != m.end() && !m["EnableInboundEvaluation"].empty()) {
      enableInboundEvaluation = make_shared<bool>(boost::any_cast<bool>(m["EnableInboundEvaluation"]));
    }
    if (m.find("EnableOutbound") != m.end() && !m["EnableOutbound"].empty()) {
      enableOutbound = make_shared<bool>(boost::any_cast<bool>(m["EnableOutbound"]));
    }
    if (m.find("EnableOutboundEvaluation") != m.end() && !m["EnableOutboundEvaluation"].empty()) {
      enableOutboundEvaluation = make_shared<bool>(boost::any_cast<bool>(m["EnableOutboundEvaluation"]));
    }
    if (m.find("EvaluationLevel") != m.end() && !m["EvaluationLevel"].empty()) {
      evaluationLevel = make_shared<long>(boost::any_cast<long>(m["EvaluationLevel"]));
    }
    if (m.find("HotlineNumber") != m.end() && !m["HotlineNumber"].empty()) {
      hotlineNumber = make_shared<string>(boost::any_cast<string>(m["HotlineNumber"]));
    }
    if (m.find("InboundFlowId") != m.end() && !m["InboundFlowId"].empty()) {
      inboundFlowId = make_shared<long>(boost::any_cast<long>(m["InboundFlowId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("OutboundAllDepart") != m.end() && !m["OutboundAllDepart"].empty()) {
      outboundAllDepart = make_shared<bool>(boost::any_cast<bool>(m["OutboundAllDepart"]));
    }
    if (m.find("OutboundRangeList") != m.end() && !m["OutboundRangeList"].empty()) {
      outboundRangeListShrink = make_shared<string>(boost::any_cast<string>(m["OutboundRangeList"]));
    }
  }


  virtual ~ResetHotlineNumberShrinkRequest() = default;
};
class ResetHotlineNumberResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  ResetHotlineNumberResponseBody() {}

  explicit ResetHotlineNumberResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~ResetHotlineNumberResponseBody() = default;
};
class ResetHotlineNumberResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<ResetHotlineNumberResponseBody> body{};

  ResetHotlineNumberResponse() {}

  explicit ResetHotlineNumberResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        ResetHotlineNumberResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<ResetHotlineNumberResponseBody>(model1);
      }
    }
  }


  virtual ~ResetHotlineNumberResponse() = default;
};
class RestartOutboundTaskRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> outboundTaskId{};

  RestartOutboundTaskRequest() {}

  explicit RestartOutboundTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (outboundTaskId) {
      res["OutboundTaskId"] = boost::any(*outboundTaskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("OutboundTaskId") != m.end() && !m["OutboundTaskId"].empty()) {
      outboundTaskId = make_shared<long>(boost::any_cast<long>(m["OutboundTaskId"]));
    }
  }


  virtual ~RestartOutboundTaskRequest() = default;
};
class RestartOutboundTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  RestartOutboundTaskResponseBody() {}

  explicit RestartOutboundTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~RestartOutboundTaskResponseBody() = default;
};
class RestartOutboundTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<RestartOutboundTaskResponseBody> body{};

  RestartOutboundTaskResponse() {}

  explicit RestartOutboundTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        RestartOutboundTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<RestartOutboundTaskResponseBody>(model1);
      }
    }
  }


  virtual ~RestartOutboundTaskResponse() = default;
};
class RobotCallRequest : public Darabonba::Model {
public:
  shared_ptr<string> calledNumber{};
  shared_ptr<string> calledShowNumber{};
  shared_ptr<bool> earlyMediaAsr{};
  shared_ptr<string> outId{};
  shared_ptr<long> ownerId{};
  shared_ptr<string> params{};
  shared_ptr<bool> recordFlag{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> robotId{};

  RobotCallRequest() {}

  explicit RobotCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (calledNumber) {
      res["CalledNumber"] = boost::any(*calledNumber);
    }
    if (calledShowNumber) {
      res["CalledShowNumber"] = boost::any(*calledShowNumber);
    }
    if (earlyMediaAsr) {
      res["EarlyMediaAsr"] = boost::any(*earlyMediaAsr);
    }
    if (outId) {
      res["OutId"] = boost::any(*outId);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (params) {
      res["Params"] = boost::any(*params);
    }
    if (recordFlag) {
      res["RecordFlag"] = boost::any(*recordFlag);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (robotId) {
      res["RobotId"] = boost::any(*robotId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CalledNumber") != m.end() && !m["CalledNumber"].empty()) {
      calledNumber = make_shared<string>(boost::any_cast<string>(m["CalledNumber"]));
    }
    if (m.find("CalledShowNumber") != m.end() && !m["CalledShowNumber"].empty()) {
      calledShowNumber = make_shared<string>(boost::any_cast<string>(m["CalledShowNumber"]));
    }
    if (m.find("EarlyMediaAsr") != m.end() && !m["EarlyMediaAsr"].empty()) {
      earlyMediaAsr = make_shared<bool>(boost::any_cast<bool>(m["EarlyMediaAsr"]));
    }
    if (m.find("OutId") != m.end() && !m["OutId"].empty()) {
      outId = make_shared<string>(boost::any_cast<string>(m["OutId"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("Params") != m.end() && !m["Params"].empty()) {
      params = make_shared<string>(boost::any_cast<string>(m["Params"]));
    }
    if (m.find("RecordFlag") != m.end() && !m["RecordFlag"].empty()) {
      recordFlag = make_shared<bool>(boost::any_cast<bool>(m["RecordFlag"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("RobotId") != m.end() && !m["RobotId"].empty()) {
      robotId = make_shared<long>(boost::any_cast<long>(m["RobotId"]));
    }
  }


  virtual ~RobotCallRequest() = default;
};
class RobotCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};

  RobotCallResponseBody() {}

  explicit RobotCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~RobotCallResponseBody() = default;
};
class RobotCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<RobotCallResponseBody> body{};

  RobotCallResponse() {}

  explicit RobotCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        RobotCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<RobotCallResponseBody>(model1);
      }
    }
  }


  virtual ~RobotCallResponse() = default;
};
class SendCcoSmartCallRequest : public Darabonba::Model {
public:
  shared_ptr<bool> actionCodeBreak{};
  shared_ptr<long> actionCodeTimeBreak{};
  shared_ptr<string> asrAlsAmId{};
  shared_ptr<string> asrBaseId{};
  shared_ptr<string> asrModelId{};
  shared_ptr<string> asrVocabularyId{};
  shared_ptr<string> backgroundFileCode{};
  shared_ptr<long> backgroundSpeed{};
  shared_ptr<long> backgroundVolume{};
  shared_ptr<string> calledNumber{};
  shared_ptr<string> calledShowNumber{};
  shared_ptr<string> dynamicId{};
  shared_ptr<bool> earlyMediaAsr{};
  shared_ptr<bool> enableITN{};
  shared_ptr<long> muteTime{};
  shared_ptr<string> outId{};
  shared_ptr<long> ownerId{};
  shared_ptr<long> pauseTime{};
  shared_ptr<long> playTimes{};
  shared_ptr<string> prodCode{};
  shared_ptr<bool> recordFlag{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> sessionTimeout{};
  shared_ptr<long> speed{};
  shared_ptr<bool> ttsConf{};
  shared_ptr<long> ttsSpeed{};
  shared_ptr<string> ttsStyle{};
  shared_ptr<long> ttsVolume{};
  shared_ptr<string> voiceCode{};
  shared_ptr<string> voiceCodeParam{};
  shared_ptr<long> volume{};

  SendCcoSmartCallRequest() {}

  explicit SendCcoSmartCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (actionCodeBreak) {
      res["ActionCodeBreak"] = boost::any(*actionCodeBreak);
    }
    if (actionCodeTimeBreak) {
      res["ActionCodeTimeBreak"] = boost::any(*actionCodeTimeBreak);
    }
    if (asrAlsAmId) {
      res["AsrAlsAmId"] = boost::any(*asrAlsAmId);
    }
    if (asrBaseId) {
      res["AsrBaseId"] = boost::any(*asrBaseId);
    }
    if (asrModelId) {
      res["AsrModelId"] = boost::any(*asrModelId);
    }
    if (asrVocabularyId) {
      res["AsrVocabularyId"] = boost::any(*asrVocabularyId);
    }
    if (backgroundFileCode) {
      res["BackgroundFileCode"] = boost::any(*backgroundFileCode);
    }
    if (backgroundSpeed) {
      res["BackgroundSpeed"] = boost::any(*backgroundSpeed);
    }
    if (backgroundVolume) {
      res["BackgroundVolume"] = boost::any(*backgroundVolume);
    }
    if (calledNumber) {
      res["CalledNumber"] = boost::any(*calledNumber);
    }
    if (calledShowNumber) {
      res["CalledShowNumber"] = boost::any(*calledShowNumber);
    }
    if (dynamicId) {
      res["DynamicId"] = boost::any(*dynamicId);
    }
    if (earlyMediaAsr) {
      res["EarlyMediaAsr"] = boost::any(*earlyMediaAsr);
    }
    if (enableITN) {
      res["EnableITN"] = boost::any(*enableITN);
    }
    if (muteTime) {
      res["MuteTime"] = boost::any(*muteTime);
    }
    if (outId) {
      res["OutId"] = boost::any(*outId);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (pauseTime) {
      res["PauseTime"] = boost::any(*pauseTime);
    }
    if (playTimes) {
      res["PlayTimes"] = boost::any(*playTimes);
    }
    if (prodCode) {
      res["ProdCode"] = boost::any(*prodCode);
    }
    if (recordFlag) {
      res["RecordFlag"] = boost::any(*recordFlag);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (sessionTimeout) {
      res["SessionTimeout"] = boost::any(*sessionTimeout);
    }
    if (speed) {
      res["Speed"] = boost::any(*speed);
    }
    if (ttsConf) {
      res["TtsConf"] = boost::any(*ttsConf);
    }
    if (ttsSpeed) {
      res["TtsSpeed"] = boost::any(*ttsSpeed);
    }
    if (ttsStyle) {
      res["TtsStyle"] = boost::any(*ttsStyle);
    }
    if (ttsVolume) {
      res["TtsVolume"] = boost::any(*ttsVolume);
    }
    if (voiceCode) {
      res["VoiceCode"] = boost::any(*voiceCode);
    }
    if (voiceCodeParam) {
      res["VoiceCodeParam"] = boost::any(*voiceCodeParam);
    }
    if (volume) {
      res["Volume"] = boost::any(*volume);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ActionCodeBreak") != m.end() && !m["ActionCodeBreak"].empty()) {
      actionCodeBreak = make_shared<bool>(boost::any_cast<bool>(m["ActionCodeBreak"]));
    }
    if (m.find("ActionCodeTimeBreak") != m.end() && !m["ActionCodeTimeBreak"].empty()) {
      actionCodeTimeBreak = make_shared<long>(boost::any_cast<long>(m["ActionCodeTimeBreak"]));
    }
    if (m.find("AsrAlsAmId") != m.end() && !m["AsrAlsAmId"].empty()) {
      asrAlsAmId = make_shared<string>(boost::any_cast<string>(m["AsrAlsAmId"]));
    }
    if (m.find("AsrBaseId") != m.end() && !m["AsrBaseId"].empty()) {
      asrBaseId = make_shared<string>(boost::any_cast<string>(m["AsrBaseId"]));
    }
    if (m.find("AsrModelId") != m.end() && !m["AsrModelId"].empty()) {
      asrModelId = make_shared<string>(boost::any_cast<string>(m["AsrModelId"]));
    }
    if (m.find("AsrVocabularyId") != m.end() && !m["AsrVocabularyId"].empty()) {
      asrVocabularyId = make_shared<string>(boost::any_cast<string>(m["AsrVocabularyId"]));
    }
    if (m.find("BackgroundFileCode") != m.end() && !m["BackgroundFileCode"].empty()) {
      backgroundFileCode = make_shared<string>(boost::any_cast<string>(m["BackgroundFileCode"]));
    }
    if (m.find("BackgroundSpeed") != m.end() && !m["BackgroundSpeed"].empty()) {
      backgroundSpeed = make_shared<long>(boost::any_cast<long>(m["BackgroundSpeed"]));
    }
    if (m.find("BackgroundVolume") != m.end() && !m["BackgroundVolume"].empty()) {
      backgroundVolume = make_shared<long>(boost::any_cast<long>(m["BackgroundVolume"]));
    }
    if (m.find("CalledNumber") != m.end() && !m["CalledNumber"].empty()) {
      calledNumber = make_shared<string>(boost::any_cast<string>(m["CalledNumber"]));
    }
    if (m.find("CalledShowNumber") != m.end() && !m["CalledShowNumber"].empty()) {
      calledShowNumber = make_shared<string>(boost::any_cast<string>(m["CalledShowNumber"]));
    }
    if (m.find("DynamicId") != m.end() && !m["DynamicId"].empty()) {
      dynamicId = make_shared<string>(boost::any_cast<string>(m["DynamicId"]));
    }
    if (m.find("EarlyMediaAsr") != m.end() && !m["EarlyMediaAsr"].empty()) {
      earlyMediaAsr = make_shared<bool>(boost::any_cast<bool>(m["EarlyMediaAsr"]));
    }
    if (m.find("EnableITN") != m.end() && !m["EnableITN"].empty()) {
      enableITN = make_shared<bool>(boost::any_cast<bool>(m["EnableITN"]));
    }
    if (m.find("MuteTime") != m.end() && !m["MuteTime"].empty()) {
      muteTime = make_shared<long>(boost::any_cast<long>(m["MuteTime"]));
    }
    if (m.find("OutId") != m.end() && !m["OutId"].empty()) {
      outId = make_shared<string>(boost::any_cast<string>(m["OutId"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("PauseTime") != m.end() && !m["PauseTime"].empty()) {
      pauseTime = make_shared<long>(boost::any_cast<long>(m["PauseTime"]));
    }
    if (m.find("PlayTimes") != m.end() && !m["PlayTimes"].empty()) {
      playTimes = make_shared<long>(boost::any_cast<long>(m["PlayTimes"]));
    }
    if (m.find("ProdCode") != m.end() && !m["ProdCode"].empty()) {
      prodCode = make_shared<string>(boost::any_cast<string>(m["ProdCode"]));
    }
    if (m.find("RecordFlag") != m.end() && !m["RecordFlag"].empty()) {
      recordFlag = make_shared<bool>(boost::any_cast<bool>(m["RecordFlag"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("SessionTimeout") != m.end() && !m["SessionTimeout"].empty()) {
      sessionTimeout = make_shared<long>(boost::any_cast<long>(m["SessionTimeout"]));
    }
    if (m.find("Speed") != m.end() && !m["Speed"].empty()) {
      speed = make_shared<long>(boost::any_cast<long>(m["Speed"]));
    }
    if (m.find("TtsConf") != m.end() && !m["TtsConf"].empty()) {
      ttsConf = make_shared<bool>(boost::any_cast<bool>(m["TtsConf"]));
    }
    if (m.find("TtsSpeed") != m.end() && !m["TtsSpeed"].empty()) {
      ttsSpeed = make_shared<long>(boost::any_cast<long>(m["TtsSpeed"]));
    }
    if (m.find("TtsStyle") != m.end() && !m["TtsStyle"].empty()) {
      ttsStyle = make_shared<string>(boost::any_cast<string>(m["TtsStyle"]));
    }
    if (m.find("TtsVolume") != m.end() && !m["TtsVolume"].empty()) {
      ttsVolume = make_shared<long>(boost::any_cast<long>(m["TtsVolume"]));
    }
    if (m.find("VoiceCode") != m.end() && !m["VoiceCode"].empty()) {
      voiceCode = make_shared<string>(boost::any_cast<string>(m["VoiceCode"]));
    }
    if (m.find("VoiceCodeParam") != m.end() && !m["VoiceCodeParam"].empty()) {
      voiceCodeParam = make_shared<string>(boost::any_cast<string>(m["VoiceCodeParam"]));
    }
    if (m.find("Volume") != m.end() && !m["Volume"].empty()) {
      volume = make_shared<long>(boost::any_cast<long>(m["Volume"]));
    }
  }


  virtual ~SendCcoSmartCallRequest() = default;
};
class SendCcoSmartCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};

  SendCcoSmartCallResponseBody() {}

  explicit SendCcoSmartCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~SendCcoSmartCallResponseBody() = default;
};
class SendCcoSmartCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<SendCcoSmartCallResponseBody> body{};

  SendCcoSmartCallResponse() {}

  explicit SendCcoSmartCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        SendCcoSmartCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<SendCcoSmartCallResponseBody>(model1);
      }
    }
  }


  virtual ~SendCcoSmartCallResponse() = default;
};
class SendCcoSmartCallOperateRequest : public Darabonba::Model {
public:
  shared_ptr<string> callId{};
  shared_ptr<string> command{};
  shared_ptr<long> ownerId{};
  shared_ptr<string> param{};
  shared_ptr<string> prodCode{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};

  SendCcoSmartCallOperateRequest() {}

  explicit SendCcoSmartCallOperateRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (command) {
      res["Command"] = boost::any(*command);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (param) {
      res["Param"] = boost::any(*param);
    }
    if (prodCode) {
      res["ProdCode"] = boost::any(*prodCode);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("Command") != m.end() && !m["Command"].empty()) {
      command = make_shared<string>(boost::any_cast<string>(m["Command"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("Param") != m.end() && !m["Param"].empty()) {
      param = make_shared<string>(boost::any_cast<string>(m["Param"]));
    }
    if (m.find("ProdCode") != m.end() && !m["ProdCode"].empty()) {
      prodCode = make_shared<string>(boost::any_cast<string>(m["ProdCode"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
  }


  virtual ~SendCcoSmartCallOperateRequest() = default;
};
class SendCcoSmartCallOperateResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};

  SendCcoSmartCallOperateResponseBody() {}

  explicit SendCcoSmartCallOperateResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~SendCcoSmartCallOperateResponseBody() = default;
};
class SendCcoSmartCallOperateResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<SendCcoSmartCallOperateResponseBody> body{};

  SendCcoSmartCallOperateResponse() {}

  explicit SendCcoSmartCallOperateResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        SendCcoSmartCallOperateResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<SendCcoSmartCallOperateResponseBody>(model1);
      }
    }
  }


  virtual ~SendCcoSmartCallOperateResponse() = default;
};
class SendHotlineHeartBeatRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> token{};

  SendHotlineHeartBeatRequest() {}

  explicit SendHotlineHeartBeatRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (token) {
      res["Token"] = boost::any(*token);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("Token") != m.end() && !m["Token"].empty()) {
      token = make_shared<string>(boost::any_cast<string>(m["Token"]));
    }
  }


  virtual ~SendHotlineHeartBeatRequest() = default;
};
class SendHotlineHeartBeatResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  SendHotlineHeartBeatResponseBody() {}

  explicit SendHotlineHeartBeatResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~SendHotlineHeartBeatResponseBody() = default;
};
class SendHotlineHeartBeatResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<SendHotlineHeartBeatResponseBody> body{};

  SendHotlineHeartBeatResponse() {}

  explicit SendHotlineHeartBeatResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        SendHotlineHeartBeatResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<SendHotlineHeartBeatResponseBody>(model1);
      }
    }
  }


  virtual ~SendHotlineHeartBeatResponse() = default;
};
class StartAiOutboundTaskRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> taskId{};

  StartAiOutboundTaskRequest() {}

  explicit StartAiOutboundTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~StartAiOutboundTaskRequest() = default;
};
class StartAiOutboundTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  StartAiOutboundTaskResponseBody() {}

  explicit StartAiOutboundTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~StartAiOutboundTaskResponseBody() = default;
};
class StartAiOutboundTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<StartAiOutboundTaskResponseBody> body{};

  StartAiOutboundTaskResponse() {}

  explicit StartAiOutboundTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        StartAiOutboundTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<StartAiOutboundTaskResponseBody>(model1);
      }
    }
  }


  virtual ~StartAiOutboundTaskResponse() = default;
};
class StartCallRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> callee{};
  shared_ptr<string> caller{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  StartCallRequest() {}

  explicit StartCallRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (callee) {
      res["Callee"] = boost::any(*callee);
    }
    if (caller) {
      res["Caller"] = boost::any(*caller);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("Callee") != m.end() && !m["Callee"].empty()) {
      callee = make_shared<string>(boost::any_cast<string>(m["Callee"]));
    }
    if (m.find("Caller") != m.end() && !m["Caller"].empty()) {
      caller = make_shared<string>(boost::any_cast<string>(m["Caller"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~StartCallRequest() = default;
};
class StartCallResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  StartCallResponseBody() {}

  explicit StartCallResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~StartCallResponseBody() = default;
};
class StartCallResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<StartCallResponseBody> body{};

  StartCallResponse() {}

  explicit StartCallResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        StartCallResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<StartCallResponseBody>(model1);
      }
    }
  }


  virtual ~StartCallResponse() = default;
};
class StartCallV2Request : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> callee{};
  shared_ptr<string> caller{};
  shared_ptr<long> callerType{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  StartCallV2Request() {}

  explicit StartCallV2Request(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (callee) {
      res["Callee"] = boost::any(*callee);
    }
    if (caller) {
      res["Caller"] = boost::any(*caller);
    }
    if (callerType) {
      res["CallerType"] = boost::any(*callerType);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("Callee") != m.end() && !m["Callee"].empty()) {
      callee = make_shared<string>(boost::any_cast<string>(m["Callee"]));
    }
    if (m.find("Caller") != m.end() && !m["Caller"].empty()) {
      caller = make_shared<string>(boost::any_cast<string>(m["Caller"]));
    }
    if (m.find("CallerType") != m.end() && !m["CallerType"].empty()) {
      callerType = make_shared<long>(boost::any_cast<long>(m["CallerType"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~StartCallV2Request() = default;
};
class StartCallV2ResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  StartCallV2ResponseBody() {}

  explicit StartCallV2ResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~StartCallV2ResponseBody() = default;
};
class StartCallV2Response : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<StartCallV2ResponseBody> body{};

  StartCallV2Response() {}

  explicit StartCallV2Response(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        StartCallV2ResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<StartCallV2ResponseBody>(model1);
      }
    }
  }


  virtual ~StartCallV2Response() = default;
};
class StartChatWorkRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> instanceId{};

  StartChatWorkRequest() {}

  explicit StartChatWorkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~StartChatWorkRequest() = default;
};
class StartChatWorkResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  StartChatWorkResponseBody() {}

  explicit StartChatWorkResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~StartChatWorkResponseBody() = default;
};
class StartChatWorkResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<StartChatWorkResponseBody> body{};

  StartChatWorkResponse() {}

  explicit StartChatWorkResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        StartChatWorkResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<StartChatWorkResponseBody>(model1);
      }
    }
  }


  virtual ~StartChatWorkResponse() = default;
};
class StartHotlineServiceRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};

  StartHotlineServiceRequest() {}

  explicit StartHotlineServiceRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~StartHotlineServiceRequest() = default;
};
class StartHotlineServiceResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  StartHotlineServiceResponseBody() {}

  explicit StartHotlineServiceResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~StartHotlineServiceResponseBody() = default;
};
class StartHotlineServiceResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<StartHotlineServiceResponseBody> body{};

  StartHotlineServiceResponse() {}

  explicit StartHotlineServiceResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        StartHotlineServiceResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<StartHotlineServiceResponseBody>(model1);
      }
    }
  }


  virtual ~StartHotlineServiceResponse() = default;
};
class StartMicroOutboundRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountId{};
  shared_ptr<string> accountType{};
  shared_ptr<string> appName{};
  shared_ptr<string> calledNumber{};
  shared_ptr<string> callingNumber{};
  shared_ptr<string> commandCode{};
  shared_ptr<string> extInfo{};
  shared_ptr<long> ownerId{};
  shared_ptr<string> prodCode{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};

  StartMicroOutboundRequest() {}

  explicit StartMicroOutboundRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountId) {
      res["AccountId"] = boost::any(*accountId);
    }
    if (accountType) {
      res["AccountType"] = boost::any(*accountType);
    }
    if (appName) {
      res["AppName"] = boost::any(*appName);
    }
    if (calledNumber) {
      res["CalledNumber"] = boost::any(*calledNumber);
    }
    if (callingNumber) {
      res["CallingNumber"] = boost::any(*callingNumber);
    }
    if (commandCode) {
      res["CommandCode"] = boost::any(*commandCode);
    }
    if (extInfo) {
      res["ExtInfo"] = boost::any(*extInfo);
    }
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (prodCode) {
      res["ProdCode"] = boost::any(*prodCode);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountId") != m.end() && !m["AccountId"].empty()) {
      accountId = make_shared<string>(boost::any_cast<string>(m["AccountId"]));
    }
    if (m.find("AccountType") != m.end() && !m["AccountType"].empty()) {
      accountType = make_shared<string>(boost::any_cast<string>(m["AccountType"]));
    }
    if (m.find("AppName") != m.end() && !m["AppName"].empty()) {
      appName = make_shared<string>(boost::any_cast<string>(m["AppName"]));
    }
    if (m.find("CalledNumber") != m.end() && !m["CalledNumber"].empty()) {
      calledNumber = make_shared<string>(boost::any_cast<string>(m["CalledNumber"]));
    }
    if (m.find("CallingNumber") != m.end() && !m["CallingNumber"].empty()) {
      callingNumber = make_shared<string>(boost::any_cast<string>(m["CallingNumber"]));
    }
    if (m.find("CommandCode") != m.end() && !m["CommandCode"].empty()) {
      commandCode = make_shared<string>(boost::any_cast<string>(m["CommandCode"]));
    }
    if (m.find("ExtInfo") != m.end() && !m["ExtInfo"].empty()) {
      extInfo = make_shared<string>(boost::any_cast<string>(m["ExtInfo"]));
    }
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ProdCode") != m.end() && !m["ProdCode"].empty()) {
      prodCode = make_shared<string>(boost::any_cast<string>(m["ProdCode"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
  }


  virtual ~StartMicroOutboundRequest() = default;
};
class StartMicroOutboundResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> customerInfo{};
  shared_ptr<string> invokeCmdId{};
  shared_ptr<string> invokeCreateTime{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};

  StartMicroOutboundResponseBody() {}

  explicit StartMicroOutboundResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (customerInfo) {
      res["CustomerInfo"] = boost::any(*customerInfo);
    }
    if (invokeCmdId) {
      res["InvokeCmdId"] = boost::any(*invokeCmdId);
    }
    if (invokeCreateTime) {
      res["InvokeCreateTime"] = boost::any(*invokeCreateTime);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("CustomerInfo") != m.end() && !m["CustomerInfo"].empty()) {
      customerInfo = make_shared<string>(boost::any_cast<string>(m["CustomerInfo"]));
    }
    if (m.find("InvokeCmdId") != m.end() && !m["InvokeCmdId"].empty()) {
      invokeCmdId = make_shared<string>(boost::any_cast<string>(m["InvokeCmdId"]));
    }
    if (m.find("InvokeCreateTime") != m.end() && !m["InvokeCreateTime"].empty()) {
      invokeCreateTime = make_shared<string>(boost::any_cast<string>(m["InvokeCreateTime"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
  }


  virtual ~StartMicroOutboundResponseBody() = default;
};
class StartMicroOutboundResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<StartMicroOutboundResponseBody> body{};

  StartMicroOutboundResponse() {}

  explicit StartMicroOutboundResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        StartMicroOutboundResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<StartMicroOutboundResponseBody>(model1);
      }
    }
  }


  virtual ~StartMicroOutboundResponse() = default;
};
class StartTaskRequest : public Darabonba::Model {
public:
  shared_ptr<long> ownerId{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<bool> startNow{};
  shared_ptr<long> taskId{};

  StartTaskRequest() {}

  explicit StartTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (startNow) {
      res["StartNow"] = boost::any(*startNow);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("StartNow") != m.end() && !m["StartNow"].empty()) {
      startNow = make_shared<bool>(boost::any_cast<bool>(m["StartNow"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~StartTaskRequest() = default;
};
class StartTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<bool> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  StartTaskResponseBody() {}

  explicit StartTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<bool>(boost::any_cast<bool>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~StartTaskResponseBody() = default;
};
class StartTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<StartTaskResponseBody> body{};

  StartTaskResponse() {}

  explicit StartTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        StartTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<StartTaskResponseBody>(model1);
      }
    }
  }


  virtual ~StartTaskResponse() = default;
};
class StopAiOutboundTaskRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> taskId{};

  StopAiOutboundTaskRequest() {}

  explicit StopAiOutboundTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~StopAiOutboundTaskRequest() = default;
};
class StopAiOutboundTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  StopAiOutboundTaskResponseBody() {}

  explicit StopAiOutboundTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~StopAiOutboundTaskResponseBody() = default;
};
class StopAiOutboundTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<StopAiOutboundTaskResponseBody> body{};

  StopAiOutboundTaskResponse() {}

  explicit StopAiOutboundTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        StopAiOutboundTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<StopAiOutboundTaskResponseBody>(model1);
      }
    }
  }


  virtual ~StopAiOutboundTaskResponse() = default;
};
class StopTaskRequest : public Darabonba::Model {
public:
  shared_ptr<long> ownerId{};
  shared_ptr<string> resourceOwnerAccount{};
  shared_ptr<long> resourceOwnerId{};
  shared_ptr<long> taskId{};

  StopTaskRequest() {}

  explicit StopTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (ownerId) {
      res["OwnerId"] = boost::any(*ownerId);
    }
    if (resourceOwnerAccount) {
      res["ResourceOwnerAccount"] = boost::any(*resourceOwnerAccount);
    }
    if (resourceOwnerId) {
      res["ResourceOwnerId"] = boost::any(*resourceOwnerId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("OwnerId") != m.end() && !m["OwnerId"].empty()) {
      ownerId = make_shared<long>(boost::any_cast<long>(m["OwnerId"]));
    }
    if (m.find("ResourceOwnerAccount") != m.end() && !m["ResourceOwnerAccount"].empty()) {
      resourceOwnerAccount = make_shared<string>(boost::any_cast<string>(m["ResourceOwnerAccount"]));
    }
    if (m.find("ResourceOwnerId") != m.end() && !m["ResourceOwnerId"].empty()) {
      resourceOwnerId = make_shared<long>(boost::any_cast<long>(m["ResourceOwnerId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~StopTaskRequest() = default;
};
class StopTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<bool> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  StopTaskResponseBody() {}

  explicit StopTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<bool>(boost::any_cast<bool>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~StopTaskResponseBody() = default;
};
class StopTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<StopTaskResponseBody> body{};

  StopTaskResponse() {}

  explicit StopTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        StopTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<StopTaskResponseBody>(model1);
      }
    }
  }


  virtual ~StopTaskResponse() = default;
};
class SuspendHotlineServiceRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> type{};

  SuspendHotlineServiceRequest() {}

  explicit SuspendHotlineServiceRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<long>(boost::any_cast<long>(m["Type"]));
    }
  }


  virtual ~SuspendHotlineServiceRequest() = default;
};
class SuspendHotlineServiceResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  SuspendHotlineServiceResponseBody() {}

  explicit SuspendHotlineServiceResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~SuspendHotlineServiceResponseBody() = default;
};
class SuspendHotlineServiceResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<SuspendHotlineServiceResponseBody> body{};

  SuspendHotlineServiceResponse() {}

  explicit SuspendHotlineServiceResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        SuspendHotlineServiceResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<SuspendHotlineServiceResponseBody>(model1);
      }
    }
  }


  virtual ~SuspendHotlineServiceResponse() = default;
};
class SuspendOutboundTaskRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> outboundTaskId{};

  SuspendOutboundTaskRequest() {}

  explicit SuspendOutboundTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (outboundTaskId) {
      res["OutboundTaskId"] = boost::any(*outboundTaskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("OutboundTaskId") != m.end() && !m["OutboundTaskId"].empty()) {
      outboundTaskId = make_shared<long>(boost::any_cast<long>(m["OutboundTaskId"]));
    }
  }


  virtual ~SuspendOutboundTaskRequest() = default;
};
class SuspendOutboundTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  SuspendOutboundTaskResponseBody() {}

  explicit SuspendOutboundTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~SuspendOutboundTaskResponseBody() = default;
};
class SuspendOutboundTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<SuspendOutboundTaskResponseBody> body{};

  SuspendOutboundTaskResponse() {}

  explicit SuspendOutboundTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        SuspendOutboundTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<SuspendOutboundTaskResponseBody>(model1);
      }
    }
  }


  virtual ~SuspendOutboundTaskResponse() = default;
};
class TerminateAiOutboundTaskRequest : public Darabonba::Model {
public:
  shared_ptr<string> instanceId{};
  shared_ptr<long> taskId{};

  TerminateAiOutboundTaskRequest() {}

  explicit TerminateAiOutboundTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~TerminateAiOutboundTaskRequest() = default;
};
class TerminateAiOutboundTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  TerminateAiOutboundTaskResponseBody() {}

  explicit TerminateAiOutboundTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~TerminateAiOutboundTaskResponseBody() = default;
};
class TerminateAiOutboundTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<TerminateAiOutboundTaskResponseBody> body{};

  TerminateAiOutboundTaskResponse() {}

  explicit TerminateAiOutboundTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        TerminateAiOutboundTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<TerminateAiOutboundTaskResponseBody>(model1);
      }
    }
  }


  virtual ~TerminateAiOutboundTaskResponse() = default;
};
class TransferCallToSkillGroupRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> callId{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> connectionId{};
  shared_ptr<string> holdConnectionId{};
  shared_ptr<string> instanceId{};
  shared_ptr<bool> isSingleTransfer{};
  shared_ptr<string> jobId{};
  shared_ptr<long> skillGroupId{};
  shared_ptr<long> type{};

  TransferCallToSkillGroupRequest() {}

  explicit TransferCallToSkillGroupRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (callId) {
      res["CallId"] = boost::any(*callId);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (connectionId) {
      res["ConnectionId"] = boost::any(*connectionId);
    }
    if (holdConnectionId) {
      res["HoldConnectionId"] = boost::any(*holdConnectionId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (isSingleTransfer) {
      res["IsSingleTransfer"] = boost::any(*isSingleTransfer);
    }
    if (jobId) {
      res["JobId"] = boost::any(*jobId);
    }
    if (skillGroupId) {
      res["SkillGroupId"] = boost::any(*skillGroupId);
    }
    if (type) {
      res["Type"] = boost::any(*type);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("CallId") != m.end() && !m["CallId"].empty()) {
      callId = make_shared<string>(boost::any_cast<string>(m["CallId"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("ConnectionId") != m.end() && !m["ConnectionId"].empty()) {
      connectionId = make_shared<string>(boost::any_cast<string>(m["ConnectionId"]));
    }
    if (m.find("HoldConnectionId") != m.end() && !m["HoldConnectionId"].empty()) {
      holdConnectionId = make_shared<string>(boost::any_cast<string>(m["HoldConnectionId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("IsSingleTransfer") != m.end() && !m["IsSingleTransfer"].empty()) {
      isSingleTransfer = make_shared<bool>(boost::any_cast<bool>(m["IsSingleTransfer"]));
    }
    if (m.find("JobId") != m.end() && !m["JobId"].empty()) {
      jobId = make_shared<string>(boost::any_cast<string>(m["JobId"]));
    }
    if (m.find("SkillGroupId") != m.end() && !m["SkillGroupId"].empty()) {
      skillGroupId = make_shared<long>(boost::any_cast<long>(m["SkillGroupId"]));
    }
    if (m.find("Type") != m.end() && !m["Type"].empty()) {
      type = make_shared<long>(boost::any_cast<long>(m["Type"]));
    }
  }


  virtual ~TransferCallToSkillGroupRequest() = default;
};
class TransferCallToSkillGroupResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  TransferCallToSkillGroupResponseBody() {}

  explicit TransferCallToSkillGroupResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~TransferCallToSkillGroupResponseBody() = default;
};
class TransferCallToSkillGroupResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<TransferCallToSkillGroupResponseBody> body{};

  TransferCallToSkillGroupResponse() {}

  explicit TransferCallToSkillGroupResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        TransferCallToSkillGroupResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<TransferCallToSkillGroupResponseBody>(model1);
      }
    }
  }


  virtual ~TransferCallToSkillGroupResponse() = default;
};
class UpdateAgentRequest : public Darabonba::Model {
public:
  shared_ptr<string> accountName{};
  shared_ptr<string> clientToken{};
  shared_ptr<string> displayName{};
  shared_ptr<string> instanceId{};
  shared_ptr<vector<long>> skillGroupId{};
  shared_ptr<vector<long>> skillGroupIdList{};

  UpdateAgentRequest() {}

  explicit UpdateAgentRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (accountName) {
      res["AccountName"] = boost::any(*accountName);
    }
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (displayName) {
      res["DisplayName"] = boost::any(*displayName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (skillGroupId) {
      res["SkillGroupId"] = boost::any(*skillGroupId);
    }
    if (skillGroupIdList) {
      res["SkillGroupIdList"] = boost::any(*skillGroupIdList);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("AccountName") != m.end() && !m["AccountName"].empty()) {
      accountName = make_shared<string>(boost::any_cast<string>(m["AccountName"]));
    }
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("DisplayName") != m.end() && !m["DisplayName"].empty()) {
      displayName = make_shared<string>(boost::any_cast<string>(m["DisplayName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("SkillGroupId") != m.end() && !m["SkillGroupId"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["SkillGroupId"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["SkillGroupId"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      skillGroupId = make_shared<vector<long>>(toVec1);
    }
    if (m.find("SkillGroupIdList") != m.end() && !m["SkillGroupIdList"].empty()) {
      vector<long> toVec1;
      if (typeid(vector<boost::any>) == m["SkillGroupIdList"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["SkillGroupIdList"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<long>(item));
        }
      }
      skillGroupIdList = make_shared<vector<long>>(toVec1);
    }
  }


  virtual ~UpdateAgentRequest() = default;
};
class UpdateAgentResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  UpdateAgentResponseBody() {}

  explicit UpdateAgentResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~UpdateAgentResponseBody() = default;
};
class UpdateAgentResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<UpdateAgentResponseBody> body{};

  UpdateAgentResponse() {}

  explicit UpdateAgentResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        UpdateAgentResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<UpdateAgentResponseBody>(model1);
      }
    }
  }


  virtual ~UpdateAgentResponse() = default;
};
class UpdateAiOutboundTaskRequestRecallRule : public Darabonba::Model {
public:
  shared_ptr<long> count{};
  shared_ptr<long> interval{};

  UpdateAiOutboundTaskRequestRecallRule() {}

  explicit UpdateAiOutboundTaskRequestRecallRule(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (count) {
      res["Count"] = boost::any(*count);
    }
    if (interval) {
      res["Interval"] = boost::any(*interval);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Count") != m.end() && !m["Count"].empty()) {
      count = make_shared<long>(boost::any_cast<long>(m["Count"]));
    }
    if (m.find("Interval") != m.end() && !m["Interval"].empty()) {
      interval = make_shared<long>(boost::any_cast<long>(m["Interval"]));
    }
  }


  virtual ~UpdateAiOutboundTaskRequestRecallRule() = default;
};
class UpdateAiOutboundTaskRequest : public Darabonba::Model {
public:
  shared_ptr<long> concurrentRate{};
  shared_ptr<string> description{};
  shared_ptr<string> executionTime{};
  shared_ptr<double> forecastCallRate{};
  shared_ptr<long> handlerId{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> name{};
  shared_ptr<long> numRepeated{};
  shared_ptr<vector<string>> outboundNums{};
  shared_ptr<UpdateAiOutboundTaskRequestRecallRule> recallRule{};
  shared_ptr<long> taskId{};

  UpdateAiOutboundTaskRequest() {}

  explicit UpdateAiOutboundTaskRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (concurrentRate) {
      res["ConcurrentRate"] = boost::any(*concurrentRate);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (executionTime) {
      res["ExecutionTime"] = boost::any(*executionTime);
    }
    if (forecastCallRate) {
      res["ForecastCallRate"] = boost::any(*forecastCallRate);
    }
    if (handlerId) {
      res["HandlerId"] = boost::any(*handlerId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (numRepeated) {
      res["NumRepeated"] = boost::any(*numRepeated);
    }
    if (outboundNums) {
      res["OutboundNums"] = boost::any(*outboundNums);
    }
    if (recallRule) {
      res["RecallRule"] = recallRule ? boost::any(recallRule->toMap()) : boost::any(map<string,boost::any>({}));
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ConcurrentRate") != m.end() && !m["ConcurrentRate"].empty()) {
      concurrentRate = make_shared<long>(boost::any_cast<long>(m["ConcurrentRate"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("ExecutionTime") != m.end() && !m["ExecutionTime"].empty()) {
      executionTime = make_shared<string>(boost::any_cast<string>(m["ExecutionTime"]));
    }
    if (m.find("ForecastCallRate") != m.end() && !m["ForecastCallRate"].empty()) {
      forecastCallRate = make_shared<double>(boost::any_cast<double>(m["ForecastCallRate"]));
    }
    if (m.find("HandlerId") != m.end() && !m["HandlerId"].empty()) {
      handlerId = make_shared<long>(boost::any_cast<long>(m["HandlerId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("NumRepeated") != m.end() && !m["NumRepeated"].empty()) {
      numRepeated = make_shared<long>(boost::any_cast<long>(m["NumRepeated"]));
    }
    if (m.find("OutboundNums") != m.end() && !m["OutboundNums"].empty()) {
      vector<string> toVec1;
      if (typeid(vector<boost::any>) == m["OutboundNums"].type()) {
        vector<boost::any> vec1 = boost::any_cast<vector<boost::any>>(m["OutboundNums"]);
        for (auto item:vec1) {
           toVec1.push_back(boost::any_cast<string>(item));
        }
      }
      outboundNums = make_shared<vector<string>>(toVec1);
    }
    if (m.find("RecallRule") != m.end() && !m["RecallRule"].empty()) {
      if (typeid(map<string, boost::any>) == m["RecallRule"].type()) {
        UpdateAiOutboundTaskRequestRecallRule model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["RecallRule"]));
        recallRule = make_shared<UpdateAiOutboundTaskRequestRecallRule>(model1);
      }
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~UpdateAiOutboundTaskRequest() = default;
};
class UpdateAiOutboundTaskShrinkRequest : public Darabonba::Model {
public:
  shared_ptr<long> concurrentRate{};
  shared_ptr<string> description{};
  shared_ptr<string> executionTime{};
  shared_ptr<double> forecastCallRate{};
  shared_ptr<long> handlerId{};
  shared_ptr<string> instanceId{};
  shared_ptr<string> name{};
  shared_ptr<long> numRepeated{};
  shared_ptr<string> outboundNumsShrink{};
  shared_ptr<string> recallRuleShrink{};
  shared_ptr<long> taskId{};

  UpdateAiOutboundTaskShrinkRequest() {}

  explicit UpdateAiOutboundTaskShrinkRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (concurrentRate) {
      res["ConcurrentRate"] = boost::any(*concurrentRate);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (executionTime) {
      res["ExecutionTime"] = boost::any(*executionTime);
    }
    if (forecastCallRate) {
      res["ForecastCallRate"] = boost::any(*forecastCallRate);
    }
    if (handlerId) {
      res["HandlerId"] = boost::any(*handlerId);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (name) {
      res["Name"] = boost::any(*name);
    }
    if (numRepeated) {
      res["NumRepeated"] = boost::any(*numRepeated);
    }
    if (outboundNumsShrink) {
      res["OutboundNums"] = boost::any(*outboundNumsShrink);
    }
    if (recallRuleShrink) {
      res["RecallRule"] = boost::any(*recallRuleShrink);
    }
    if (taskId) {
      res["TaskId"] = boost::any(*taskId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ConcurrentRate") != m.end() && !m["ConcurrentRate"].empty()) {
      concurrentRate = make_shared<long>(boost::any_cast<long>(m["ConcurrentRate"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("ExecutionTime") != m.end() && !m["ExecutionTime"].empty()) {
      executionTime = make_shared<string>(boost::any_cast<string>(m["ExecutionTime"]));
    }
    if (m.find("ForecastCallRate") != m.end() && !m["ForecastCallRate"].empty()) {
      forecastCallRate = make_shared<double>(boost::any_cast<double>(m["ForecastCallRate"]));
    }
    if (m.find("HandlerId") != m.end() && !m["HandlerId"].empty()) {
      handlerId = make_shared<long>(boost::any_cast<long>(m["HandlerId"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("Name") != m.end() && !m["Name"].empty()) {
      name = make_shared<string>(boost::any_cast<string>(m["Name"]));
    }
    if (m.find("NumRepeated") != m.end() && !m["NumRepeated"].empty()) {
      numRepeated = make_shared<long>(boost::any_cast<long>(m["NumRepeated"]));
    }
    if (m.find("OutboundNums") != m.end() && !m["OutboundNums"].empty()) {
      outboundNumsShrink = make_shared<string>(boost::any_cast<string>(m["OutboundNums"]));
    }
    if (m.find("RecallRule") != m.end() && !m["RecallRule"].empty()) {
      recallRuleShrink = make_shared<string>(boost::any_cast<string>(m["RecallRule"]));
    }
    if (m.find("TaskId") != m.end() && !m["TaskId"].empty()) {
      taskId = make_shared<long>(boost::any_cast<long>(m["TaskId"]));
    }
  }


  virtual ~UpdateAiOutboundTaskShrinkRequest() = default;
};
class UpdateAiOutboundTaskResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  UpdateAiOutboundTaskResponseBody() {}

  explicit UpdateAiOutboundTaskResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~UpdateAiOutboundTaskResponseBody() = default;
};
class UpdateAiOutboundTaskResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<UpdateAiOutboundTaskResponseBody> body{};

  UpdateAiOutboundTaskResponse() {}

  explicit UpdateAiOutboundTaskResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        UpdateAiOutboundTaskResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<UpdateAiOutboundTaskResponseBody>(model1);
      }
    }
  }


  virtual ~UpdateAiOutboundTaskResponse() = default;
};
class UpdateDepartmentRequest : public Darabonba::Model {
public:
  shared_ptr<long> departmentId{};
  shared_ptr<string> departmentName{};
  shared_ptr<string> instanceId{};

  UpdateDepartmentRequest() {}

  explicit UpdateDepartmentRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (departmentId) {
      res["DepartmentId"] = boost::any(*departmentId);
    }
    if (departmentName) {
      res["DepartmentName"] = boost::any(*departmentName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("DepartmentId") != m.end() && !m["DepartmentId"].empty()) {
      departmentId = make_shared<long>(boost::any_cast<long>(m["DepartmentId"]));
    }
    if (m.find("DepartmentName") != m.end() && !m["DepartmentName"].empty()) {
      departmentName = make_shared<string>(boost::any_cast<string>(m["DepartmentName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
  }


  virtual ~UpdateDepartmentRequest() = default;
};
class UpdateDepartmentResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<bool> data{};
  shared_ptr<long> httpStatusCode{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  UpdateDepartmentResponseBody() {}

  explicit UpdateDepartmentResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (httpStatusCode) {
      res["HttpStatusCode"] = boost::any(*httpStatusCode);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<bool>(boost::any_cast<bool>(m["Data"]));
    }
    if (m.find("HttpStatusCode") != m.end() && !m["HttpStatusCode"].empty()) {
      httpStatusCode = make_shared<long>(boost::any_cast<long>(m["HttpStatusCode"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~UpdateDepartmentResponseBody() = default;
};
class UpdateDepartmentResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<UpdateDepartmentResponseBody> body{};

  UpdateDepartmentResponse() {}

  explicit UpdateDepartmentResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        UpdateDepartmentResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<UpdateDepartmentResponseBody>(model1);
      }
    }
  }


  virtual ~UpdateDepartmentResponse() = default;
};
class UpdateOuterAccountRequest : public Darabonba::Model {
public:
  shared_ptr<string> avatar{};
  shared_ptr<string> ext{};
  shared_ptr<string> outerAccountId{};
  shared_ptr<string> outerAccountName{};
  shared_ptr<string> outerAccountType{};
  shared_ptr<string> outerDepartmentId{};
  shared_ptr<string> outerDepartmentType{};
  shared_ptr<string> outerGroupIds{};
  shared_ptr<string> outerGroupType{};
  shared_ptr<string> realName{};

  UpdateOuterAccountRequest() {}

  explicit UpdateOuterAccountRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (avatar) {
      res["Avatar"] = boost::any(*avatar);
    }
    if (ext) {
      res["Ext"] = boost::any(*ext);
    }
    if (outerAccountId) {
      res["OuterAccountId"] = boost::any(*outerAccountId);
    }
    if (outerAccountName) {
      res["OuterAccountName"] = boost::any(*outerAccountName);
    }
    if (outerAccountType) {
      res["OuterAccountType"] = boost::any(*outerAccountType);
    }
    if (outerDepartmentId) {
      res["OuterDepartmentId"] = boost::any(*outerDepartmentId);
    }
    if (outerDepartmentType) {
      res["OuterDepartmentType"] = boost::any(*outerDepartmentType);
    }
    if (outerGroupIds) {
      res["OuterGroupIds"] = boost::any(*outerGroupIds);
    }
    if (outerGroupType) {
      res["OuterGroupType"] = boost::any(*outerGroupType);
    }
    if (realName) {
      res["RealName"] = boost::any(*realName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Avatar") != m.end() && !m["Avatar"].empty()) {
      avatar = make_shared<string>(boost::any_cast<string>(m["Avatar"]));
    }
    if (m.find("Ext") != m.end() && !m["Ext"].empty()) {
      ext = make_shared<string>(boost::any_cast<string>(m["Ext"]));
    }
    if (m.find("OuterAccountId") != m.end() && !m["OuterAccountId"].empty()) {
      outerAccountId = make_shared<string>(boost::any_cast<string>(m["OuterAccountId"]));
    }
    if (m.find("OuterAccountName") != m.end() && !m["OuterAccountName"].empty()) {
      outerAccountName = make_shared<string>(boost::any_cast<string>(m["OuterAccountName"]));
    }
    if (m.find("OuterAccountType") != m.end() && !m["OuterAccountType"].empty()) {
      outerAccountType = make_shared<string>(boost::any_cast<string>(m["OuterAccountType"]));
    }
    if (m.find("OuterDepartmentId") != m.end() && !m["OuterDepartmentId"].empty()) {
      outerDepartmentId = make_shared<string>(boost::any_cast<string>(m["OuterDepartmentId"]));
    }
    if (m.find("OuterDepartmentType") != m.end() && !m["OuterDepartmentType"].empty()) {
      outerDepartmentType = make_shared<string>(boost::any_cast<string>(m["OuterDepartmentType"]));
    }
    if (m.find("OuterGroupIds") != m.end() && !m["OuterGroupIds"].empty()) {
      outerGroupIds = make_shared<string>(boost::any_cast<string>(m["OuterGroupIds"]));
    }
    if (m.find("OuterGroupType") != m.end() && !m["OuterGroupType"].empty()) {
      outerGroupType = make_shared<string>(boost::any_cast<string>(m["OuterGroupType"]));
    }
    if (m.find("RealName") != m.end() && !m["RealName"].empty()) {
      realName = make_shared<string>(boost::any_cast<string>(m["RealName"]));
    }
  }


  virtual ~UpdateOuterAccountRequest() = default;
};
class UpdateOuterAccountResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> data{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  UpdateOuterAccountResponseBody() {}

  explicit UpdateOuterAccountResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (data) {
      res["Data"] = boost::any(*data);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Data") != m.end() && !m["Data"].empty()) {
      data = make_shared<string>(boost::any_cast<string>(m["Data"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~UpdateOuterAccountResponseBody() = default;
};
class UpdateOuterAccountResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<UpdateOuterAccountResponseBody> body{};

  UpdateOuterAccountResponse() {}

  explicit UpdateOuterAccountResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        UpdateOuterAccountResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<UpdateOuterAccountResponseBody>(model1);
      }
    }
  }


  virtual ~UpdateOuterAccountResponse() = default;
};
class UpdateSkillGroupRequest : public Darabonba::Model {
public:
  shared_ptr<string> clientToken{};
  shared_ptr<string> description{};
  shared_ptr<string> displayName{};
  shared_ptr<string> instanceId{};
  shared_ptr<long> skillGroupId{};
  shared_ptr<string> skillGroupName{};

  UpdateSkillGroupRequest() {}

  explicit UpdateSkillGroupRequest(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (clientToken) {
      res["ClientToken"] = boost::any(*clientToken);
    }
    if (description) {
      res["Description"] = boost::any(*description);
    }
    if (displayName) {
      res["DisplayName"] = boost::any(*displayName);
    }
    if (instanceId) {
      res["InstanceId"] = boost::any(*instanceId);
    }
    if (skillGroupId) {
      res["SkillGroupId"] = boost::any(*skillGroupId);
    }
    if (skillGroupName) {
      res["SkillGroupName"] = boost::any(*skillGroupName);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("ClientToken") != m.end() && !m["ClientToken"].empty()) {
      clientToken = make_shared<string>(boost::any_cast<string>(m["ClientToken"]));
    }
    if (m.find("Description") != m.end() && !m["Description"].empty()) {
      description = make_shared<string>(boost::any_cast<string>(m["Description"]));
    }
    if (m.find("DisplayName") != m.end() && !m["DisplayName"].empty()) {
      displayName = make_shared<string>(boost::any_cast<string>(m["DisplayName"]));
    }
    if (m.find("InstanceId") != m.end() && !m["InstanceId"].empty()) {
      instanceId = make_shared<string>(boost::any_cast<string>(m["InstanceId"]));
    }
    if (m.find("SkillGroupId") != m.end() && !m["SkillGroupId"].empty()) {
      skillGroupId = make_shared<long>(boost::any_cast<long>(m["SkillGroupId"]));
    }
    if (m.find("SkillGroupName") != m.end() && !m["SkillGroupName"].empty()) {
      skillGroupName = make_shared<string>(boost::any_cast<string>(m["SkillGroupName"]));
    }
  }


  virtual ~UpdateSkillGroupRequest() = default;
};
class UpdateSkillGroupResponseBody : public Darabonba::Model {
public:
  shared_ptr<string> code{};
  shared_ptr<string> message{};
  shared_ptr<string> requestId{};
  shared_ptr<bool> success{};

  UpdateSkillGroupResponseBody() {}

  explicit UpdateSkillGroupResponseBody(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (code) {
      res["Code"] = boost::any(*code);
    }
    if (message) {
      res["Message"] = boost::any(*message);
    }
    if (requestId) {
      res["RequestId"] = boost::any(*requestId);
    }
    if (success) {
      res["Success"] = boost::any(*success);
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("Code") != m.end() && !m["Code"].empty()) {
      code = make_shared<string>(boost::any_cast<string>(m["Code"]));
    }
    if (m.find("Message") != m.end() && !m["Message"].empty()) {
      message = make_shared<string>(boost::any_cast<string>(m["Message"]));
    }
    if (m.find("RequestId") != m.end() && !m["RequestId"].empty()) {
      requestId = make_shared<string>(boost::any_cast<string>(m["RequestId"]));
    }
    if (m.find("Success") != m.end() && !m["Success"].empty()) {
      success = make_shared<bool>(boost::any_cast<bool>(m["Success"]));
    }
  }


  virtual ~UpdateSkillGroupResponseBody() = default;
};
class UpdateSkillGroupResponse : public Darabonba::Model {
public:
  shared_ptr<map<string, string>> headers{};
  shared_ptr<long> statusCode{};
  shared_ptr<UpdateSkillGroupResponseBody> body{};

  UpdateSkillGroupResponse() {}

  explicit UpdateSkillGroupResponse(const std::map<string, boost::any> &config) : Darabonba::Model(config) {
    fromMap(config);
  };

  void validate() override {}

  map<string, boost::any> toMap() override {
    map<string, boost::any> res;
    if (headers) {
      res["headers"] = boost::any(*headers);
    }
    if (statusCode) {
      res["statusCode"] = boost::any(*statusCode);
    }
    if (body) {
      res["body"] = body ? boost::any(body->toMap()) : boost::any(map<string,boost::any>({}));
    }
    return res;
  }

  void fromMap(map<string, boost::any> m) override {
    if (m.find("headers") != m.end() && !m["headers"].empty()) {
      map<string, string> map1 = boost::any_cast<map<string, string>>(m["headers"]);
      map<string, string> toMap1;
      for (auto item:map1) {
         toMap1[item.first] = item.second;
      }
      headers = make_shared<map<string, string>>(toMap1);
    }
    if (m.find("statusCode") != m.end() && !m["statusCode"].empty()) {
      statusCode = make_shared<long>(boost::any_cast<long>(m["statusCode"]));
    }
    if (m.find("body") != m.end() && !m["body"].empty()) {
      if (typeid(map<string, boost::any>) == m["body"].type()) {
        UpdateSkillGroupResponseBody model1;
        model1.fromMap(boost::any_cast<map<string, boost::any>>(m["body"]));
        body = make_shared<UpdateSkillGroupResponseBody>(model1);
      }
    }
  }


  virtual ~UpdateSkillGroupResponse() = default;
};
class Client : Alibabacloud_OpenApi::Client {
public:
  explicit Client(const shared_ptr<Alibabacloud_OpenApi::Config>& config);
  string getEndpoint(shared_ptr<string> productId,
                     shared_ptr<string> regionId,
                     shared_ptr<string> endpointRule,
                     shared_ptr<string> network,
                     shared_ptr<string> suffix,
                     shared_ptr<map<string, string>> endpointMap,
                     shared_ptr<string> endpoint);
  AddHotlineNumberResponse addHotlineNumberWithOptions(shared_ptr<AddHotlineNumberRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  AddHotlineNumberResponse addHotlineNumber(shared_ptr<AddHotlineNumberRequest> request);
  AddOuterAccountResponse addOuterAccountWithOptions(shared_ptr<AddOuterAccountRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  AddOuterAccountResponse addOuterAccount(shared_ptr<AddOuterAccountRequest> request);
  AddSkillGroupResponse addSkillGroupWithOptions(shared_ptr<AddSkillGroupRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  AddSkillGroupResponse addSkillGroup(shared_ptr<AddSkillGroupRequest> request);
  AiccsSmartCallResponse aiccsSmartCallWithOptions(shared_ptr<AiccsSmartCallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  AiccsSmartCallResponse aiccsSmartCall(shared_ptr<AiccsSmartCallRequest> request);
  AiccsSmartCallOperateResponse aiccsSmartCallOperateWithOptions(shared_ptr<AiccsSmartCallOperateRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  AiccsSmartCallOperateResponse aiccsSmartCallOperate(shared_ptr<AiccsSmartCallOperateRequest> request);
  AnswerCallResponse answerCallWithOptions(shared_ptr<AnswerCallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  AnswerCallResponse answerCall(shared_ptr<AnswerCallRequest> request);
  AttachTaskResponse attachTaskWithOptions(shared_ptr<AttachTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  AttachTaskResponse attachTask(shared_ptr<AttachTaskRequest> request);
  BatchCreateQualityProjectsResponse batchCreateQualityProjectsWithOptions(shared_ptr<BatchCreateQualityProjectsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  BatchCreateQualityProjectsResponse batchCreateQualityProjects(shared_ptr<BatchCreateQualityProjectsRequest> request);
  CancelTaskResponse cancelTaskWithOptions(shared_ptr<CancelTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CancelTaskResponse cancelTask(shared_ptr<CancelTaskRequest> request);
  ChangeChatAgentStatusResponse changeChatAgentStatusWithOptions(shared_ptr<ChangeChatAgentStatusRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ChangeChatAgentStatusResponse changeChatAgentStatus(shared_ptr<ChangeChatAgentStatusRequest> request);
  ChangeQualityProjectStatusResponse changeQualityProjectStatusWithOptions(shared_ptr<ChangeQualityProjectStatusRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ChangeQualityProjectStatusResponse changeQualityProjectStatus(shared_ptr<ChangeQualityProjectStatusRequest> request);
  CreateAgentResponse createAgentWithOptions(shared_ptr<CreateAgentRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateAgentResponse createAgent(shared_ptr<CreateAgentRequest> request);
  CreateAiOutboundTaskResponse createAiOutboundTaskWithOptions(shared_ptr<CreateAiOutboundTaskRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateAiOutboundTaskResponse createAiOutboundTask(shared_ptr<CreateAiOutboundTaskRequest> request);
  CreateAiOutboundTaskBatchResponse createAiOutboundTaskBatchWithOptions(shared_ptr<CreateAiOutboundTaskBatchRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateAiOutboundTaskBatchResponse createAiOutboundTaskBatch(shared_ptr<CreateAiOutboundTaskBatchRequest> request);
  CreateDepartmentResponse createDepartmentWithOptions(shared_ptr<CreateDepartmentRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateDepartmentResponse createDepartment(shared_ptr<CreateDepartmentRequest> request);
  CreateOutboundTaskResponse createOutboundTaskWithOptions(shared_ptr<CreateOutboundTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateOutboundTaskResponse createOutboundTask(shared_ptr<CreateOutboundTaskRequest> request);
  CreateQualityProjectResponse createQualityProjectWithOptions(shared_ptr<CreateQualityProjectRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateQualityProjectResponse createQualityProject(shared_ptr<CreateQualityProjectRequest> request);
  CreateQualityRuleResponse createQualityRuleWithOptions(shared_ptr<CreateQualityRuleRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateQualityRuleResponse createQualityRule(shared_ptr<CreateQualityRuleRequest> request);
  CreateSkillGroupResponse createSkillGroupWithOptions(shared_ptr<CreateSkillGroupRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateSkillGroupResponse createSkillGroup(shared_ptr<CreateSkillGroupRequest> request);
  CreateTaskResponse createTaskWithOptions(shared_ptr<CreateTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateTaskResponse createTask(shared_ptr<CreateTaskRequest> request);
  CreateThirdSsoAgentResponse createThirdSsoAgentWithOptions(shared_ptr<CreateThirdSsoAgentRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  CreateThirdSsoAgentResponse createThirdSsoAgent(shared_ptr<CreateThirdSsoAgentRequest> request);
  DeleteAgentResponse deleteAgentWithOptions(shared_ptr<DeleteAgentRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteAgentResponse deleteAgent(shared_ptr<DeleteAgentRequest> request);
  DeleteAiOutboundTaskResponse deleteAiOutboundTaskWithOptions(shared_ptr<DeleteAiOutboundTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteAiOutboundTaskResponse deleteAiOutboundTask(shared_ptr<DeleteAiOutboundTaskRequest> request);
  DeleteDepartmentResponse deleteDepartmentWithOptions(shared_ptr<DeleteDepartmentRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteDepartmentResponse deleteDepartment(shared_ptr<DeleteDepartmentRequest> request);
  DeleteHotlineNumberResponse deleteHotlineNumberWithOptions(shared_ptr<DeleteHotlineNumberRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteHotlineNumberResponse deleteHotlineNumber(shared_ptr<DeleteHotlineNumberRequest> request);
  DeleteOutboundTaskResponse deleteOutboundTaskWithOptions(shared_ptr<DeleteOutboundTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteOutboundTaskResponse deleteOutboundTask(shared_ptr<DeleteOutboundTaskRequest> request);
  DeleteOuterAccountResponse deleteOuterAccountWithOptions(shared_ptr<DeleteOuterAccountRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteOuterAccountResponse deleteOuterAccount(shared_ptr<DeleteOuterAccountRequest> request);
  DeleteQualityProjectResponse deleteQualityProjectWithOptions(shared_ptr<DeleteQualityProjectRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteQualityProjectResponse deleteQualityProject(shared_ptr<DeleteQualityProjectRequest> request);
  DeleteQualityRuleResponse deleteQualityRuleWithOptions(shared_ptr<DeleteQualityRuleRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteQualityRuleResponse deleteQualityRule(shared_ptr<DeleteQualityRuleRequest> request);
  DeleteSkillGroupResponse deleteSkillGroupWithOptions(shared_ptr<DeleteSkillGroupRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DeleteSkillGroupResponse deleteSkillGroup(shared_ptr<DeleteSkillGroupRequest> request);
  DescribeRecordDataResponse describeRecordDataWithOptions(shared_ptr<DescribeRecordDataRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  DescribeRecordDataResponse describeRecordData(shared_ptr<DescribeRecordDataRequest> request);
  EditQualityProjectResponse editQualityProjectWithOptions(shared_ptr<EditQualityProjectRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  EditQualityProjectResponse editQualityProject(shared_ptr<EditQualityProjectRequest> request);
  EditQualityRuleResponse editQualityRuleWithOptions(shared_ptr<EditQualityRuleRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  EditQualityRuleResponse editQualityRule(shared_ptr<EditQualityRuleRequest> request);
  EditQualityRuleTagResponse editQualityRuleTagWithOptions(shared_ptr<EditQualityRuleTagRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  EditQualityRuleTagResponse editQualityRuleTag(shared_ptr<EditQualityRuleTagRequest> request);
  EncryptPhoneNumResponse encryptPhoneNumWithOptions(shared_ptr<EncryptPhoneNumRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  EncryptPhoneNumResponse encryptPhoneNum(shared_ptr<EncryptPhoneNumRequest> request);
  FetchCallResponse fetchCallWithOptions(shared_ptr<FetchCallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  FetchCallResponse fetchCall(shared_ptr<FetchCallRequest> request);
  FinishHotlineServiceResponse finishHotlineServiceWithOptions(shared_ptr<FinishHotlineServiceRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  FinishHotlineServiceResponse finishHotlineService(shared_ptr<FinishHotlineServiceRequest> request);
  GenerateWebSocketSignResponse generateWebSocketSignWithOptions(shared_ptr<GenerateWebSocketSignRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GenerateWebSocketSignResponse generateWebSocketSign(shared_ptr<GenerateWebSocketSignRequest> request);
  GetAgentResponse getAgentWithOptions(shared_ptr<GetAgentRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetAgentResponse getAgent(shared_ptr<GetAgentRequest> request);
  GetAgentBasisStatusResponse getAgentBasisStatusWithOptions(shared_ptr<GetAgentBasisStatusRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetAgentBasisStatusResponse getAgentBasisStatus(shared_ptr<GetAgentBasisStatusRequest> request);
  GetAgentByIdResponse getAgentByIdWithOptions(shared_ptr<GetAgentByIdRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetAgentByIdResponse getAgentById(shared_ptr<GetAgentByIdRequest> request);
  GetAgentDetailReportResponse getAgentDetailReportWithOptions(shared_ptr<GetAgentDetailReportRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetAgentDetailReportResponse getAgentDetailReport(shared_ptr<GetAgentDetailReportRequest> request);
  GetAgentIndexRealTimeResponse getAgentIndexRealTimeWithOptions(shared_ptr<GetAgentIndexRealTimeRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetAgentIndexRealTimeResponse getAgentIndexRealTime(shared_ptr<GetAgentIndexRealTimeRequest> request);
  GetAgentServiceStatusResponse getAgentServiceStatusWithOptions(shared_ptr<GetAgentServiceStatusRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetAgentServiceStatusResponse getAgentServiceStatus(shared_ptr<GetAgentServiceStatusRequest> request);
  GetAgentStatisticsResponse getAgentStatisticsWithOptions(shared_ptr<GetAgentStatisticsRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetAgentStatisticsResponse getAgentStatistics(shared_ptr<GetAgentStatisticsRequest> request);
  GetAiOutboundTaskBizDataResponse getAiOutboundTaskBizDataWithOptions(shared_ptr<GetAiOutboundTaskBizDataRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetAiOutboundTaskBizDataResponse getAiOutboundTaskBizData(shared_ptr<GetAiOutboundTaskBizDataRequest> request);
  GetAiOutboundTaskDetailResponse getAiOutboundTaskDetailWithOptions(shared_ptr<GetAiOutboundTaskDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetAiOutboundTaskDetailResponse getAiOutboundTaskDetail(shared_ptr<GetAiOutboundTaskDetailRequest> request);
  GetAiOutboundTaskExecDetailResponse getAiOutboundTaskExecDetailWithOptions(shared_ptr<GetAiOutboundTaskExecDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetAiOutboundTaskExecDetailResponse getAiOutboundTaskExecDetail(shared_ptr<GetAiOutboundTaskExecDetailRequest> request);
  GetAiOutboundTaskListResponse getAiOutboundTaskListWithOptions(shared_ptr<GetAiOutboundTaskListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetAiOutboundTaskListResponse getAiOutboundTaskList(shared_ptr<GetAiOutboundTaskListRequest> request);
  GetAiOutboundTaskProgressResponse getAiOutboundTaskProgressWithOptions(shared_ptr<GetAiOutboundTaskProgressRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetAiOutboundTaskProgressResponse getAiOutboundTaskProgress(shared_ptr<GetAiOutboundTaskProgressRequest> request);
  GetAllDepartmentResponse getAllDepartmentWithOptions(shared_ptr<GetAllDepartmentRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetAllDepartmentResponse getAllDepartment(shared_ptr<GetAllDepartmentRequest> request);
  GetCallSoundRecordResponse getCallSoundRecordWithOptions(shared_ptr<GetCallSoundRecordRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetCallSoundRecordResponse getCallSoundRecord(shared_ptr<GetCallSoundRecordRequest> request);
  GetConfigNumListResponse getConfigNumListWithOptions(shared_ptr<GetConfigNumListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetConfigNumListResponse getConfigNumList(shared_ptr<GetConfigNumListRequest> request);
  GetCustomerInfoResponse getCustomerInfoWithOptions(shared_ptr<GetCustomerInfoRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetCustomerInfoResponse getCustomerInfo(shared_ptr<GetCustomerInfoRequest> request);
  GetDepGroupTreeDataResponse getDepGroupTreeDataWithOptions(shared_ptr<GetDepGroupTreeDataRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetDepGroupTreeDataResponse getDepGroupTreeData(shared_ptr<GetDepGroupTreeDataRequest> request);
  GetDepartmentalLatitudeAgentStatusResponse getDepartmentalLatitudeAgentStatusWithOptions(shared_ptr<GetDepartmentalLatitudeAgentStatusRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetDepartmentalLatitudeAgentStatusResponse getDepartmentalLatitudeAgentStatus(shared_ptr<GetDepartmentalLatitudeAgentStatusRequest> request);
  GetHotlineAgentDetailResponse getHotlineAgentDetailWithOptions(shared_ptr<GetHotlineAgentDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetHotlineAgentDetailResponse getHotlineAgentDetail(shared_ptr<GetHotlineAgentDetailRequest> request);
  GetHotlineAgentDetailReportResponse getHotlineAgentDetailReportWithOptions(shared_ptr<GetHotlineAgentDetailReportRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetHotlineAgentDetailReportResponse getHotlineAgentDetailReport(shared_ptr<GetHotlineAgentDetailReportRequest> request);
  GetHotlineAgentStatusResponse getHotlineAgentStatusWithOptions(shared_ptr<GetHotlineAgentStatusRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetHotlineAgentStatusResponse getHotlineAgentStatus(shared_ptr<GetHotlineAgentStatusRequest> request);
  GetHotlineCallActionResponse getHotlineCallActionWithOptions(shared_ptr<GetHotlineCallActionRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetHotlineCallActionResponse getHotlineCallAction(shared_ptr<GetHotlineCallActionRequest> request);
  GetHotlineGroupDetailReportResponse getHotlineGroupDetailReportWithOptions(shared_ptr<GetHotlineGroupDetailReportRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetHotlineGroupDetailReportResponse getHotlineGroupDetailReport(shared_ptr<GetHotlineGroupDetailReportRequest> request);
  GetHotlineMessageLogResponse getHotlineMessageLogWithOptions(shared_ptr<GetHotlineMessageLogRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetHotlineMessageLogResponse getHotlineMessageLog(shared_ptr<GetHotlineMessageLogRequest> request);
  GetHotlineRuntimeInfoResponse getHotlineRuntimeInfoWithOptions(shared_ptr<GetHotlineRuntimeInfoRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetHotlineRuntimeInfoResponse getHotlineRuntimeInfo(shared_ptr<GetHotlineRuntimeInfoRequest> request);
  GetHotlineServiceStatisticsResponse getHotlineServiceStatisticsWithOptions(shared_ptr<GetHotlineServiceStatisticsRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetHotlineServiceStatisticsResponse getHotlineServiceStatistics(shared_ptr<GetHotlineServiceStatisticsRequest> request);
  GetHotlineWaitingNumberResponse getHotlineWaitingNumberWithOptions(shared_ptr<GetHotlineWaitingNumberRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetHotlineWaitingNumberResponse getHotlineWaitingNumber(shared_ptr<GetHotlineWaitingNumberRequest> request);
  GetIndexCurrentValueResponse getIndexCurrentValueWithOptions(shared_ptr<GetIndexCurrentValueRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetIndexCurrentValueResponse getIndexCurrentValue(shared_ptr<GetIndexCurrentValueRequest> request);
  GetInstanceListResponse getInstanceListWithOptions(shared_ptr<GetInstanceListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetInstanceListResponse getInstanceList(shared_ptr<GetInstanceListRequest> request);
  GetMcuLvsIpResponse getMcuLvsIpWithOptions(shared_ptr<GetMcuLvsIpRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetMcuLvsIpResponse getMcuLvsIp(shared_ptr<GetMcuLvsIpRequest> request);
  GetNumLocationResponse getNumLocationWithOptions(shared_ptr<GetNumLocationRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetNumLocationResponse getNumLocation(shared_ptr<GetNumLocationRequest> request);
  GetOnlineSeatInformationResponse getOnlineSeatInformationWithOptions(shared_ptr<GetOnlineSeatInformationRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetOnlineSeatInformationResponse getOnlineSeatInformation(shared_ptr<GetOnlineSeatInformationRequest> request);
  GetOnlineServiceVolumeResponse getOnlineServiceVolumeWithOptions(shared_ptr<GetOnlineServiceVolumeRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetOnlineServiceVolumeResponse getOnlineServiceVolume(shared_ptr<GetOnlineServiceVolumeRequest> request);
  GetOutbounNumListResponse getOutbounNumListWithOptions(shared_ptr<GetOutbounNumListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetOutbounNumListResponse getOutbounNumList(shared_ptr<GetOutbounNumListRequest> request);
  GetQualityProjectDetailResponse getQualityProjectDetailWithOptions(shared_ptr<GetQualityProjectDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetQualityProjectDetailResponse getQualityProjectDetail(shared_ptr<GetQualityProjectDetailRequest> request);
  GetQualityProjectListResponse getQualityProjectListWithOptions(shared_ptr<GetQualityProjectListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetQualityProjectListResponse getQualityProjectList(shared_ptr<GetQualityProjectListRequest> request);
  GetQualityProjectLogResponse getQualityProjectLogWithOptions(shared_ptr<GetQualityProjectLogRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetQualityProjectLogResponse getQualityProjectLog(shared_ptr<GetQualityProjectLogRequest> request);
  GetQualityResultResponse getQualityResultWithOptions(shared_ptr<GetQualityResultRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetQualityResultResponse getQualityResult(shared_ptr<GetQualityResultRequest> request);
  GetQualityRuleDetailResponse getQualityRuleDetailWithOptions(shared_ptr<GetQualityRuleDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetQualityRuleDetailResponse getQualityRuleDetail(shared_ptr<GetQualityRuleDetailRequest> request);
  GetQualityRuleListResponse getQualityRuleListWithOptions(shared_ptr<GetQualityRuleListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetQualityRuleListResponse getQualityRuleList(shared_ptr<GetQualityRuleListRequest> request);
  GetQualityRuleTagListResponse getQualityRuleTagListWithOptions(shared_ptr<GetQualityRuleTagListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetQualityRuleTagListResponse getQualityRuleTagList(shared_ptr<GetQualityRuleTagListRequest> request);
  GetQueueInformationResponse getQueueInformationWithOptions(shared_ptr<GetQueueInformationRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetQueueInformationResponse getQueueInformation(shared_ptr<GetQueueInformationRequest> request);
  GetRecordDataResponse getRecordDataWithOptions(shared_ptr<GetRecordDataRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetRecordDataResponse getRecordData(shared_ptr<GetRecordDataRequest> request);
  GetRecordUrlResponse getRecordUrlWithOptions(shared_ptr<GetRecordUrlRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetRecordUrlResponse getRecordUrl(shared_ptr<GetRecordUrlRequest> request);
  GetRtcTokenResponse getRtcTokenWithOptions(shared_ptr<GetRtcTokenRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetRtcTokenResponse getRtcToken(shared_ptr<GetRtcTokenRequest> request);
  GetSeatInformationResponse getSeatInformationWithOptions(shared_ptr<GetSeatInformationRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetSeatInformationResponse getSeatInformation(shared_ptr<GetSeatInformationRequest> request);
  GetSkillGroupAgentStatusDetailsResponse getSkillGroupAgentStatusDetailsWithOptions(shared_ptr<GetSkillGroupAgentStatusDetailsRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetSkillGroupAgentStatusDetailsResponse getSkillGroupAgentStatusDetails(shared_ptr<GetSkillGroupAgentStatusDetailsRequest> request);
  GetSkillGroupAndAgentStatusSummaryResponse getSkillGroupAndAgentStatusSummaryWithOptions(shared_ptr<GetSkillGroupAndAgentStatusSummaryRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetSkillGroupAndAgentStatusSummaryResponse getSkillGroupAndAgentStatusSummary(shared_ptr<GetSkillGroupAndAgentStatusSummaryRequest> request);
  GetSkillGroupLatitudeStateResponse getSkillGroupLatitudeStateWithOptions(shared_ptr<GetSkillGroupLatitudeStateRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetSkillGroupLatitudeStateResponse getSkillGroupLatitudeState(shared_ptr<GetSkillGroupLatitudeStateRequest> request);
  GetSkillGroupServiceCapabilityResponse getSkillGroupServiceCapabilityWithOptions(shared_ptr<GetSkillGroupServiceCapabilityRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetSkillGroupServiceCapabilityResponse getSkillGroupServiceCapability(shared_ptr<GetSkillGroupServiceCapabilityRequest> request);
  GetSkillGroupServiceStatusResponse getSkillGroupServiceStatusWithOptions(shared_ptr<GetSkillGroupServiceStatusRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetSkillGroupServiceStatusResponse getSkillGroupServiceStatus(shared_ptr<GetSkillGroupServiceStatusRequest> request);
  GetSkillGroupStatusTotalResponse getSkillGroupStatusTotalWithOptions(shared_ptr<GetSkillGroupStatusTotalRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  GetSkillGroupStatusTotalResponse getSkillGroupStatusTotal(shared_ptr<GetSkillGroupStatusTotalRequest> request);
  HangUpDoubleCallResponse hangUpDoubleCallWithOptions(shared_ptr<HangUpDoubleCallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  HangUpDoubleCallResponse hangUpDoubleCall(shared_ptr<HangUpDoubleCallRequest> request);
  HangupCallResponse hangupCallWithOptions(shared_ptr<HangupCallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  HangupCallResponse hangupCall(shared_ptr<HangupCallRequest> request);
  HangupOperateResponse hangupOperateWithOptions(shared_ptr<HangupOperateRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  HangupOperateResponse hangupOperate(shared_ptr<HangupOperateRequest> request);
  HangupThirdCallResponse hangupThirdCallWithOptions(shared_ptr<HangupThirdCallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  HangupThirdCallResponse hangupThirdCall(shared_ptr<HangupThirdCallRequest> request);
  HoldCallResponse holdCallWithOptions(shared_ptr<HoldCallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  HoldCallResponse holdCall(shared_ptr<HoldCallRequest> request);
  HotlineSessionQueryResponse hotlineSessionQueryWithOptions(shared_ptr<HotlineSessionQueryRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  HotlineSessionQueryResponse hotlineSessionQuery(shared_ptr<HotlineSessionQueryRequest> request);
  InsertAiOutboundPhoneNumsResponse insertAiOutboundPhoneNumsWithOptions(shared_ptr<InsertAiOutboundPhoneNumsRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  InsertAiOutboundPhoneNumsResponse insertAiOutboundPhoneNums(shared_ptr<InsertAiOutboundPhoneNumsRequest> request);
  InsertTaskDetailResponse insertTaskDetailWithOptions(shared_ptr<InsertTaskDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  InsertTaskDetailResponse insertTaskDetail(shared_ptr<InsertTaskDetailRequest> request);
  JoinThirdCallResponse joinThirdCallWithOptions(shared_ptr<JoinThirdCallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  JoinThirdCallResponse joinThirdCall(shared_ptr<JoinThirdCallRequest> request);
  ListAgentBySkillGroupIdResponse listAgentBySkillGroupIdWithOptions(shared_ptr<ListAgentBySkillGroupIdRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListAgentBySkillGroupIdResponse listAgentBySkillGroupId(shared_ptr<ListAgentBySkillGroupIdRequest> request);
  ListAiccsRobotResponse listAiccsRobotWithOptions(shared_ptr<ListAiccsRobotRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListAiccsRobotResponse listAiccsRobot(shared_ptr<ListAiccsRobotRequest> request);
  ListAvailableTtsResponse listAvailableTtsWithOptions(shared_ptr<ListAvailableTtsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListAvailableTtsResponse listAvailableTts(shared_ptr<ListAvailableTtsRequest> request);
  ListChatRecordDetailResponse listChatRecordDetailWithOptions(shared_ptr<ListChatRecordDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListChatRecordDetailResponse listChatRecordDetail(shared_ptr<ListChatRecordDetailRequest> request);
  ListDialogResponse listDialogWithOptions(shared_ptr<ListDialogRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListDialogResponse listDialog(shared_ptr<ListDialogRequest> request);
  ListHotlineRecordResponse listHotlineRecordWithOptions(shared_ptr<ListHotlineRecordRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListHotlineRecordResponse listHotlineRecord(shared_ptr<ListHotlineRecordRequest> request);
  ListHotlineRecordDetailResponse listHotlineRecordDetailWithOptions(shared_ptr<ListHotlineRecordDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListHotlineRecordDetailResponse listHotlineRecordDetail(shared_ptr<ListHotlineRecordDetailRequest> request);
  ListOutboundPhoneNumberResponse listOutboundPhoneNumberWithOptions(shared_ptr<ListOutboundPhoneNumberRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListOutboundPhoneNumberResponse listOutboundPhoneNumber(shared_ptr<ListOutboundPhoneNumberRequest> request);
  ListRobotCallDialogResponse listRobotCallDialogWithOptions(shared_ptr<ListRobotCallDialogRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListRobotCallDialogResponse listRobotCallDialog(shared_ptr<ListRobotCallDialogRequest> request);
  ListRobotNodeResponse listRobotNodeWithOptions(shared_ptr<ListRobotNodeRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListRobotNodeResponse listRobotNode(shared_ptr<ListRobotNodeRequest> request);
  ListRobotParamsResponse listRobotParamsWithOptions(shared_ptr<ListRobotParamsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListRobotParamsResponse listRobotParams(shared_ptr<ListRobotParamsRequest> request);
  ListRolesResponse listRolesWithOptions(shared_ptr<ListRolesRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListRolesResponse listRoles(shared_ptr<ListRolesRequest> request);
  ListSkillGroupResponse listSkillGroupWithOptions(shared_ptr<ListSkillGroupRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListSkillGroupResponse listSkillGroup(shared_ptr<ListSkillGroupRequest> request);
  ListTaskResponse listTaskWithOptions(shared_ptr<ListTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListTaskResponse listTask(shared_ptr<ListTaskRequest> request);
  ListTaskDetailResponse listTaskDetailWithOptions(shared_ptr<ListTaskDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ListTaskDetailResponse listTaskDetail(shared_ptr<ListTaskDetailRequest> request);
  LlmSmartCallResponse llmSmartCallWithOptions(shared_ptr<LlmSmartCallRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  LlmSmartCallResponse llmSmartCall(shared_ptr<LlmSmartCallRequest> request);
  LlmSmartCallEncryptResponse llmSmartCallEncryptWithOptions(shared_ptr<LlmSmartCallEncryptRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  LlmSmartCallEncryptResponse llmSmartCallEncrypt(shared_ptr<LlmSmartCallEncryptRequest> request);
  MakeCallResponse makeCallWithOptions(shared_ptr<MakeCallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  MakeCallResponse makeCall(shared_ptr<MakeCallRequest> request);
  MakeDoubleCallResponse makeDoubleCallWithOptions(shared_ptr<MakeDoubleCallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  MakeDoubleCallResponse makeDoubleCall(shared_ptr<MakeDoubleCallRequest> request);
  QueryHotlineInQueueResponse queryHotlineInQueueWithOptions(shared_ptr<QueryHotlineInQueueRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  QueryHotlineInQueueResponse queryHotlineInQueue(shared_ptr<QueryHotlineInQueueRequest> request);
  QueryHotlineNumberResponse queryHotlineNumberWithOptions(shared_ptr<QueryHotlineNumberRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  QueryHotlineNumberResponse queryHotlineNumber(shared_ptr<QueryHotlineNumberRequest> request);
  QueryOutboundTaskResponse queryOutboundTaskWithOptions(shared_ptr<QueryOutboundTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  QueryOutboundTaskResponse queryOutboundTask(shared_ptr<QueryOutboundTaskRequest> request);
  QuerySkillGroupsResponse querySkillGroupsWithOptions(shared_ptr<QuerySkillGroupsRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  QuerySkillGroupsResponse querySkillGroups(shared_ptr<QuerySkillGroupsRequest> request);
  QueryTaskDetailResponse queryTaskDetailWithOptions(shared_ptr<QueryTaskDetailRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  QueryTaskDetailResponse queryTaskDetail(shared_ptr<QueryTaskDetailRequest> request);
  QueryTicketsResponse queryTicketsWithOptions(shared_ptr<QueryTicketsRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  QueryTicketsResponse queryTickets(shared_ptr<QueryTicketsRequest> request);
  QueryTouchListResponse queryTouchListWithOptions(shared_ptr<QueryTouchListRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  QueryTouchListResponse queryTouchList(shared_ptr<QueryTouchListRequest> request);
  RemoveAgentFromSkillGroupResponse removeAgentFromSkillGroupWithOptions(shared_ptr<RemoveAgentFromSkillGroupRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  RemoveAgentFromSkillGroupResponse removeAgentFromSkillGroup(shared_ptr<RemoveAgentFromSkillGroupRequest> request);
  RemoveSkillGroupResponse removeSkillGroupWithOptions(shared_ptr<RemoveSkillGroupRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  RemoveSkillGroupResponse removeSkillGroup(shared_ptr<RemoveSkillGroupRequest> request);
  ResetHotlineNumberResponse resetHotlineNumberWithOptions(shared_ptr<ResetHotlineNumberRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  ResetHotlineNumberResponse resetHotlineNumber(shared_ptr<ResetHotlineNumberRequest> request);
  RestartOutboundTaskResponse restartOutboundTaskWithOptions(shared_ptr<RestartOutboundTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  RestartOutboundTaskResponse restartOutboundTask(shared_ptr<RestartOutboundTaskRequest> request);
  RobotCallResponse robotCallWithOptions(shared_ptr<RobotCallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  RobotCallResponse robotCall(shared_ptr<RobotCallRequest> request);
  SendCcoSmartCallResponse sendCcoSmartCallWithOptions(shared_ptr<SendCcoSmartCallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  SendCcoSmartCallResponse sendCcoSmartCall(shared_ptr<SendCcoSmartCallRequest> request);
  SendCcoSmartCallOperateResponse sendCcoSmartCallOperateWithOptions(shared_ptr<SendCcoSmartCallOperateRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  SendCcoSmartCallOperateResponse sendCcoSmartCallOperate(shared_ptr<SendCcoSmartCallOperateRequest> request);
  SendHotlineHeartBeatResponse sendHotlineHeartBeatWithOptions(shared_ptr<SendHotlineHeartBeatRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  SendHotlineHeartBeatResponse sendHotlineHeartBeat(shared_ptr<SendHotlineHeartBeatRequest> request);
  StartAiOutboundTaskResponse startAiOutboundTaskWithOptions(shared_ptr<StartAiOutboundTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  StartAiOutboundTaskResponse startAiOutboundTask(shared_ptr<StartAiOutboundTaskRequest> request);
  StartCallResponse startCallWithOptions(shared_ptr<StartCallRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  StartCallResponse startCall(shared_ptr<StartCallRequest> request);
  StartCallV2Response startCallV2WithOptions(shared_ptr<StartCallV2Request> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  StartCallV2Response startCallV2(shared_ptr<StartCallV2Request> request);
  StartChatWorkResponse startChatWorkWithOptions(shared_ptr<StartChatWorkRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  StartChatWorkResponse startChatWork(shared_ptr<StartChatWorkRequest> request);
  StartHotlineServiceResponse startHotlineServiceWithOptions(shared_ptr<StartHotlineServiceRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  StartHotlineServiceResponse startHotlineService(shared_ptr<StartHotlineServiceRequest> request);
  StartMicroOutboundResponse startMicroOutboundWithOptions(shared_ptr<StartMicroOutboundRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  StartMicroOutboundResponse startMicroOutbound(shared_ptr<StartMicroOutboundRequest> request);
  StartTaskResponse startTaskWithOptions(shared_ptr<StartTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  StartTaskResponse startTask(shared_ptr<StartTaskRequest> request);
  StopAiOutboundTaskResponse stopAiOutboundTaskWithOptions(shared_ptr<StopAiOutboundTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  StopAiOutboundTaskResponse stopAiOutboundTask(shared_ptr<StopAiOutboundTaskRequest> request);
  StopTaskResponse stopTaskWithOptions(shared_ptr<StopTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  StopTaskResponse stopTask(shared_ptr<StopTaskRequest> request);
  SuspendHotlineServiceResponse suspendHotlineServiceWithOptions(shared_ptr<SuspendHotlineServiceRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  SuspendHotlineServiceResponse suspendHotlineService(shared_ptr<SuspendHotlineServiceRequest> request);
  SuspendOutboundTaskResponse suspendOutboundTaskWithOptions(shared_ptr<SuspendOutboundTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  SuspendOutboundTaskResponse suspendOutboundTask(shared_ptr<SuspendOutboundTaskRequest> request);
  TerminateAiOutboundTaskResponse terminateAiOutboundTaskWithOptions(shared_ptr<TerminateAiOutboundTaskRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  TerminateAiOutboundTaskResponse terminateAiOutboundTask(shared_ptr<TerminateAiOutboundTaskRequest> request);
  TransferCallToSkillGroupResponse transferCallToSkillGroupWithOptions(shared_ptr<TransferCallToSkillGroupRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  TransferCallToSkillGroupResponse transferCallToSkillGroup(shared_ptr<TransferCallToSkillGroupRequest> request);
  UpdateAgentResponse updateAgentWithOptions(shared_ptr<UpdateAgentRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  UpdateAgentResponse updateAgent(shared_ptr<UpdateAgentRequest> request);
  UpdateAiOutboundTaskResponse updateAiOutboundTaskWithOptions(shared_ptr<UpdateAiOutboundTaskRequest> tmpReq, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  UpdateAiOutboundTaskResponse updateAiOutboundTask(shared_ptr<UpdateAiOutboundTaskRequest> request);
  UpdateDepartmentResponse updateDepartmentWithOptions(shared_ptr<UpdateDepartmentRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  UpdateDepartmentResponse updateDepartment(shared_ptr<UpdateDepartmentRequest> request);
  UpdateOuterAccountResponse updateOuterAccountWithOptions(shared_ptr<UpdateOuterAccountRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  UpdateOuterAccountResponse updateOuterAccount(shared_ptr<UpdateOuterAccountRequest> request);
  UpdateSkillGroupResponse updateSkillGroupWithOptions(shared_ptr<UpdateSkillGroupRequest> request, shared_ptr<Darabonba_Util::RuntimeOptions> runtime);
  UpdateSkillGroupResponse updateSkillGroup(shared_ptr<UpdateSkillGroupRequest> request);

  virtual ~Client() = default;
};
} // namespace Alibabacloud_Aiccs20191015

#endif
